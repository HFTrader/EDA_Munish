package TemplateEngine;



import java.util.HashMap;
import java.util.Map;

import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
import org.eclipse.cdt.core.dom.ast.gnu.cpp.GPPLanguage;
import org.eclipse.cdt.core.parser.DefaultLogService;
import org.eclipse.cdt.core.parser.FileContent;
import org.eclipse.cdt.core.parser.IParserLogService;
import org.eclipse.cdt.core.parser.IScannerInfo;
import org.eclipse.cdt.core.parser.IncludeFileContentProvider;
import org.eclipse.cdt.core.parser.ScannerInfo;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.cdt.core.dom.ast.IASTDeclaration;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTSimpleDeclaration;
import org.eclipse.cdt.core.dom.ast.IASTDeclarator;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTFunctionDeclarator;
import org.eclipse.cdt.core.dom.ast.IASTDeclSpecifier;
import org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTSimpleDeclSpecifier;
import org.eclipse.cdt.core.dom.ast.IASTPointerOperator;



public class TemplateEngine {	
	Map<String, String> templateDataModel = new HashMap<String, String>();			// to store the data model that would be used by the freemarker template engine to generate the Embedded-C source code
	
	

	
    public static void main( String[] args ) throws CoreException {
		// reading in the "sw_functions.h" file provided by Application Developer
    	// TODO: path location should be automated
    	FileContent fileContent = FileContent.createForExternalFileLocation("./docs/sw_functions.h");
    	
    	// extracting Eclipse CDT parser's translationUnit (AST)
    	Map definedSymbols = new HashMap();
    	String[] includePaths = new String[0];
    	IScannerInfo info = new ScannerInfo(definedSymbols, includePaths);    	
    	IParserLogService log = new DefaultLogService();
    	IncludeFileContentProvider emptyIncludes = IncludeFileContentProvider.getEmptyFilesProvider();
    	int opts = 8;
    	IASTTranslationUnit translationUnit = GPPLanguage.getDefault().getASTTranslationUnit(fileContent, info, emptyIncludes, null, opts, log);
    	
		// generating the data model for template generation using translationUnit
    	Map<String, Object> templateDataModel = new HashMap<String, Object> ();
    	templateDataModel = createModel(translationUnit);
    }

    
	public static Map<String, Object> createModel(IASTTranslationUnit tu) {
		Map<String, Object> returnMap = new HashMap<String, Object> ();
		
		// TODO: for now all the function declarations are found to be of CPPASTSimpleDeclaration type.....what about other types?		
		CPPASTSimpleDeclaration[] declarations = (CPPASTSimpleDeclaration[]) tu.getDeclarations();	// extracting all the declarations in the provided source file
		FunctionSpecifier[] functionsForMap = new FunctionSpecifier[declarations.length]; 
		
		int index = 0;
		
		for (CPPASTSimpleDeclaration declaration : declarations) {			// iterating over each function declaration
			// for each function declaration, get
			// a) name
			// b) return type
			// c) parameter names
			// d) parameter types
			// store each of these function data in the model and then return it to the callee

			CPPASTFunctionDeclarator[] declarators = (CPPASTFunctionDeclarator[]) declaration.getDeclarators();
			// we expect only 1 declarator for each declaration
			assert (declarators.length == 1);
			
			index++;
			
			
			
			
			
			
			
			
			
		}
		

		
		return returnMap;
	}    
}        
    



    


class FunctionSpecifier {
	String name;
	String returnType;
	ParameterSpecifier[] parameters;
}


class ParameterSpecifier {
	String name;
	String returnType;
}

    
    