import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
import org.eclipse.cdt.core.dom.ast.gnu.cpp.GPPLanguage;
import org.eclipse.cdt.core.parser.FileContent;
  
import freemarker.template.Configuration;
import freemarker.template.Template; 
import freemarker.template.TemplateException;

public class codegen {
	
	public static void main(String[] args) {
		String ip_name = "GrayscaleIP";
		int ip_NumGripRules = 2;	
		String ip_DriverPath = "../driver/";
		String ip_ConfigPath = "../config/";
		String ip_SWPath = "";
		String system_InterruptControllerType_path = "xscugic.h";		
		String system_InterruptControllerStruct = "XscuGic";
		
		
		FileContent fileContent = FileContent.createForExternalFileLocation("IPSW/GrayscaleIP_SW.h");
		IASTTranslationUnit translationUnit = GPPLanguage.getDefault().getASTTranslationUnit(fileContent, info, emptyIncludes, null, opts, log);
		
		
		//Freemarker configuration object
		Configuration cfg = new Configuration();
		try {
			//Load template from source folder
			Template template = cfg.getTemplate("src/IP_hwswInterface_template.ftl");
			
			// Build the data-model
			Map<String, Object> data = new HashMap<String, Object>();
/*			data.put("message", "Hello World!");

			//List parsing 
			List<String> countries = new ArrayList<String>();
			countries.add("India");
			countries.add("United States");
			countries.add("Germany");
			countries.add("France");
			
			data.put("countries", countries);*/
			data.put("ip_name", ip_name);
			data.put("num_grip_rules", ip_NumGripRules);
			data.put("driver_path", ip_DriverPath);
			data.put("config_path", ip_ConfigPath);
			data.put("SW_path", ip_SWPath);
			data.put("interruptcontroller_path", system_InterruptControllerType_path);
			data.put("interruptcontroller", system_InterruptControllerStruct);

/*			
			// Console output
			Writer out = new OutputStreamWriter(System.out);
			template.process(data, out);
			out.flush();*/

			// File output
			Writer file = new FileWriter (new File("gen_files/" + ip_name + "_func.h"));
			template.process(data, file);
			file.flush();
			file.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		} catch (TemplateException e) {
			e.printStackTrace();
		}
	}
}








