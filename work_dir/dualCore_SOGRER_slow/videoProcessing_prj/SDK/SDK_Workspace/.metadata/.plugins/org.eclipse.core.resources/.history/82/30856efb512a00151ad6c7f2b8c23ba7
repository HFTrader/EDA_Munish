#include "hwsw_functions.h"



void hwConvToGray(unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short horizontalActiveTime) {
	if (GrayscaleFilter_busy == 1) {
		ConvToGray(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime);
	} else {
		config_filterVDMA(0x43040000, DMA_MEM_TO_DEV, ImgIn_BaseAddr);				// the base-address for the VDMA should be extracted from "SoC_config.h" by the template engine
		config_filterVDMA(0x43040000, DMA_DEV_TO_MEM, ImgOut_BaseAddr);
		GrayscaleFilter_busy = 1;
		while(GrayscaleFilter_busy == 1);
	}
}


// incase no HA is available for grayscale filtering then following implementation should be generated by the template engine
void hwConvToGray(unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short horizontalActiveTime) {
	ConvToGray(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime);
}


//TODO: make the following commented functions specific to SoC_config.h and not dependent on Xilinx SDK BSP!!
/*
void SobelFilter_Init() {
	SobelFilter_busy = 0;

	xSobelFilter.Control_bus_BaseAddress = XPAR_SOBEL_FILTER_TOP_0_S_AXI_CONTROL_BUS_BASEADDR;
	xSobelFilter.IsReady = XIL_COMPONENT_IS_READY;
	config_sobelfilter(xSobelFilter);
	resetVDMA(XPAR_AXI_VDMA_1_BASEADDR);
	config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_MEM_TO_DEV, VIDEO_BASEADDR_CPU0);
	config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_DEV_TO_MEM, VIDEO_BASEADDR_CPU0 + FRAME_SIZE);
}



void ErodeFilter_Init() {
	ErodeFilter_busy = 0;

	xErodeFilter.Control_bus_BaseAddress = XPAR_IMAGE_FILTER_TOP_0_S_AXI_CONTROL_BUS_BASEADDR;
	xErodeFilter.IsReady = XIL_COMPONENT_IS_READY;
	config_erodefilter(xErodeFilter);
	resetVDMA(XPAR_AXI_VDMA_3_BASEADDR);
	config_filterVDMA(XPAR_AXI_VDMA_3_BASEADDR, DMA_MEM_TO_DEV, VIDEO_BASEADDR_CPU0 + FRAME_SIZE);
	config_filterVDMA(XPAR_AXI_VDMA_3_BASEADDR, DMA_DEV_TO_MEM, VIDEO_BASEADDR_CPU0 + FRAME_SIZE*2);
}



void GrayscaleFilter_Init() {
	GrayscaleFilter_busy = 0;

	xGrayScaleFilter.Control_bus_BaseAddress = XPAR_GRAY_SCALE_TOP_0_S_AXI_CONTROL_BUS_BASEADDR;
	xGrayScaleFilter.IsReady = XIL_COMPONENT_IS_READY;
	config_grayScaleFilter(xGrayScaleFilter);
	resetVDMA(XPAR_AXI_VDMA_1_BASEADDR);
	config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_MEM_TO_DEV, VIDEO_BASEADDR_CPU0 + FRAME_SIZE*2);
	config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_DEV_TO_MEM, VIDEO_BASEADDR_CPU0 + FRAME_SIZE*3);
}
*/


void HA_Initialize() {
	SobelFilter_Init();
	ErodeFilter_Init();
	GrayscaleFilter_Init();
}



void SobelFilter_VDMA_ISR(void * baseaddr_p)
{
	Xil_Out32((SobelFilter_VDMA_BASEADDR + AXI_FILTER_RX_CTRL), 0x00000004);
	SobelFilter_busy = 0;
}

void ErodeFilter_VDMA_ISR(void * baseaddr_p)
{
	Xil_Out32((ErodeFilter_VDMA_BASEADDR + AXI_FILTER_RX_CTRL), 0x00000004);
	ErodeFilter_busy = 0;
}

void GrayscaleFilter_VDMA_ISR(void * baseaddr_p)
{
	Xil_Out32((GrayscaleFilter_VDMA_BASEADDR + AXI_FILTER_RX_CTRL), 0x00000004);
	GrayscaleFilter_busy = 0;
}








