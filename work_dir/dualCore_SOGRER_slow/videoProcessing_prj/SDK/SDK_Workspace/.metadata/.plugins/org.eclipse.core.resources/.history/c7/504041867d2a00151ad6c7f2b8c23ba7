#include "hwsw_functions.h"

#if 1
// NOTE: if Grayscale HA is present
void hwConvToGray(unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short horizontalActiveTime) {
	if (GrayscaleFilter_busy == 1) {
		ConvToGray(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime);
	} else {
		config_filterVDMA(GrayscaleFilter_VDMA_BASEADDR, DMA_MEM_TO_DEV, ImgIn_BaseAddr);
		config_filterVDMA(GrayscaleFilter_VDMA_BASEADDR, DMA_DEV_TO_MEM, ImgOut_BaseAddr);
		GrayscaleFilter_busy = 1;
		while (GrayscaleFilter_busy == 1);
	}
}
#endif

#if 0
// NOTE: if Grayscale HA is absent
void hwConvToGray(unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short horizontalActiveTime) {
	ConvToGray(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime);
}
#endif

// NOTE: similarly generate function definitions for Sobel and Erode filters as well depending on the presence/absence of their corresponding HAs in SoC
#if 1
void hwEdgeDetection(unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short h_ActiveTime) {
	if (SobelFilter_busy == 1) {
		EdgeDetection(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, h_ActiveTime);
	} else {
		config_filterVDMA(SobelFilter_VDMA_BASEADDR, DMA_MEM_TO_DEV, ImgIn_BaseAddr);
		config_filterVDMA(SobelFilter_VDMA_BASEADDR, DMA_DEV_TO_MEM, ImgOut_BaseAddr);
		SobelFilter_busy = 1;
		while (SobelFilter_busy == 1);
	}
}
#endif

#if 0
void hwEdgeDetection(unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short h_ActiveTime) {
	EdgeDetection(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, h_ActiveTime);
}
#endif


#if 1
void hwErode(unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short h_ActiveTime) {
	if (ErodeFilter_busy == 1) {
		Erode(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, h_ActiveTime);
	} else {
		config_filterVDMA(ErodeFilter_VDMA_BASEADDR, DMA_MEM_TO_DEV, ImgIn_BaseAddr);
		config_filterVDMA(ErodeFilter_VDMA_BASEADDR, DMA_DEV_TO_MEM, ImgOut_BaseAddr);
		ErodeFilter_busy = 1;
		while (ErodeFilter_busy == 1);
	}
}
#endif

#if 0
void hwErode(unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short h_ActiveTime) {
	Erode(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, h_ActiveTime);
}
#endif

//TODO: configure Interrupt Controller (provided as a function argument) by the application developer to connect the HA ISRs in following Init functions!!
// NOTE: only generate this if Sobel HA is present
void SobelFilter_Init() {
	SobelFilter_busy = 0;

	xSobelFilter.Control_bus_BaseAddress = SobelFilter_CONTROL_BUS_BASEADDR;
	xSobelFilter.IsReady = XIL_COMPONENT_IS_READY;
	config_sobelfilter(xSobelFilter);
	resetVDMA(SobelFilter_VDMA_BASEADDR);
}



void ErodeFilter_Init() {
	ErodeFilter_busy = 0;

	xErodeFilter.Control_bus_BaseAddress = ErodeFilter_CONTROL_BUS_BASEADDR;
	xErodeFilter.IsReady = XIL_COMPONENT_IS_READY;
	config_erodefilter(xErodeFilter);
	resetVDMA(ErodeFilter_VDMA_BASEADDR);
}



void GrayscaleFilter_Init() {
	GrayscaleFilter_busy = 0;

	xGrayScaleFilter.Control_bus_BaseAddress = GrayscaleFilter_CONTROL_BUS_BASEADDR;
	xGrayScaleFilter.IsReady = XIL_COMPONENT_IS_READY;
	config_grayScaleFilter(xGrayScaleFilter);
	resetVDMA(GrayscaleFilter_VDMA_BASEADDR);
}



void HA_Initialize() {
	// NOTE: only if Sobel HA is present
	SobelFilter_Init();
	// NOTE: only if Erode HA is present
	ErodeFilter_Init();
	// NOTE: only if Grayscale HA is present
	GrayscaleFilter_Init();
}


// NOTE: only if Sobel HA is present
void SobelFilter_VDMA_ISR(void * baseaddr_p)
{
	Xil_Out32((SobelFilter_VDMA_BASEADDR + AXI_FILTER_RX_CTRL), 0x00000004);
	SobelFilter_busy = 0;
}

// NOTE: only if Erode HA is present
void ErodeFilter_VDMA_ISR(void * baseaddr_p)
{
	Xil_Out32((ErodeFilter_VDMA_BASEADDR + AXI_FILTER_RX_CTRL), 0x00000004);
	ErodeFilter_busy = 0;
}

// NOTE: only if Grayscale HA is present
void GrayscaleFilter_VDMA_ISR(void * baseaddr_p)
{
	Xil_Out32((GrayscaleFilter_VDMA_BASEADDR + AXI_FILTER_RX_CTRL), 0x00000004);
	GrayscaleFilter_busy = 0;
}








