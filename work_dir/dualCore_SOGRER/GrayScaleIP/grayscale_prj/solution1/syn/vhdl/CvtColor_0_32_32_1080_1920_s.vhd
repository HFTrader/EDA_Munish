-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CvtColor_0_32_32_1080_1920_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    p_src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_0_V_read : OUT STD_LOGIC;
    p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_1_V_read : OUT STD_LOGIC;
    p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_2_V_read : OUT STD_LOGIC;
    p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_0_V_write : OUT STD_LOGIC;
    p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_1_V_write : OUT STD_LOGIC;
    p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of CvtColor_0_32_32_1080_1920_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st10_fsm_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv27_3A5E3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000111010010111100011";
    constant ap_const_lv28_99168 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010011001000101101000";
    constant ap_const_lv29_12C8B4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100101100100010110100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal j_reg_148 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_56 : BOOLEAN;
    signal i_1_fu_165_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_293 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_80 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_298_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_298_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_298_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_298_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_298_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_176_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Val2_s_reg_327 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_2_reg_332 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_1_reg_337 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_3_fu_214_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_3_reg_342 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_1_reg_347 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_137 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_269_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_cast_fu_211_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_8_cast_fu_219_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_4_fu_222_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_5_cast_fu_245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_cast_fu_248_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_6_fu_251_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_265_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_186_ce : STD_LOGIC;
    signal grp_fu_196_ce : STD_LOGIC;
    signal grp_fu_205_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_186_p00 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_196_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_205_p00 : STD_LOGIC_VECTOR (28 downto 0);

    component gray_scale_mul_8ns_18ns_27_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component gray_scale_mul_8ns_20ns_28_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component gray_scale_mul_8ns_21ns_29_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    gray_scale_mul_8ns_18ns_27_3_U17 : component gray_scale_mul_8ns_18ns_27_3
    generic map (
        ID => 17,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 18,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p2);

    gray_scale_mul_8ns_20ns_28_3_U18 : component gray_scale_mul_8ns_20ns_28_3
    generic map (
        ID => 18,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 20,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_196_p0,
        din1 => grp_fu_196_p1,
        ce => grp_fu_196_ce,
        dout => grp_fu_196_p2);

    gray_scale_mul_8ns_21ns_29_3_U19 : component gray_scale_mul_8ns_21ns_29_3
    generic map (
        ID => 19,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 21,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_205_p0,
        din1 => grp_fu_205_p1,
        ce => grp_fu_205_ce,
        dout => grp_fu_205_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_160_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((exitcond_fu_171_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_160_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (exitcond_fu_171_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_160_p2)) or ((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((exitcond_fu_171_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_160_p2))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_160_p2))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_160_p2))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_160_p2))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_160_p2))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_137 assign process. --
    i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_3 = ap_CS_fsm)) then 
                i_reg_137 <= i_1_reg_293;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_56))) then 
                i_reg_137 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- j_reg_148 assign process. --
    j_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (exitcond_fu_171_p2 = ap_const_lv1_0))) then 
                j_reg_148 <= j_1_fu_176_p2;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_160_p2))) then 
                j_reg_148 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                ap_reg_ppstg_exitcond_reg_298_pp0_it1 <= exitcond_reg_298;
                ap_reg_ppstg_exitcond_reg_298_pp0_it2 <= ap_reg_ppstg_exitcond_reg_298_pp0_it1;
                ap_reg_ppstg_exitcond_reg_298_pp0_it3 <= ap_reg_ppstg_exitcond_reg_298_pp0_it2;
                ap_reg_ppstg_exitcond_reg_298_pp0_it4 <= ap_reg_ppstg_exitcond_reg_298_pp0_it3;
                ap_reg_ppstg_exitcond_reg_298_pp0_it5 <= ap_reg_ppstg_exitcond_reg_298_pp0_it4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                exitcond_reg_298 <= exitcond_fu_171_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_1_reg_293 <= i_1_fu_165_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it3))) then
                p_Val2_1_reg_337 <= grp_fu_205_p2;
                p_Val2_3_reg_342 <= p_Val2_3_fu_214_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it2))) then
                p_Val2_2_reg_332 <= grp_fu_196_p2;
                p_Val2_s_reg_327 <= grp_fu_186_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it4))) then
                tmp_11_reg_352 <= p_Val2_4_fu_222_p2(20 downto 20);
                tmp_1_reg_347 <= p_Val2_4_fu_222_p2(28 downto 21);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_298 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then
                tmp_15_reg_307 <= p_src_data_stream_1_V_dout;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_56 , exitcond_fu_171_p2 , ap_reg_ppiten_pp0_it0 , ap_sig_bdd_80 , ap_reg_ppiten_pp0_it1 , ap_reg_ppiten_pp0_it5 , ap_sig_bdd_102 , ap_reg_ppiten_pp0_it6 , exitcond8_fu_160_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_56)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond8_fu_160_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((exitcond_fu_171_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not((exitcond_fu_171_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_st10_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, exitcond8_fu_160_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_160_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond8_fu_160_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_160_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(p_dst_data_stream_0_V_full_n, p_dst_data_stream_1_V_full_n, p_dst_data_stream_2_V_full_n, ap_reg_ppstg_exitcond_reg_298_pp0_it5)
    begin
                ap_sig_bdd_102 <= (((p_dst_data_stream_0_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it5)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it5) and (p_dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it5) and (p_dst_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_56 assign process. --
    ap_sig_bdd_56_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_56 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(p_src_data_stream_0_V_empty_n, p_src_data_stream_1_V_empty_n, p_src_data_stream_2_V_empty_n, exitcond_reg_298)
    begin
                ap_sig_bdd_80 <= (((p_src_data_stream_0_V_empty_n = ap_const_logic_0) and (exitcond_reg_298 = ap_const_lv1_0)) or ((exitcond_reg_298 = ap_const_lv1_0) and (p_src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_reg_298 = ap_const_lv1_0) and (p_src_data_stream_2_V_empty_n = ap_const_logic_0)));
    end process;

    exitcond8_fu_160_p2 <= "1" when (i_reg_137 = p_src_rows_V_read) else "0";
    exitcond_fu_171_p2 <= "1" when (j_reg_148 = p_src_cols_V_read) else "0";

    -- grp_fu_186_ce assign process. --
    grp_fu_186_ce_assign_proc : process(ap_CS_fsm, exitcond_reg_298, ap_sig_bdd_80, ap_reg_ppiten_pp0_it1, ap_sig_bdd_102, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_reg_298_pp0_it1, ap_reg_ppstg_exitcond_reg_298_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and ((exitcond_reg_298 = ap_const_lv1_0) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it2)))) then 
            grp_fu_186_ce <= ap_const_logic_1;
        else 
            grp_fu_186_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_186_p0 <= grp_fu_186_p00(8 - 1 downto 0);
    grp_fu_186_p00 <= std_logic_vector(resize(unsigned(p_src_data_stream_2_V_dout),27));
    grp_fu_186_p1 <= ap_const_lv27_3A5E3(18 - 1 downto 0);

    -- grp_fu_196_ce assign process. --
    grp_fu_196_ce_assign_proc : process(ap_CS_fsm, exitcond_reg_298, ap_sig_bdd_80, ap_reg_ppiten_pp0_it1, ap_sig_bdd_102, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_reg_298_pp0_it1, ap_reg_ppstg_exitcond_reg_298_pp0_it2)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and ((exitcond_reg_298 = ap_const_lv1_0) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it2)))) then 
            grp_fu_196_ce <= ap_const_logic_1;
        else 
            grp_fu_196_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_196_p0 <= grp_fu_196_p00(8 - 1 downto 0);
    grp_fu_196_p00 <= std_logic_vector(resize(unsigned(p_src_data_stream_0_V_dout),28));
    grp_fu_196_p1 <= ap_const_lv28_99168(20 - 1 downto 0);

    -- grp_fu_205_ce assign process. --
    grp_fu_205_ce_assign_proc : process(ap_CS_fsm, ap_sig_bdd_80, ap_reg_ppiten_pp0_it1, ap_sig_bdd_102, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_reg_298_pp0_it1, ap_reg_ppstg_exitcond_reg_298_pp0_it2, ap_reg_ppstg_exitcond_reg_298_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it3)))) then 
            grp_fu_205_ce <= ap_const_logic_1;
        else 
            grp_fu_205_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_205_p0 <= grp_fu_205_p00(8 - 1 downto 0);
    grp_fu_205_p00 <= std_logic_vector(resize(unsigned(tmp_15_reg_307),29));
    grp_fu_205_p1 <= ap_const_lv29_12C8B4(21 - 1 downto 0);
    i_1_fu_165_p2 <= std_logic_vector(unsigned(i_reg_137) + unsigned(ap_const_lv12_1));
    j_1_fu_176_p2 <= std_logic_vector(unsigned(j_reg_148) + unsigned(ap_const_lv12_1));
    p_Val2_3_fu_214_p2 <= std_logic_vector(unsigned(p_Val2_2_reg_332) + unsigned(tmp_cast_fu_211_p1));
    p_Val2_4_fu_222_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_337) + unsigned(tmp_8_cast_fu_219_p1));
    p_Val2_5_cast_fu_245_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_347),9));
    p_Val2_6_fu_251_p2 <= std_logic_vector(unsigned(p_Val2_5_cast_fu_245_p1) + unsigned(tmp_11_cast_fu_248_p1));
    p_dst_data_stream_0_V_din <= tmp_9_fu_269_p3;

    -- p_dst_data_stream_0_V_write assign process. --
    p_dst_data_stream_0_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_80, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_298_pp0_it5, ap_sig_bdd_102, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            p_dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_dst_data_stream_1_V_din <= tmp_9_fu_269_p3;

    -- p_dst_data_stream_1_V_write assign process. --
    p_dst_data_stream_1_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_80, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_298_pp0_it5, ap_sig_bdd_102, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            p_dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_dst_data_stream_2_V_din <= tmp_9_fu_269_p3;

    -- p_dst_data_stream_2_V_write assign process. --
    p_dst_data_stream_2_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_80, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_298_pp0_it5, ap_sig_bdd_102, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_298_pp0_it5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            p_dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- p_src_data_stream_0_V_read assign process. --
    p_src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm, exitcond_reg_298, ap_sig_bdd_80, ap_reg_ppiten_pp0_it1, ap_sig_bdd_102, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_298 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            p_src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- p_src_data_stream_1_V_read assign process. --
    p_src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm, exitcond_reg_298, ap_sig_bdd_80, ap_reg_ppiten_pp0_it1, ap_sig_bdd_102, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_298 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            p_src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- p_src_data_stream_2_V_read assign process. --
    p_src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm, exitcond_reg_298, ap_sig_bdd_80, ap_reg_ppiten_pp0_it1, ap_sig_bdd_102, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_ST_pp0_stg0_fsm_2 = ap_CS_fsm) and (exitcond_reg_298 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_80 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_102 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))))) then 
            p_src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_cast_fu_248_p1 <= std_logic_vector(resize(unsigned(tmp_11_reg_352),9));
    tmp_12_fu_257_p3 <= p_Val2_6_fu_251_p2(8 downto 8);
    tmp_13_fu_265_p1 <= p_Val2_6_fu_251_p2(8 - 1 downto 0);
    tmp_8_cast_fu_219_p1 <= std_logic_vector(resize(unsigned(p_Val2_3_reg_342),29));
    tmp_9_fu_269_p3 <= 
        ap_const_lv8_FF when (tmp_12_fu_257_p3(0) = '1') else 
        tmp_13_fu_265_p1;
    tmp_cast_fu_211_p1 <= std_logic_vector(resize(unsigned(p_Val2_s_reg_327),28));
end behav;
