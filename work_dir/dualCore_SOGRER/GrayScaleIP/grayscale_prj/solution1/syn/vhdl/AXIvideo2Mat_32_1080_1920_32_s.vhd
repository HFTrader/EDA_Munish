-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIvideo2Mat_32_1080_1920_32_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AXI_video_strm_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    AXI_video_strm_V_data_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_data_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_keep_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_keep_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    AXI_video_strm_V_strb_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_strb_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_user_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_user_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_last_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_last_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_id_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_id_V_read : OUT STD_LOGIC;
    AXI_video_strm_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    AXI_video_strm_V_dest_V_empty_n : IN STD_LOGIC;
    AXI_video_strm_V_dest_V_read : OUT STD_LOGIC;
    img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of AXIvideo2Mat_32_1080_1920_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal p_1_reg_233 : STD_LOGIC_VECTOR (11 downto 0);
    signal eol_1_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_0_2_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_0_status : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal ap_sig_bdd_97 : BOOLEAN;
    signal ap_sig_bdd_107 : BOOLEAN;
    signal i_V_fu_367_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_466 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal brmerge_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_139 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_V_fu_378_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sof_1_load_reg_480 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sof_2_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sof_2_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_4_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal sof_reg_189 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_4_4_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_4_1_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_0_4_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal axi_0_1_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_222 : STD_LOGIC_VECTOR (11 downto 0);
    signal eol_2_phi_fu_295_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_phi_fu_282_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_1_mux_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_3_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_0_update : STD_LOGIC;
    signal sof_1_fu_110 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_265 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_362_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_fu_373_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_362_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_reg_ppiten_pp1_it0;
                elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_362_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_0_1_reg_211 assign process. --
    axi_0_1_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                axi_0_1_reg_211 <= axi_reg_177;
            elsif ((ap_ST_st8_fsm_6 = ap_CS_fsm)) then 
                axi_0_1_reg_211 <= axi_0_4_reg_314;
            end if; 
        end if;
    end process;

    -- axi_0_2_reg_255 assign process. --
    axi_0_2_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_reg_471) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                axi_0_2_reg_255 <= p_Val2_s_phi_fu_282_p4;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_362_p2))) then 
                axi_0_2_reg_255 <= axi_0_1_reg_211;
            end if; 
        end if;
    end process;

    -- axi_0_4_reg_314 assign process. --
    axi_0_4_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_reg_471)))) then 
                axi_0_4_reg_314 <= axi_0_2_reg_255;
            elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_3_reg_326) and not(ap_sig_bdd_97))) then 
                axi_0_4_reg_314 <= AXI_video_strm_V_data_V_dout;
            end if; 
        end if;
    end process;

    -- axi_4_1_reg_200 assign process. --
    axi_4_1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                axi_4_1_reg_200 <= axi_4_reg_165;
            elsif ((ap_ST_st8_fsm_6 = ap_CS_fsm)) then 
                axi_4_1_reg_200 <= axi_4_4_reg_302;
            end if; 
        end if;
    end process;

    -- axi_4_4_reg_302 assign process. --
    axi_4_4_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_reg_471)))) then 
                axi_4_4_reg_302 <= eol_1_reg_244;
            elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_3_reg_326) and not(ap_sig_bdd_97))) then 
                axi_4_4_reg_302 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    -- eol_1_reg_244 assign process. --
    eol_1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_reg_471) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                eol_1_reg_244 <= eol_2_phi_fu_295_p4;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_362_p2))) then 
                eol_1_reg_244 <= axi_4_1_reg_200;
            end if; 
        end if;
    end process;

    -- eol_3_reg_326 assign process. --
    eol_3_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond2_reg_471)))) then 
                eol_3_reg_326 <= eol_reg_266;
            elsif (((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_3_reg_326) and not(ap_sig_bdd_97))) then 
                eol_3_reg_326 <= AXI_video_strm_V_last_V_dout;
            end if; 
        end if;
    end process;

    -- eol_reg_266 assign process. --
    eol_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_reg_471) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                eol_reg_266 <= eol_2_phi_fu_295_p4;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_362_p2))) then 
                eol_reg_266 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- p_1_reg_233 assign process. --
    p_1_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond2_fu_373_p2))) then 
                p_1_reg_233 <= j_V_fu_378_p2;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_362_p2))) then 
                p_1_reg_233 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- p_s_reg_222 assign process. --
    p_s_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                p_s_reg_222 <= ap_const_lv12_0;
            elsif ((ap_ST_st8_fsm_6 = ap_CS_fsm)) then 
                p_s_reg_222 <= i_V_reg_466;
            end if; 
        end if;
    end process;

    -- sof_1_fu_110 assign process. --
    sof_1_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond2_fu_373_p2))) then 
                sof_1_fu_110 <= ap_const_lv1_0;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                sof_1_fu_110 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- sof_reg_189 assign process. --
    sof_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (sof_reg_189 = ap_const_lv1_0) and not(ap_sig_bdd_89))) then 
                sof_reg_189 <= AXI_video_strm_V_user_V_dout;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_107))) then 
                sof_reg_189 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (sof_reg_189 = ap_const_lv1_0) and not(ap_sig_bdd_89))) then
                axi_4_reg_165 <= AXI_video_strm_V_last_V_dout;
                axi_reg_177 <= AXI_video_strm_V_data_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                exitcond2_reg_471 <= exitcond2_fu_373_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                i_V_reg_466 <= i_V_fu_367_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond2_fu_373_p2))) then
                not_sof_2_reg_485 <= not_sof_2_fu_387_p2;
                sof_1_load_reg_480 <= sof_1_fu_110;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_89 , ap_sig_bdd_97 , ap_sig_bdd_107 , ap_reg_ppiten_pp1_it0 , ap_sig_bdd_139 , ap_reg_ppiten_pp1_it1 , exitcond1_fu_362_p2 , sof_reg_189 , eol_3_reg_326)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_107)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((sof_reg_189 = ap_const_lv1_0) and not(ap_sig_bdd_89))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not(ap_sig_bdd_89) and not((sof_reg_189 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_362_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_3_reg_326) and not(ap_sig_bdd_97))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_97) and not((ap_const_lv1_0 = eol_3_reg_326)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    AXI_video_strm_V_0_status <= (AXI_video_strm_V_data_V_empty_n and AXI_video_strm_V_keep_V_empty_n and AXI_video_strm_V_strb_V_empty_n and AXI_video_strm_V_user_V_empty_n and AXI_video_strm_V_last_V_empty_n and AXI_video_strm_V_id_V_empty_n and AXI_video_strm_V_dest_V_empty_n);

    -- AXI_video_strm_V_0_update assign process. --
    AXI_video_strm_V_0_update_assign_proc : process(ap_CS_fsm, ap_sig_bdd_89, ap_sig_bdd_97, exitcond2_reg_471, brmerge_fu_398_p2, ap_sig_bdd_139, ap_reg_ppiten_pp1_it1, sof_reg_189, eol_3_reg_326)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (sof_reg_189 = ap_const_lv1_0) and not(ap_sig_bdd_89)) or ((ap_ST_st7_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = eol_3_reg_326) and not(ap_sig_bdd_97)) or ((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_reg_471) and (ap_const_lv1_0 = brmerge_fu_398_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            AXI_video_strm_V_0_update <= ap_const_logic_1;
        else 
            AXI_video_strm_V_0_update <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_data_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_dest_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_id_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_keep_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_last_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_strb_V_read <= AXI_video_strm_V_0_update;
    AXI_video_strm_V_user_V_read <= AXI_video_strm_V_0_update;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm, exitcond1_fu_362_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_362_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond1_fu_362_p2)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_362_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_107 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_139 assign process. --
    ap_sig_bdd_139_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, AXI_video_strm_V_0_status, exitcond2_reg_471, brmerge_fu_398_p2)
    begin
                ap_sig_bdd_139 <= (((AXI_video_strm_V_0_status = ap_const_logic_0) and (ap_const_lv1_0 = exitcond2_reg_471) and (ap_const_lv1_0 = brmerge_fu_398_p2)) or ((ap_const_lv1_0 = exitcond2_reg_471) and (img_data_stream_0_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond2_reg_471) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond2_reg_471) and (img_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm, exitcond2_reg_471, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_265 <= ((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_reg_471) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(AXI_video_strm_V_0_status, sof_reg_189)
    begin
                ap_sig_bdd_89 <= ((AXI_video_strm_V_0_status = ap_const_logic_0) and (sof_reg_189 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_97 assign process. --
    ap_sig_bdd_97_assign_proc : process(AXI_video_strm_V_0_status, eol_3_reg_326)
    begin
                ap_sig_bdd_97 <= ((AXI_video_strm_V_0_status = ap_const_logic_0) and (ap_const_lv1_0 = eol_3_reg_326));
    end process;

    brmerge_fu_398_p2 <= (sof_1_load_reg_480 or eol_reg_266);
    eol_1_mux_fu_403_p2 <= (eol_1_reg_244 or not_sof_2_reg_485);

    -- eol_2_phi_fu_295_p4 assign process. --
    eol_2_phi_fu_295_p4_assign_proc : process(AXI_video_strm_V_last_V_dout, brmerge_fu_398_p2, eol_1_mux_fu_403_p2, ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then
            if (not((ap_const_lv1_0 = brmerge_fu_398_p2))) then 
                eol_2_phi_fu_295_p4 <= eol_1_mux_fu_403_p2;
            elsif ((ap_const_lv1_0 = brmerge_fu_398_p2)) then 
                eol_2_phi_fu_295_p4 <= AXI_video_strm_V_last_V_dout;
            else 
                eol_2_phi_fu_295_p4 <= ap_const_lv1_1;
            end if;
        else 
            eol_2_phi_fu_295_p4 <= ap_const_lv1_1;
        end if; 
    end process;

    exitcond1_fu_362_p2 <= "1" when (p_s_reg_222 = img_rows_V_read) else "0";
    exitcond2_fu_373_p2 <= "1" when (p_1_reg_233 = img_cols_V_read) else "0";
    i_V_fu_367_p2 <= std_logic_vector(unsigned(p_s_reg_222) + unsigned(ap_const_lv12_1));
    img_data_stream_0_V_din <= p_Val2_s_phi_fu_282_p4(8 - 1 downto 0);

    -- img_data_stream_0_V_write assign process. --
    img_data_stream_0_V_write_assign_proc : process(ap_CS_fsm, exitcond2_reg_471, ap_sig_bdd_139, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_reg_471) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            img_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_1_V_din <= p_Val2_s_phi_fu_282_p4(15 downto 8);

    -- img_data_stream_1_V_write assign process. --
    img_data_stream_1_V_write_assign_proc : process(ap_CS_fsm, exitcond2_reg_471, ap_sig_bdd_139, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_reg_471) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            img_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_2_V_din <= p_Val2_s_phi_fu_282_p4(23 downto 16);

    -- img_data_stream_2_V_write assign process. --
    img_data_stream_2_V_write_assign_proc : process(ap_CS_fsm, exitcond2_reg_471, ap_sig_bdd_139, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_reg_471) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_139 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            img_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_378_p2 <= std_logic_vector(unsigned(p_1_reg_233) + unsigned(ap_const_lv12_1));
    not_sof_2_fu_387_p2 <= (sof_1_fu_110 xor ap_const_lv1_1);

    -- p_Val2_s_phi_fu_282_p4 assign process. --
    p_Val2_s_phi_fu_282_p4_assign_proc : process(AXI_video_strm_V_data_V_dout, axi_0_2_reg_255, brmerge_fu_398_p2, ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then
            if (not((ap_const_lv1_0 = brmerge_fu_398_p2))) then 
                p_Val2_s_phi_fu_282_p4 <= axi_0_2_reg_255;
            elsif ((ap_const_lv1_0 = brmerge_fu_398_p2)) then 
                p_Val2_s_phi_fu_282_p4 <= AXI_video_strm_V_data_V_dout;
            else 
                p_Val2_s_phi_fu_282_p4 <= ap_const_lv32_1;
            end if;
        else 
            p_Val2_s_phi_fu_282_p4 <= ap_const_lv32_1;
        end if; 
    end process;

end behav;
