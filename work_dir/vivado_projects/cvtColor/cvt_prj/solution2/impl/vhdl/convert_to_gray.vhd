-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.1
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convert_to_gray is
port (
    input_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    input_V_data_V_empty_n : IN STD_LOGIC;
    input_V_data_V_read : OUT STD_LOGIC;
    input_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    input_V_keep_V_empty_n : IN STD_LOGIC;
    input_V_keep_V_read : OUT STD_LOGIC;
    input_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    input_V_strb_V_empty_n : IN STD_LOGIC;
    input_V_strb_V_read : OUT STD_LOGIC;
    input_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_user_V_empty_n : IN STD_LOGIC;
    input_V_user_V_read : OUT STD_LOGIC;
    input_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_last_V_empty_n : IN STD_LOGIC;
    input_V_last_V_read : OUT STD_LOGIC;
    input_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_id_V_empty_n : IN STD_LOGIC;
    input_V_id_V_read : OUT STD_LOGIC;
    input_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    input_V_dest_V_empty_n : IN STD_LOGIC;
    input_V_dest_V_read : OUT STD_LOGIC;
    output_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_V_data_V_full_n : IN STD_LOGIC;
    output_V_data_V_write : OUT STD_LOGIC;
    output_V_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_keep_V_full_n : IN STD_LOGIC;
    output_V_keep_V_write : OUT STD_LOGIC;
    output_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_strb_V_full_n : IN STD_LOGIC;
    output_V_strb_V_write : OUT STD_LOGIC;
    output_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_user_V_full_n : IN STD_LOGIC;
    output_V_user_V_write : OUT STD_LOGIC;
    output_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_last_V_full_n : IN STD_LOGIC;
    output_V_last_V_write : OUT STD_LOGIC;
    output_V_id_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_id_V_full_n : IN STD_LOGIC;
    output_V_id_V_write : OUT STD_LOGIC;
    output_V_dest_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_V_dest_V_full_n : IN STD_LOGIC;
    output_V_dest_V_write : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of convert_to_gray is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convert_to_gray,hls_ip_2013_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.210000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=650,HLS_SYN_LUT=849}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;

    signal init_U0_ap_start : STD_LOGIC;
    signal init_U0_ap_done : STD_LOGIC;
    signal init_U0_ap_continue : STD_LOGIC;
    signal init_U0_ap_idle : STD_LOGIC;
    signal init_U0_ap_ready : STD_LOGIC;
    signal init_U0_p_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal init_U0_p_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal init_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_U0_ap_return_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_U0_ap_return_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_init_U0_img_0_rows_V : STD_LOGIC;
    signal img_0_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_img_0_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_0_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_U0_img_0_rows_V_channel : STD_LOGIC;
    signal img_0_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_0_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_0_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_init_U0_img_0_cols_V : STD_LOGIC;
    signal img_0_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_img_0_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_0_cols_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_U0_img_0_cols_V_channel : STD_LOGIC;
    signal img_0_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_img_0_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_0_cols_V_channel_full_n : STD_LOGIC;
    signal init_1_U0_ap_start : STD_LOGIC;
    signal init_1_U0_ap_done : STD_LOGIC;
    signal init_1_U0_ap_continue : STD_LOGIC;
    signal init_1_U0_ap_idle : STD_LOGIC;
    signal init_1_U0_ap_ready : STD_LOGIC;
    signal init_1_U0_p_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal init_1_U0_p_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal init_1_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal init_1_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_init_1_U0_img_1_rows_V : STD_LOGIC;
    signal img_1_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_img_1_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_1_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_init_1_U0_img_1_cols_V : STD_LOGIC;
    signal img_1_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_img_1_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_img_1_cols_V_full_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n : STD_LOGIC;
    signal AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_ap_start : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_ap_done : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_ap_continue : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_ap_idle : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_ap_ready : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal CvtColor_0_16_16_1080_1920_U0_p_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_1_V_empty_n : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_2_V_empty_n : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_0_V_full_n : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_1_V_full_n : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_2_V_full_n : STD_LOGIC;
    signal CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n : STD_LOGIC;
    signal Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal img_0_rows_V_ap_dummy_ce : STD_LOGIC;
    signal img_0_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_write : STD_LOGIC;
    signal img_0_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_empty_n : STD_LOGIC;
    signal img_0_rows_V_read : STD_LOGIC;
    signal img_0_rows_V_channel_ap_dummy_ce : STD_LOGIC;
    signal img_0_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_write : STD_LOGIC;
    signal img_0_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel_read : STD_LOGIC;
    signal img_0_cols_V_ap_dummy_ce : STD_LOGIC;
    signal img_0_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_write : STD_LOGIC;
    signal img_0_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_empty_n : STD_LOGIC;
    signal img_0_cols_V_read : STD_LOGIC;
    signal img_0_cols_V_channel_ap_dummy_ce : STD_LOGIC;
    signal img_0_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_write : STD_LOGIC;
    signal img_0_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel_read : STD_LOGIC;
    signal img_1_rows_V_ap_dummy_ce : STD_LOGIC;
    signal img_1_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_1_rows_V_write : STD_LOGIC;
    signal img_1_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_1_rows_V_empty_n : STD_LOGIC;
    signal img_1_rows_V_read : STD_LOGIC;
    signal img_1_cols_V_ap_dummy_ce : STD_LOGIC;
    signal img_1_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_1_cols_V_write : STD_LOGIC;
    signal img_1_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_1_cols_V_empty_n : STD_LOGIC;
    signal img_1_cols_V_read : STD_LOGIC;
    signal img_0_data_stream_0_V_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_full_n : STD_LOGIC;
    signal img_0_data_stream_0_V_write : STD_LOGIC;
    signal img_0_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_V_read : STD_LOGIC;
    signal img_0_data_stream_1_V_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_V_full_n : STD_LOGIC;
    signal img_0_data_stream_1_V_write : STD_LOGIC;
    signal img_0_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_V_read : STD_LOGIC;
    signal img_0_data_stream_2_V_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_V_full_n : STD_LOGIC;
    signal img_0_data_stream_2_V_write : STD_LOGIC;
    signal img_0_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_V_read : STD_LOGIC;
    signal img_1_data_stream_0_V_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_write : STD_LOGIC;
    signal img_1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_read : STD_LOGIC;
    signal img_1_data_stream_1_V_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_V_full_n : STD_LOGIC;
    signal img_1_data_stream_1_V_write : STD_LOGIC;
    signal img_1_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_V_read : STD_LOGIC;
    signal img_1_data_stream_2_V_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_V_full_n : STD_LOGIC;
    signal img_1_data_stream_2_V_write : STD_LOGIC;
    signal img_1_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_2_V_read : STD_LOGIC;
    signal ap_reg_procdone_init_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_init_1_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_CvtColor_0_16_16_1080_1920_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_init_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_init_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_init_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_init_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_init_1_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_init_1_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start : STD_LOGIC;

    component init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component init_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_rows : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component AXIvideo2Mat_32_1080_1920_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AXI_video_strm_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        AXI_video_strm_V_data_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_data_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_keep_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_keep_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_keep_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_strb_V_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_strb_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_strb_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_user_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_user_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_user_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_last_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_last_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_id_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_id_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_id_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_dest_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_dest_V_empty_n : IN STD_LOGIC;
        AXI_video_strm_V_dest_V_read : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component CvtColor_0_16_16_1080_1920_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo_32_1080_1920_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        AXI_video_strm_V_data_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        AXI_video_strm_V_data_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_data_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_keep_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_keep_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_keep_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_strb_V_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        AXI_video_strm_V_strb_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_strb_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_user_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_user_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_user_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_last_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_last_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_id_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_id_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_id_V_write : OUT STD_LOGIC;
        AXI_video_strm_V_dest_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        AXI_video_strm_V_dest_V_full_n : IN STD_LOGIC;
        AXI_video_strm_V_dest_V_write : OUT STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_0_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_0_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_0_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_0_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_1_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_1_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_0_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_0_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_1_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_convert_to_gray_img_1_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    init_U0 : component init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_U0_ap_start,
        ap_done => init_U0_ap_done,
        ap_continue => init_U0_ap_continue,
        ap_idle => init_U0_ap_idle,
        ap_ready => init_U0_ap_ready,
        p_rows => init_U0_p_rows,
        p_cols => init_U0_p_cols,
        ap_return_0 => init_U0_ap_return_0,
        ap_return_1 => init_U0_ap_return_1,
        ap_return_2 => init_U0_ap_return_2,
        ap_return_3 => init_U0_ap_return_3);

    init_1_U0 : component init_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_1_U0_ap_start,
        ap_done => init_1_U0_ap_done,
        ap_continue => init_1_U0_ap_continue,
        ap_idle => init_1_U0_ap_idle,
        ap_ready => init_1_U0_ap_ready,
        p_rows => init_1_U0_p_rows,
        p_cols => init_1_U0_p_cols,
        ap_return_0 => init_1_U0_ap_return_0,
        ap_return_1 => init_1_U0_ap_return_1);

    AXIvideo2Mat_32_1080_1920_16_U0 : component AXIvideo2Mat_32_1080_1920_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AXIvideo2Mat_32_1080_1920_16_U0_ap_start,
        ap_done => AXIvideo2Mat_32_1080_1920_16_U0_ap_done,
        ap_continue => AXIvideo2Mat_32_1080_1920_16_U0_ap_continue,
        ap_idle => AXIvideo2Mat_32_1080_1920_16_U0_ap_idle,
        ap_ready => AXIvideo2Mat_32_1080_1920_16_U0_ap_ready,
        AXI_video_strm_V_data_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout,
        AXI_video_strm_V_data_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n,
        AXI_video_strm_V_data_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read,
        AXI_video_strm_V_keep_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout,
        AXI_video_strm_V_keep_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n,
        AXI_video_strm_V_keep_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read,
        AXI_video_strm_V_strb_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout,
        AXI_video_strm_V_strb_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n,
        AXI_video_strm_V_strb_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read,
        AXI_video_strm_V_user_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout,
        AXI_video_strm_V_user_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n,
        AXI_video_strm_V_user_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read,
        AXI_video_strm_V_last_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout,
        AXI_video_strm_V_last_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n,
        AXI_video_strm_V_last_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read,
        AXI_video_strm_V_id_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout,
        AXI_video_strm_V_id_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n,
        AXI_video_strm_V_id_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read,
        AXI_video_strm_V_dest_V_dout => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout,
        AXI_video_strm_V_dest_V_empty_n => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n,
        AXI_video_strm_V_dest_V_read => AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read,
        img_rows_V_read => AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read,
        img_cols_V_read => AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read,
        img_data_stream_0_V_din => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write);

    CvtColor_0_16_16_1080_1920_U0 : component CvtColor_0_16_16_1080_1920_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => CvtColor_0_16_16_1080_1920_U0_ap_start,
        ap_done => CvtColor_0_16_16_1080_1920_U0_ap_done,
        ap_continue => CvtColor_0_16_16_1080_1920_U0_ap_continue,
        ap_idle => CvtColor_0_16_16_1080_1920_U0_ap_idle,
        ap_ready => CvtColor_0_16_16_1080_1920_U0_ap_ready,
        p_src_rows_V_read => CvtColor_0_16_16_1080_1920_U0_p_src_rows_V_read,
        p_src_cols_V_read => CvtColor_0_16_16_1080_1920_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n => CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read => CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n => CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read => CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n => CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read => CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write => CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write => CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_2_V_full_n,
        p_dst_data_stream_2_V_write => CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_2_V_write);

    Mat2AXIvideo_32_1080_1920_16_U0 : component Mat2AXIvideo_32_1080_1920_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Mat2AXIvideo_32_1080_1920_16_U0_ap_start,
        ap_done => Mat2AXIvideo_32_1080_1920_16_U0_ap_done,
        ap_continue => Mat2AXIvideo_32_1080_1920_16_U0_ap_continue,
        ap_idle => Mat2AXIvideo_32_1080_1920_16_U0_ap_idle,
        ap_ready => Mat2AXIvideo_32_1080_1920_16_U0_ap_ready,
        img_rows_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read,
        img_cols_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read,
        img_data_stream_0_V_dout => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read,
        AXI_video_strm_V_data_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din,
        AXI_video_strm_V_data_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n,
        AXI_video_strm_V_data_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write,
        AXI_video_strm_V_keep_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din,
        AXI_video_strm_V_keep_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n,
        AXI_video_strm_V_keep_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write,
        AXI_video_strm_V_strb_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din,
        AXI_video_strm_V_strb_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n,
        AXI_video_strm_V_strb_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write,
        AXI_video_strm_V_user_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din,
        AXI_video_strm_V_user_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n,
        AXI_video_strm_V_user_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write,
        AXI_video_strm_V_last_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din,
        AXI_video_strm_V_last_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n,
        AXI_video_strm_V_last_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write,
        AXI_video_strm_V_id_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din,
        AXI_video_strm_V_id_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n,
        AXI_video_strm_V_id_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write,
        AXI_video_strm_V_dest_V_din => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din,
        AXI_video_strm_V_dest_V_full_n => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n,
        AXI_video_strm_V_dest_V_write => Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write);

    img_0_rows_V : component FIFO_convert_to_gray_img_0_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_0_rows_V_ap_dummy_ce,
        if_write_ce => img_0_rows_V_ap_dummy_ce,
        if_din => img_0_rows_V_din,
        if_full_n => img_0_rows_V_full_n,
        if_write => img_0_rows_V_write,
        if_dout => img_0_rows_V_dout,
        if_empty_n => img_0_rows_V_empty_n,
        if_read => img_0_rows_V_read);

    img_0_rows_V_channel : component FIFO_convert_to_gray_img_0_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_0_rows_V_channel_ap_dummy_ce,
        if_write_ce => img_0_rows_V_channel_ap_dummy_ce,
        if_din => img_0_rows_V_channel_din,
        if_full_n => img_0_rows_V_channel_full_n,
        if_write => img_0_rows_V_channel_write,
        if_dout => img_0_rows_V_channel_dout,
        if_empty_n => img_0_rows_V_channel_empty_n,
        if_read => img_0_rows_V_channel_read);

    img_0_cols_V : component FIFO_convert_to_gray_img_0_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_0_cols_V_ap_dummy_ce,
        if_write_ce => img_0_cols_V_ap_dummy_ce,
        if_din => img_0_cols_V_din,
        if_full_n => img_0_cols_V_full_n,
        if_write => img_0_cols_V_write,
        if_dout => img_0_cols_V_dout,
        if_empty_n => img_0_cols_V_empty_n,
        if_read => img_0_cols_V_read);

    img_0_cols_V_channel : component FIFO_convert_to_gray_img_0_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_0_cols_V_channel_ap_dummy_ce,
        if_write_ce => img_0_cols_V_channel_ap_dummy_ce,
        if_din => img_0_cols_V_channel_din,
        if_full_n => img_0_cols_V_channel_full_n,
        if_write => img_0_cols_V_channel_write,
        if_dout => img_0_cols_V_channel_dout,
        if_empty_n => img_0_cols_V_channel_empty_n,
        if_read => img_0_cols_V_channel_read);

    img_1_rows_V : component FIFO_convert_to_gray_img_1_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_1_rows_V_ap_dummy_ce,
        if_write_ce => img_1_rows_V_ap_dummy_ce,
        if_din => img_1_rows_V_din,
        if_full_n => img_1_rows_V_full_n,
        if_write => img_1_rows_V_write,
        if_dout => img_1_rows_V_dout,
        if_empty_n => img_1_rows_V_empty_n,
        if_read => img_1_rows_V_read);

    img_1_cols_V : component FIFO_convert_to_gray_img_1_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_1_cols_V_ap_dummy_ce,
        if_write_ce => img_1_cols_V_ap_dummy_ce,
        if_din => img_1_cols_V_din,
        if_full_n => img_1_cols_V_full_n,
        if_write => img_1_cols_V_write,
        if_dout => img_1_cols_V_dout,
        if_empty_n => img_1_cols_V_empty_n,
        if_read => img_1_cols_V_read);

    img_0_data_stream_0_V : component FIFO_convert_to_gray_img_0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_0_data_stream_0_V_ap_dummy_ce,
        if_write_ce => img_0_data_stream_0_V_ap_dummy_ce,
        if_din => img_0_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_V_full_n,
        if_write => img_0_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_V_dout,
        if_empty_n => img_0_data_stream_0_V_empty_n,
        if_read => img_0_data_stream_0_V_read);

    img_0_data_stream_1_V : component FIFO_convert_to_gray_img_0_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_0_data_stream_1_V_ap_dummy_ce,
        if_write_ce => img_0_data_stream_1_V_ap_dummy_ce,
        if_din => img_0_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_V_full_n,
        if_write => img_0_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_V_dout,
        if_empty_n => img_0_data_stream_1_V_empty_n,
        if_read => img_0_data_stream_1_V_read);

    img_0_data_stream_2_V : component FIFO_convert_to_gray_img_0_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_0_data_stream_2_V_ap_dummy_ce,
        if_write_ce => img_0_data_stream_2_V_ap_dummy_ce,
        if_din => img_0_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_V_full_n,
        if_write => img_0_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_V_dout,
        if_empty_n => img_0_data_stream_2_V_empty_n,
        if_read => img_0_data_stream_2_V_read);

    img_1_data_stream_0_V : component FIFO_convert_to_gray_img_1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_1_data_stream_0_V_ap_dummy_ce,
        if_write_ce => img_1_data_stream_0_V_ap_dummy_ce,
        if_din => img_1_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_V_full_n,
        if_write => img_1_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_dout,
        if_empty_n => img_1_data_stream_0_V_empty_n,
        if_read => img_1_data_stream_0_V_read);

    img_1_data_stream_1_V : component FIFO_convert_to_gray_img_1_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_1_data_stream_1_V_ap_dummy_ce,
        if_write_ce => img_1_data_stream_1_V_ap_dummy_ce,
        if_din => img_1_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_V_full_n,
        if_write => img_1_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_V_dout,
        if_empty_n => img_1_data_stream_1_V_empty_n,
        if_read => img_1_data_stream_1_V_read);

    img_1_data_stream_2_V : component FIFO_convert_to_gray_img_1_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => img_1_data_stream_2_V_ap_dummy_ce,
        if_write_ce => img_1_data_stream_2_V_ap_dummy_ce,
        if_din => img_1_data_stream_2_V_din,
        if_full_n => img_1_data_stream_2_V_full_n,
        if_write => img_1_data_stream_2_V_write,
        if_dout => img_1_data_stream_2_V_dout,
        if_empty_n => img_1_data_stream_2_V_empty_n,
        if_read => img_1_data_stream_2_V_read);




    -- ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 assign process. --
    ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = AXIvideo2Mat_32_1080_1920_16_U0_ap_done)) then 
                    ap_reg_procdone_AXIvideo2Mat_32_1080_1920_16_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_CvtColor_0_16_16_1080_1920_U0 assign process. --
    ap_reg_procdone_CvtColor_0_16_16_1080_1920_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_CvtColor_0_16_16_1080_1920_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_CvtColor_0_16_16_1080_1920_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = CvtColor_0_16_16_1080_1920_U0_ap_done)) then 
                    ap_reg_procdone_CvtColor_0_16_16_1080_1920_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 assign process. --
    ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = Mat2AXIvideo_32_1080_1920_16_U0_ap_done)) then 
                    ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_init_1_U0 assign process. --
    ap_reg_procdone_init_1_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_init_1_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_init_1_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_1_U0_ap_done)) then 
                    ap_reg_procdone_init_1_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_init_U0 assign process. --
    ap_reg_procdone_init_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_procdone_init_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_init_U0 <= ap_const_logic_0;
                elsif ((init_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_init_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready assign process. --
    ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)) then 
                    ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_0_cols_V_channel_full_n assign process. --
    ap_reg_ready_img_0_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_img_0_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((init_U0_ap_done = ap_const_logic_1) and (init_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_img_0_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((init_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = img_0_cols_V_channel_full_n))) then 
                    ap_reg_ready_img_0_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_0_cols_V_full_n assign process. --
    ap_reg_ready_img_0_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_img_0_cols_V_full_n <= ap_const_logic_0;
            else
                if (((init_U0_ap_done = ap_const_logic_1) and (init_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_img_0_cols_V_full_n <= ap_const_logic_0;
                elsif (((init_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = img_0_cols_V_full_n))) then 
                    ap_reg_ready_img_0_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_0_rows_V_channel_full_n assign process. --
    ap_reg_ready_img_0_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_img_0_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((init_U0_ap_done = ap_const_logic_1) and (init_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_img_0_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((init_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = img_0_rows_V_channel_full_n))) then 
                    ap_reg_ready_img_0_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_0_rows_V_full_n assign process. --
    ap_reg_ready_img_0_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_img_0_rows_V_full_n <= ap_const_logic_0;
            else
                if (((init_U0_ap_done = ap_const_logic_1) and (init_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_img_0_rows_V_full_n <= ap_const_logic_0;
                elsif (((init_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = img_0_rows_V_full_n))) then 
                    ap_reg_ready_img_0_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_1_cols_V_full_n assign process. --
    ap_reg_ready_img_1_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_img_1_cols_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_1_U0_ap_done) and (ap_const_logic_1 = init_1_U0_ap_continue))) then 
                    ap_reg_ready_img_1_cols_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_1_U0_ap_done) and (ap_const_logic_1 = img_1_cols_V_full_n))) then 
                    ap_reg_ready_img_1_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_img_1_rows_V_full_n assign process. --
    ap_reg_ready_img_1_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_img_1_rows_V_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = init_1_U0_ap_done) and (ap_const_logic_1 = init_1_U0_ap_continue))) then 
                    ap_reg_ready_img_1_rows_V_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = init_1_U0_ap_done) and (ap_const_logic_1 = img_1_rows_V_full_n))) then 
                    ap_reg_ready_img_1_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_init_1_U0_ap_ready assign process. --
    ap_reg_ready_init_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = init_1_U0_ap_ready)) then 
                    ap_reg_ready_init_1_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_init_U0_ap_ready assign process. --
    ap_reg_ready_init_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ready_init_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_init_U0_ap_ready <= ap_const_logic_0;
                elsif ((init_U0_ap_ready = ap_const_logic_1)) then 
                    ap_reg_ready_init_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_dout <= input_V_data_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_empty_n <= input_V_data_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_dout <= input_V_dest_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_empty_n <= input_V_dest_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_dout <= input_V_id_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_empty_n <= input_V_id_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_dout <= input_V_keep_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_empty_n <= input_V_keep_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_dout <= input_V_last_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_empty_n <= input_V_last_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_dout <= input_V_strb_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_empty_n <= input_V_strb_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_dout <= input_V_user_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_empty_n <= input_V_user_V_empty_n;
    AXIvideo2Mat_32_1080_1920_16_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_32_1080_1920_16_U0_ap_start <= (img_0_rows_V_empty_n and img_0_cols_V_empty_n and ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start);
    AXIvideo2Mat_32_1080_1920_16_U0_img_cols_V_read <= img_0_cols_V_dout;
    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_full_n <= img_0_data_stream_0_V_full_n;
    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_full_n <= img_0_data_stream_1_V_full_n;
    AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_full_n <= img_0_data_stream_2_V_full_n;
    AXIvideo2Mat_32_1080_1920_16_U0_img_rows_V_read <= img_0_rows_V_dout;
    CvtColor_0_16_16_1080_1920_U0_ap_continue <= ap_const_logic_1;
    CvtColor_0_16_16_1080_1920_U0_ap_start <= (img_0_rows_V_channel_empty_n and img_0_cols_V_channel_empty_n);
    CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_0_V_full_n <= img_1_data_stream_0_V_full_n;
    CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_1_V_full_n <= img_1_data_stream_1_V_full_n;
    CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_2_V_full_n <= img_1_data_stream_2_V_full_n;
    CvtColor_0_16_16_1080_1920_U0_p_src_cols_V_read <= img_0_cols_V_channel_dout;
    CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_0_V_dout <= img_0_data_stream_0_V_dout;
    CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_0_V_empty_n <= img_0_data_stream_0_V_empty_n;
    CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_1_V_dout <= img_0_data_stream_1_V_dout;
    CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_1_V_empty_n <= img_0_data_stream_1_V_empty_n;
    CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_2_V_dout <= img_0_data_stream_2_V_dout;
    CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_2_V_empty_n <= img_0_data_stream_2_V_empty_n;
    CvtColor_0_16_16_1080_1920_U0_p_src_rows_V_read <= img_0_rows_V_channel_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_full_n <= output_V_data_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_full_n <= output_V_dest_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_full_n <= output_V_id_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_full_n <= output_V_keep_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_full_n <= output_V_last_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_full_n <= output_V_strb_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_full_n <= output_V_user_V_full_n;
    Mat2AXIvideo_32_1080_1920_16_U0_ap_continue <= ap_sig_hs_continue;
    Mat2AXIvideo_32_1080_1920_16_U0_ap_start <= (img_1_rows_V_empty_n and img_1_cols_V_empty_n);
    Mat2AXIvideo_32_1080_1920_16_U0_img_cols_V_read <= img_1_cols_V_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_dout <= img_1_data_stream_0_V_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_empty_n <= img_1_data_stream_0_V_empty_n;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_dout <= img_1_data_stream_1_V_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_empty_n <= img_1_data_stream_1_V_empty_n;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_dout <= img_1_data_stream_2_V_dout;
    Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_empty_n <= img_1_data_stream_2_V_empty_n;
    Mat2AXIvideo_32_1080_1920_16_U0_img_rows_V_read <= img_1_rows_V_dout;

    -- ap_chn_write_init_1_U0_img_1_cols_V assign process. --
    ap_chn_write_init_1_U0_img_1_cols_V_assign_proc : process(init_1_U0_ap_done, ap_reg_ready_img_1_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_1_cols_V_full_n)) then 
            ap_chn_write_init_1_U0_img_1_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_1_U0_img_1_cols_V <= init_1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_1_U0_img_1_rows_V assign process. --
    ap_chn_write_init_1_U0_img_1_rows_V_assign_proc : process(init_1_U0_ap_done, ap_reg_ready_img_1_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_1_rows_V_full_n)) then 
            ap_chn_write_init_1_U0_img_1_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_1_U0_img_1_rows_V <= init_1_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_U0_img_0_cols_V assign process. --
    ap_chn_write_init_U0_img_0_cols_V_assign_proc : process(init_U0_ap_done, ap_reg_ready_img_0_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_0_cols_V_full_n)) then 
            ap_chn_write_init_U0_img_0_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_U0_img_0_cols_V <= init_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_U0_img_0_cols_V_channel assign process. --
    ap_chn_write_init_U0_img_0_cols_V_channel_assign_proc : process(init_U0_ap_done, ap_reg_ready_img_0_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_0_cols_V_channel_full_n)) then 
            ap_chn_write_init_U0_img_0_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_init_U0_img_0_cols_V_channel <= init_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_U0_img_0_rows_V assign process. --
    ap_chn_write_init_U0_img_0_rows_V_assign_proc : process(init_U0_ap_done, ap_reg_ready_img_0_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_0_rows_V_full_n)) then 
            ap_chn_write_init_U0_img_0_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_init_U0_img_0_rows_V <= init_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_init_U0_img_0_rows_V_channel assign process. --
    ap_chn_write_init_U0_img_0_rows_V_channel_assign_proc : process(init_U0_ap_done, ap_reg_ready_img_0_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_img_0_rows_V_channel_full_n)) then 
            ap_chn_write_init_U0_img_0_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_init_U0_img_0_rows_V_channel <= init_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(init_U0_ap_idle, init_1_U0_ap_idle, AXIvideo2Mat_32_1080_1920_16_U0_ap_idle, CvtColor_0_16_16_1080_1920_U0_ap_idle, Mat2AXIvideo_32_1080_1920_16_U0_ap_idle, img_0_rows_V_empty_n, img_0_rows_V_channel_empty_n, img_0_cols_V_empty_n, img_0_cols_V_channel_empty_n, img_1_rows_V_empty_n, img_1_cols_V_empty_n)
    begin
        if (((init_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = init_1_U0_ap_idle) and (ap_const_logic_1 = AXIvideo2Mat_32_1080_1920_16_U0_ap_idle) and (ap_const_logic_1 = CvtColor_0_16_16_1080_1920_U0_ap_idle) and (ap_const_logic_1 = Mat2AXIvideo_32_1080_1920_16_U0_ap_idle) and (ap_const_logic_0 = img_0_rows_V_empty_n) and (ap_const_logic_0 = img_0_rows_V_channel_empty_n) and (ap_const_logic_0 = img_0_cols_V_empty_n) and (ap_const_logic_0 = img_0_cols_V_channel_empty_n) and (ap_const_logic_0 = img_1_rows_V_empty_n) and (ap_const_logic_0 = img_1_cols_V_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;
    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(Mat2AXIvideo_32_1080_1920_16_U0_ap_done, ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0)
    begin
        if (((ap_const_logic_1 = Mat2AXIvideo_32_1080_1920_16_U0_ap_done) or (ap_const_logic_1 = ap_reg_procdone_Mat2AXIvideo_32_1080_1920_16_U0))) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready assign process. --
    ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready_assign_proc : process(AXIvideo2Mat_32_1080_1920_16_U0_ap_ready, ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)) then 
            ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
        else 
            ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_0_cols_V_channel_full_n assign process. --
    ap_sig_ready_img_0_cols_V_channel_full_n_assign_proc : process(img_0_cols_V_channel_full_n, ap_reg_ready_img_0_cols_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_0_cols_V_channel_full_n)) then 
            ap_sig_ready_img_0_cols_V_channel_full_n <= img_0_cols_V_channel_full_n;
        else 
            ap_sig_ready_img_0_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_0_cols_V_full_n assign process. --
    ap_sig_ready_img_0_cols_V_full_n_assign_proc : process(img_0_cols_V_full_n, ap_reg_ready_img_0_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_0_cols_V_full_n)) then 
            ap_sig_ready_img_0_cols_V_full_n <= img_0_cols_V_full_n;
        else 
            ap_sig_ready_img_0_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_0_rows_V_channel_full_n assign process. --
    ap_sig_ready_img_0_rows_V_channel_full_n_assign_proc : process(img_0_rows_V_channel_full_n, ap_reg_ready_img_0_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_0_rows_V_channel_full_n)) then 
            ap_sig_ready_img_0_rows_V_channel_full_n <= img_0_rows_V_channel_full_n;
        else 
            ap_sig_ready_img_0_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_0_rows_V_full_n assign process. --
    ap_sig_ready_img_0_rows_V_full_n_assign_proc : process(img_0_rows_V_full_n, ap_reg_ready_img_0_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_0_rows_V_full_n)) then 
            ap_sig_ready_img_0_rows_V_full_n <= img_0_rows_V_full_n;
        else 
            ap_sig_ready_img_0_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_1_cols_V_full_n assign process. --
    ap_sig_ready_img_1_cols_V_full_n_assign_proc : process(img_1_cols_V_full_n, ap_reg_ready_img_1_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_1_cols_V_full_n)) then 
            ap_sig_ready_img_1_cols_V_full_n <= img_1_cols_V_full_n;
        else 
            ap_sig_ready_img_1_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_img_1_rows_V_full_n assign process. --
    ap_sig_ready_img_1_rows_V_full_n_assign_proc : process(img_1_rows_V_full_n, ap_reg_ready_img_1_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_img_1_rows_V_full_n)) then 
            ap_sig_ready_img_1_rows_V_full_n <= img_1_rows_V_full_n;
        else 
            ap_sig_ready_img_1_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_init_1_U0_ap_ready assign process. --
    ap_sig_ready_init_1_U0_ap_ready_assign_proc : process(init_1_U0_ap_ready, ap_reg_ready_init_1_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_init_1_U0_ap_ready)) then 
            ap_sig_ready_init_1_U0_ap_ready <= init_1_U0_ap_ready;
        else 
            ap_sig_ready_init_1_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_init_U0_ap_ready assign process. --
    ap_sig_ready_init_U0_ap_ready_assign_proc : process(init_U0_ap_ready, ap_reg_ready_init_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_init_U0_ap_ready)) then 
            ap_sig_ready_init_U0_ap_ready <= init_U0_ap_ready;
        else 
            ap_sig_ready_init_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start assign process. --
    ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready))) then 
            ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_AXIvideo2Mat_32_1080_1920_16_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_init_1_U0_ap_start assign process. --
    ap_sig_start_in_init_1_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_init_1_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_init_1_U0_ap_ready))) then 
            ap_sig_start_in_init_1_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_init_1_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_init_U0_ap_start assign process. --
    ap_sig_start_in_init_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_init_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_init_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_init_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_init_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_init_U0_ap_ready, ap_sig_ready_init_1_U0_ap_ready, ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_init_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_init_1_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_AXIvideo2Mat_32_1080_1920_16_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

    img_0_cols_V_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel_din <= init_U0_ap_return_3;
    img_0_cols_V_channel_read <= CvtColor_0_16_16_1080_1920_U0_ap_ready;
    img_0_cols_V_channel_write <= ap_chn_write_init_U0_img_0_cols_V_channel;
    img_0_cols_V_din <= init_U0_ap_return_2;
    img_0_cols_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
    img_0_cols_V_write <= ap_chn_write_init_U0_img_0_cols_V;
    img_0_data_stream_0_V_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_0_V_din <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_din;
    img_0_data_stream_0_V_read <= CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_0_V_read;
    img_0_data_stream_0_V_write <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_0_V_write;
    img_0_data_stream_1_V_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_1_V_din <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_din;
    img_0_data_stream_1_V_read <= CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_1_V_read;
    img_0_data_stream_1_V_write <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_1_V_write;
    img_0_data_stream_2_V_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_2_V_din <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_din;
    img_0_data_stream_2_V_read <= CvtColor_0_16_16_1080_1920_U0_p_src_data_stream_2_V_read;
    img_0_data_stream_2_V_write <= AXIvideo2Mat_32_1080_1920_16_U0_img_data_stream_2_V_write;
    img_0_rows_V_ap_dummy_ce <= ap_const_logic_1;
    img_0_rows_V_channel_ap_dummy_ce <= ap_const_logic_1;
    img_0_rows_V_channel_din <= init_U0_ap_return_1;
    img_0_rows_V_channel_read <= CvtColor_0_16_16_1080_1920_U0_ap_ready;
    img_0_rows_V_channel_write <= ap_chn_write_init_U0_img_0_rows_V_channel;
    img_0_rows_V_din <= init_U0_ap_return_0;
    img_0_rows_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_ap_ready;
    img_0_rows_V_write <= ap_chn_write_init_U0_img_0_rows_V;
    img_1_cols_V_ap_dummy_ce <= ap_const_logic_1;
    img_1_cols_V_din <= init_1_U0_ap_return_1;
    img_1_cols_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
    img_1_cols_V_write <= ap_chn_write_init_1_U0_img_1_cols_V;
    img_1_data_stream_0_V_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_0_V_din <= CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_0_V_din;
    img_1_data_stream_0_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_0_V_read;
    img_1_data_stream_0_V_write <= CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_0_V_write;
    img_1_data_stream_1_V_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_1_V_din <= CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_1_V_din;
    img_1_data_stream_1_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_1_V_read;
    img_1_data_stream_1_V_write <= CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_1_V_write;
    img_1_data_stream_2_V_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_2_V_din <= CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_2_V_din;
    img_1_data_stream_2_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_img_data_stream_2_V_read;
    img_1_data_stream_2_V_write <= CvtColor_0_16_16_1080_1920_U0_p_dst_data_stream_2_V_write;
    img_1_rows_V_ap_dummy_ce <= ap_const_logic_1;
    img_1_rows_V_din <= init_1_U0_ap_return_0;
    img_1_rows_V_read <= Mat2AXIvideo_32_1080_1920_16_U0_ap_ready;
    img_1_rows_V_write <= ap_chn_write_init_1_U0_img_1_rows_V;

    -- init_1_U0_ap_continue assign process. --
    init_1_U0_ap_continue_assign_proc : process(ap_sig_ready_img_1_rows_V_full_n, ap_sig_ready_img_1_cols_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_img_1_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_img_1_cols_V_full_n))) then 
            init_1_U0_ap_continue <= ap_const_logic_1;
        else 
            init_1_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    init_1_U0_ap_start <= ap_sig_start_in_init_1_U0_ap_start;
    init_1_U0_p_cols <= cols;
    init_1_U0_p_rows <= rows;

    -- init_U0_ap_continue assign process. --
    init_U0_ap_continue_assign_proc : process(ap_sig_ready_img_0_rows_V_full_n, ap_sig_ready_img_0_rows_V_channel_full_n, ap_sig_ready_img_0_cols_V_full_n, ap_sig_ready_img_0_cols_V_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_img_0_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_img_0_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_img_0_cols_V_full_n) and (ap_const_logic_1 = ap_sig_ready_img_0_cols_V_channel_full_n))) then 
            init_U0_ap_continue <= ap_const_logic_1;
        else 
            init_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    init_U0_ap_start <= ap_sig_start_in_init_U0_ap_start;
    init_U0_p_cols <= cols;
    init_U0_p_rows <= rows;
    input_V_data_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_data_V_read;
    input_V_dest_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_read;
    input_V_id_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_id_V_read;
    input_V_keep_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_read;
    input_V_last_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_last_V_read;
    input_V_strb_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_read;
    input_V_user_V_read <= AXIvideo2Mat_32_1080_1920_16_U0_AXI_video_strm_V_user_V_read;
    output_V_data_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_din;
    output_V_data_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_data_V_write;
    output_V_dest_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_din;
    output_V_dest_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_dest_V_write;
    output_V_id_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_din;
    output_V_id_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_id_V_write;
    output_V_keep_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_din;
    output_V_keep_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_keep_V_write;
    output_V_last_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_din;
    output_V_last_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_last_V_write;
    output_V_strb_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_din;
    output_V_strb_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_strb_V_write;
    output_V_user_V_din <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_din;
    output_V_user_V_write <= Mat2AXIvideo_32_1080_1920_16_U0_AXI_video_strm_V_user_V_write;
end behav;
