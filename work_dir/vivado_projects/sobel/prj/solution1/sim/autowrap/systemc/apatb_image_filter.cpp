// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.1
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#define AP_INT_MAX_W 32678

#include "ap_int.h"

#include "ap_stream.h"
#include "hls_stream.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;

template< int D ,int U ,int TI ,int TD > struct ap_axiu  {
ap_uint<D> data;
ap_uint<D/8> keep;
ap_uint<D/8> strb;
ap_uint<U> user;
ap_uint<1> last;
ap_uint<TI> id;
ap_uint<TD> dest;
}; 




   #define AUTOTB_TVIN_input_V_data_V  "../tv/cdatafile/c.image_filter.autotvin_input_V_data_V.dat"
   #define AUTOTB_TVIN_input_V_data_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_data_V.dat"
   #define AUTOTB_TVIN_input_V_keep_V  "../tv/cdatafile/c.image_filter.autotvin_input_V_keep_V.dat"
   #define AUTOTB_TVIN_input_V_keep_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_keep_V.dat"
   #define AUTOTB_TVIN_input_V_strb_V  "../tv/cdatafile/c.image_filter.autotvin_input_V_strb_V.dat"
   #define AUTOTB_TVIN_input_V_strb_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_strb_V.dat"
   #define AUTOTB_TVIN_input_V_user_V  "../tv/cdatafile/c.image_filter.autotvin_input_V_user_V.dat"
   #define AUTOTB_TVIN_input_V_user_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_user_V.dat"
   #define AUTOTB_TVIN_input_V_last_V  "../tv/cdatafile/c.image_filter.autotvin_input_V_last_V.dat"
   #define AUTOTB_TVIN_input_V_last_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_last_V.dat"
   #define AUTOTB_TVIN_input_V_id_V  "../tv/cdatafile/c.image_filter.autotvin_input_V_id_V.dat"
   #define AUTOTB_TVIN_input_V_id_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_id_V.dat"
   #define AUTOTB_TVIN_input_V_dest_V  "../tv/cdatafile/c.image_filter.autotvin_input_V_dest_V.dat"
   #define AUTOTB_TVIN_input_V_dest_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_dest_V.dat"
   #define AUTOTB_TVIN_output_V_data_V  "../tv/cdatafile/c.image_filter.autotvin_output_V_data_V.dat"
   #define AUTOTB_TVIN_output_V_data_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_output_V_data_V.dat"
   #define AUTOTB_TVOUT_output_V_data_V  "../tv/cdatafile/c.image_filter.autotvout_output_V_data_V.dat"
   #define AUTOTB_TVIN_output_V_keep_V  "../tv/cdatafile/c.image_filter.autotvin_output_V_keep_V.dat"
   #define AUTOTB_TVIN_output_V_keep_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_output_V_keep_V.dat"
   #define AUTOTB_TVOUT_output_V_keep_V  "../tv/cdatafile/c.image_filter.autotvout_output_V_keep_V.dat"
   #define AUTOTB_TVIN_output_V_strb_V  "../tv/cdatafile/c.image_filter.autotvin_output_V_strb_V.dat"
   #define AUTOTB_TVIN_output_V_strb_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_output_V_strb_V.dat"
   #define AUTOTB_TVOUT_output_V_strb_V  "../tv/cdatafile/c.image_filter.autotvout_output_V_strb_V.dat"
   #define AUTOTB_TVIN_output_V_user_V  "../tv/cdatafile/c.image_filter.autotvin_output_V_user_V.dat"
   #define AUTOTB_TVIN_output_V_user_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_output_V_user_V.dat"
   #define AUTOTB_TVOUT_output_V_user_V  "../tv/cdatafile/c.image_filter.autotvout_output_V_user_V.dat"
   #define AUTOTB_TVIN_output_V_last_V  "../tv/cdatafile/c.image_filter.autotvin_output_V_last_V.dat"
   #define AUTOTB_TVIN_output_V_last_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_output_V_last_V.dat"
   #define AUTOTB_TVOUT_output_V_last_V  "../tv/cdatafile/c.image_filter.autotvout_output_V_last_V.dat"
   #define AUTOTB_TVIN_output_V_id_V  "../tv/cdatafile/c.image_filter.autotvin_output_V_id_V.dat"
   #define AUTOTB_TVIN_output_V_id_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_output_V_id_V.dat"
   #define AUTOTB_TVOUT_output_V_id_V  "../tv/cdatafile/c.image_filter.autotvout_output_V_id_V.dat"
   #define AUTOTB_TVIN_output_V_dest_V  "../tv/cdatafile/c.image_filter.autotvin_output_V_dest_V.dat"
   #define AUTOTB_TVIN_output_V_dest_V_pc  "../tv/rtldatafile/rtl.image_filter.autotvin_output_V_dest_V.dat"
   #define AUTOTB_TVOUT_output_V_dest_V  "../tv/cdatafile/c.image_filter.autotvout_output_V_dest_V.dat"
   #define AUTOTB_TVIN_rows  "../tv/cdatafile/c.image_filter.autotvin_rows.dat"
   #define AUTOTB_TVIN_cols  "../tv/cdatafile/c.image_filter.autotvin_cols.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVIN_PC_input_V_data_V  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_data_V.dat"
   #define AUTOTB_TVIN_PC_input_V_keep_V  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_keep_V.dat"
   #define AUTOTB_TVIN_PC_input_V_strb_V  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_strb_V.dat"
   #define AUTOTB_TVIN_PC_input_V_user_V  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_user_V.dat"
   #define AUTOTB_TVIN_PC_input_V_last_V  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_last_V.dat"
   #define AUTOTB_TVIN_PC_input_V_id_V  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_id_V.dat"
   #define AUTOTB_TVIN_PC_input_V_dest_V  "../tv/rtldatafile/rtl.image_filter.autotvin_input_V_dest_V.dat"
   #define AUTOTB_TVOUT_PC_output_V_data_V  "../tv/rtldatafile/rtl.image_filter.autotvout_output_V_data_V.dat"
   #define AUTOTB_TVOUT_PC_output_V_keep_V  "../tv/rtldatafile/rtl.image_filter.autotvout_output_V_keep_V.dat"
   #define AUTOTB_TVOUT_PC_output_V_strb_V  "../tv/rtldatafile/rtl.image_filter.autotvout_output_V_strb_V.dat"
   #define AUTOTB_TVOUT_PC_output_V_user_V  "../tv/rtldatafile/rtl.image_filter.autotvout_output_V_user_V.dat"
   #define AUTOTB_TVOUT_PC_output_V_last_V  "../tv/rtldatafile/rtl.image_filter.autotvout_output_V_last_V.dat"
   #define AUTOTB_TVOUT_PC_output_V_id_V  "../tv/rtldatafile/rtl.image_filter.autotvout_output_V_id_V.dat"
   #define AUTOTB_TVOUT_PC_output_V_dest_V  "../tv/rtldatafile/rtl.image_filter.autotvout_output_V_dest_V.dat"

class AESL_RUNTIME {
    public:
        AESL_RUNTIME(const char* name) {
            mName = name;
            mFile = fopen(mName, "w");
            if (mFile == NULL) {
                cout<<"Failed to open tv file ."<<mName<<endl;
                exit (1);
            }
            fprintf(mFile, "[[[runtime]]]\n");
        }
        ~AESL_RUNTIME() {
            fprintf(mFile, "[[[/runtime]]]\n");
            fclose(mFile);
        }
    public:
        FILE* mFile;
        const char* mName;
};

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            input_V_data_V_depth = 0;
            input_V_keep_V_depth = 0;
            input_V_strb_V_depth = 0;
            input_V_user_V_depth = 0;
            input_V_last_V_depth = 0;
            input_V_id_V_depth = 0;
            input_V_dest_V_depth = 0;
            output_V_data_V_depth = 0;
            output_V_keep_V_depth = 0;
            output_V_strb_V_depth = 0;
            output_V_user_V_depth = 0;
            output_V_last_V_depth = 0;
            output_V_id_V_depth = 0;
            output_V_dest_V_depth = 0;
            rows_depth = 0;
            cols_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {input_V_data_V "<< input_V_data_V_depth << "}\n";
            total_list<<"   {input_V_keep_V "<< input_V_keep_V_depth << "}\n";
            total_list<<"   {input_V_strb_V "<< input_V_strb_V_depth << "}\n";
            total_list<<"   {input_V_user_V "<< input_V_user_V_depth << "}\n";
            total_list<<"   {input_V_last_V "<< input_V_last_V_depth << "}\n";
            total_list<<"   {input_V_id_V "<< input_V_id_V_depth << "}\n";
            total_list<<"   {input_V_dest_V "<< input_V_dest_V_depth << "}\n";
            total_list<<"   {output_V_data_V "<< output_V_data_V_depth << "}\n";
            total_list<<"   {output_V_keep_V "<< output_V_keep_V_depth << "}\n";
            total_list<<"   {output_V_strb_V "<< output_V_strb_V_depth << "}\n";
            total_list<<"   {output_V_user_V "<< output_V_user_V_depth << "}\n";
            total_list<<"   {output_V_last_V "<< output_V_last_V_depth << "}\n";
            total_list<<"   {output_V_id_V "<< output_V_id_V_depth << "}\n";
            total_list<<"   {output_V_dest_V "<< output_V_dest_V_depth << "}\n";
            total_list<<"   {rows "<< rows_depth << "}\n";
            total_list<<"   {cols "<< cols_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int input_V_data_V_depth;
        int input_V_keep_V_depth;
        int input_V_strb_V_depth;
        int input_V_user_V_depth;
        int input_V_last_V_depth;
        int input_V_id_V_depth;
        int input_V_dest_V_depth;
        int output_V_data_V_depth;
        int output_V_keep_V_depth;
        int output_V_strb_V_depth;
        int output_V_user_V_depth;
        int output_V_last_V_depth;
        int output_V_id_V_depth;
        int output_V_dest_V_depth;
        int rows_depth;
        int cols_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

class AESL_RUNTIME_PC {
    public:
        AESL_RUNTIME_PC(const char* name) {
            file_token.open( name);
            if (!file_token.good()) {
                cout<<"Failed to open tv file ."<<name<<endl;
                exit (1);
            }
            file_token >> mName;//[[[runtime]]]
        }
        ~AESL_RUNTIME_PC() {
            file_token.close();
        }
    public:
        fstream file_token;
        string mName;
};

#define image_filter AESL_ORIG_DUT_image_filter
extern void image_filter ( hls::stream< ap_axiu< 64 ,1 ,1 ,1 > > & input,  hls::stream< ap_axiu< 64 ,1 ,1 ,1 > > & output,  int rows,  int cols);
#undef image_filter
void image_filter ( hls::stream< ap_axiu< 64 ,1 ,1 ,1 > > & input,  hls::stream< ap_axiu< 64 ,1 ,1 ,1 > > & output,  int rows,  int cols) {

    fstream wrapc_switch_file_token;

    wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

    if (wrapc_switch_file_token.good()) {

        static unsigned AESL_transaction_pc;

        string AESL_token;

        string AESL_num;

        static AESL_RUNTIME_PC tvin_pc_input_V_data_V(AUTOTB_TVIN_PC_input_V_data_V);

        static AESL_RUNTIME_PC tvin_pc_input_V_keep_V(AUTOTB_TVIN_PC_input_V_keep_V);

        static AESL_RUNTIME_PC tvin_pc_input_V_strb_V(AUTOTB_TVIN_PC_input_V_strb_V);

        static AESL_RUNTIME_PC tvin_pc_input_V_user_V(AUTOTB_TVIN_PC_input_V_user_V);

        static AESL_RUNTIME_PC tvin_pc_input_V_last_V(AUTOTB_TVIN_PC_input_V_last_V);

        static AESL_RUNTIME_PC tvin_pc_input_V_id_V(AUTOTB_TVIN_PC_input_V_id_V);

        static AESL_RUNTIME_PC tvin_pc_input_V_dest_V(AUTOTB_TVIN_PC_input_V_dest_V);

        static AESL_RUNTIME_PC tvout_pc_output_V_data_V(AUTOTB_TVOUT_PC_output_V_data_V);

        static AESL_RUNTIME_PC tvout_pc_output_V_keep_V(AUTOTB_TVOUT_PC_output_V_keep_V);

        static AESL_RUNTIME_PC tvout_pc_output_V_strb_V(AUTOTB_TVOUT_PC_output_V_strb_V);

        static AESL_RUNTIME_PC tvout_pc_output_V_user_V(AUTOTB_TVOUT_PC_output_V_user_V);

        static AESL_RUNTIME_PC tvout_pc_output_V_last_V(AUTOTB_TVOUT_PC_output_V_last_V);

        static AESL_RUNTIME_PC tvout_pc_output_V_id_V(AUTOTB_TVOUT_PC_output_V_id_V);

        static AESL_RUNTIME_PC tvout_pc_output_V_dest_V(AUTOTB_TVOUT_PC_output_V_dest_V);

        int ap_stream_size = 0;

        int ap_stream_size_input_V_data_V = 0;

        
        tvin_pc_input_V_data_V.file_token >> AESL_token;//[[transaction]]

        tvin_pc_input_V_data_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvin_pc_input_V_data_V.file_token >> AESL_token;//pop_size

            int pop_size = atoi(AESL_token.c_str());

            for (ap_stream_size_input_V_data_V = 0 ; ap_stream_size_input_V_data_V < pop_size ; ap_stream_size_input_V_data_V ++) {

            input.read();

            }

            tvin_pc_input_V_data_V.file_token >> AESL_token;//[[/transaction]]

        }
//============================ output_V_data_V ==============================

        int ap_stream_size_output_V_data_V = 0;

        std::vector <ap_uint<64> > tmp_output_V_data_V;

        tvout_pc_output_V_data_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        tvout_pc_output_V_data_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_output_V_data_V.file_token >> AESL_token;//data

            sc_lv<64> output_V_data_V_pc_buffer ;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_data_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_data_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                output_V_data_V_pc_buffer = AESL_token.c_str();

                if (AESL_token != "") {

                tmp_output_V_data_V.push_back( output_V_data_V_pc_buffer.to_string(SC_BIN).c_str() );

                i++ ;

                }

                tvout_pc_output_V_data_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_output_V_data_V.file_token.eof()) {

                   exit(1);

                }

            }

                ap_stream_size_output_V_data_V = i;

                ap_stream_size = ap_stream_size ? ap_stream_size : i;

        }
//============================ output_V_keep_V ==============================

        int ap_stream_size_output_V_keep_V = 0;

        std::vector <ap_uint<8> > tmp_output_V_keep_V;

        tvout_pc_output_V_keep_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        tvout_pc_output_V_keep_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_output_V_keep_V.file_token >> AESL_token;//data

            sc_lv<8> output_V_keep_V_pc_buffer ;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                output_V_keep_V_pc_buffer = AESL_token.c_str();

                if (AESL_token != "") {

                tmp_output_V_keep_V.push_back( output_V_keep_V_pc_buffer.to_string(SC_BIN).c_str() );

                i++ ;

                }

                tvout_pc_output_V_keep_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_output_V_keep_V.file_token.eof()) {

                   exit(1);

                }

            }

                ap_stream_size_output_V_keep_V = i;

                ap_stream_size = ap_stream_size ? ap_stream_size : i;

        }
//============================ output_V_strb_V ==============================

        int ap_stream_size_output_V_strb_V = 0;

        std::vector <ap_uint<8> > tmp_output_V_strb_V;

        tvout_pc_output_V_strb_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        tvout_pc_output_V_strb_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_output_V_strb_V.file_token >> AESL_token;//data

            sc_lv<8> output_V_strb_V_pc_buffer ;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_strb_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_strb_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                output_V_strb_V_pc_buffer = AESL_token.c_str();

                if (AESL_token != "") {

                tmp_output_V_strb_V.push_back( output_V_strb_V_pc_buffer.to_string(SC_BIN).c_str() );

                i++ ;

                }

                tvout_pc_output_V_strb_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_output_V_strb_V.file_token.eof()) {

                   exit(1);

                }

            }

                ap_stream_size_output_V_strb_V = i;

                ap_stream_size = ap_stream_size ? ap_stream_size : i;

        }
//============================ output_V_user_V ==============================

        int ap_stream_size_output_V_user_V = 0;

        std::vector <ap_uint<1> > tmp_output_V_user_V;

        tvout_pc_output_V_user_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        tvout_pc_output_V_user_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_output_V_user_V.file_token >> AESL_token;//data

            sc_lv<1> output_V_user_V_pc_buffer ;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_user_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_user_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                output_V_user_V_pc_buffer = AESL_token.c_str();

                if (AESL_token != "") {

                tmp_output_V_user_V.push_back( output_V_user_V_pc_buffer.to_string(SC_BIN).c_str() );

                i++ ;

                }

                tvout_pc_output_V_user_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_output_V_user_V.file_token.eof()) {

                   exit(1);

                }

            }

                ap_stream_size_output_V_user_V = i;

                ap_stream_size = ap_stream_size ? ap_stream_size : i;

        }
//============================ output_V_last_V ==============================

        int ap_stream_size_output_V_last_V = 0;

        std::vector <ap_uint<1> > tmp_output_V_last_V;

        tvout_pc_output_V_last_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        tvout_pc_output_V_last_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_output_V_last_V.file_token >> AESL_token;//data

            sc_lv<1> output_V_last_V_pc_buffer ;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_last_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_last_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                output_V_last_V_pc_buffer = AESL_token.c_str();

                if (AESL_token != "") {

                tmp_output_V_last_V.push_back( output_V_last_V_pc_buffer.to_string(SC_BIN).c_str() );

                i++ ;

                }

                tvout_pc_output_V_last_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_output_V_last_V.file_token.eof()) {

                   exit(1);

                }

            }

                ap_stream_size_output_V_last_V = i;

                ap_stream_size = ap_stream_size ? ap_stream_size : i;

        }
//============================ output_V_id_V ==============================

        int ap_stream_size_output_V_id_V = 0;

        std::vector <ap_uint<1> > tmp_output_V_id_V;

        tvout_pc_output_V_id_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        tvout_pc_output_V_id_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_output_V_id_V.file_token >> AESL_token;//data

            sc_lv<1> output_V_id_V_pc_buffer ;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_id_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_id_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                output_V_id_V_pc_buffer = AESL_token.c_str();

                if (AESL_token != "") {

                tmp_output_V_id_V.push_back( output_V_id_V_pc_buffer.to_string(SC_BIN).c_str() );

                i++ ;

                }

                tvout_pc_output_V_id_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_output_V_id_V.file_token.eof()) {

                   exit(1);

                }

            }

                ap_stream_size_output_V_id_V = i;

                ap_stream_size = ap_stream_size ? ap_stream_size : i;

        }
//============================ output_V_dest_V ==============================

        int ap_stream_size_output_V_dest_V = 0;

        std::vector <ap_uint<1> > tmp_output_V_dest_V;

        tvout_pc_output_V_dest_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        tvout_pc_output_V_dest_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_output_V_dest_V.file_token >> AESL_token;//data

            sc_lv<1> output_V_dest_V_pc_buffer ;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_dest_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_V_dest_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                output_V_dest_V_pc_buffer = AESL_token.c_str();

                if (AESL_token != "") {

                tmp_output_V_dest_V.push_back( output_V_dest_V_pc_buffer.to_string(SC_BIN).c_str() );

                i++ ;

                }

                tvout_pc_output_V_dest_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_output_V_dest_V.file_token.eof()) {

                   exit(1);

                }

            }

                ap_stream_size_output_V_dest_V = i;

                ap_stream_size = ap_stream_size ? ap_stream_size : i;

        }

        ap_axiu< 64 ,1 ,1 ,1 > *tmp_3 = new ap_axiu< 64 ,1 ,1 ,1 >[ap_stream_size_output_V_data_V + 1] ;

        
        for (int i = 0; i < ap_stream_size_output_V_data_V; i++) {

            ((((ap_axiu< 64 ,1 ,1 ,1 > *)tmp_3) + (i)/1)->data) = tmp_output_V_data_V[i];

        }


        
        for (int i = 0; i < ap_stream_size_output_V_keep_V; i++) {

            ((((ap_axiu< 64 ,1 ,1 ,1 > *)tmp_3) + (i)/1)->keep) = tmp_output_V_keep_V[i];

        }


        
        for (int i = 0; i < ap_stream_size_output_V_strb_V; i++) {

            ((((ap_axiu< 64 ,1 ,1 ,1 > *)tmp_3) + (i)/1)->strb) = tmp_output_V_strb_V[i];

        }


        
        for (int i = 0; i < ap_stream_size_output_V_user_V; i++) {

            ((((ap_axiu< 64 ,1 ,1 ,1 > *)tmp_3) + (i)/1)->user) = tmp_output_V_user_V[i];

        }


        
        for (int i = 0; i < ap_stream_size_output_V_last_V; i++) {

            ((((ap_axiu< 64 ,1 ,1 ,1 > *)tmp_3) + (i)/1)->last) = tmp_output_V_last_V[i];

        }


        
        for (int i = 0; i < ap_stream_size_output_V_id_V; i++) {

            ((((ap_axiu< 64 ,1 ,1 ,1 > *)tmp_3) + (i)/1)->id) = tmp_output_V_id_V[i];

        }


        
        for (int i = 0; i < ap_stream_size_output_V_dest_V; i++) {

            ((((ap_axiu< 64 ,1 ,1 ,1 > *)tmp_3) + (i)/1)->dest) = tmp_output_V_dest_V[i];

        }


        for (int i=0 ; i < ap_stream_size_output_V_data_V ; i++) {

           output.write(tmp_3[i] );

        }

        AESL_transaction_pc ++ ;

    } else {

        static unsigned AESL_transaction;

        static AESL_RUNTIME tvin_input_V_data_V(AUTOTB_TVIN_input_V_data_V);

        static AESL_RUNTIME tvin_input_V_data_V_pc(AUTOTB_TVIN_input_V_data_V_pc);

        static AESL_RUNTIME tvin_input_V_keep_V(AUTOTB_TVIN_input_V_keep_V);

        static AESL_RUNTIME tvin_input_V_keep_V_pc(AUTOTB_TVIN_input_V_keep_V_pc);

        static AESL_RUNTIME tvin_input_V_strb_V(AUTOTB_TVIN_input_V_strb_V);

        static AESL_RUNTIME tvin_input_V_strb_V_pc(AUTOTB_TVIN_input_V_strb_V_pc);

        static AESL_RUNTIME tvin_input_V_user_V(AUTOTB_TVIN_input_V_user_V);

        static AESL_RUNTIME tvin_input_V_user_V_pc(AUTOTB_TVIN_input_V_user_V_pc);

        static AESL_RUNTIME tvin_input_V_last_V(AUTOTB_TVIN_input_V_last_V);

        static AESL_RUNTIME tvin_input_V_last_V_pc(AUTOTB_TVIN_input_V_last_V_pc);

        static AESL_RUNTIME tvin_input_V_id_V(AUTOTB_TVIN_input_V_id_V);

        static AESL_RUNTIME tvin_input_V_id_V_pc(AUTOTB_TVIN_input_V_id_V_pc);

        static AESL_RUNTIME tvin_input_V_dest_V(AUTOTB_TVIN_input_V_dest_V);

        static AESL_RUNTIME tvin_input_V_dest_V_pc(AUTOTB_TVIN_input_V_dest_V_pc);

        static AESL_RUNTIME tvin_output_V_data_V(AUTOTB_TVIN_output_V_data_V);

        static AESL_RUNTIME tvin_output_V_data_V_pc(AUTOTB_TVIN_output_V_data_V_pc);

        static AESL_RUNTIME tvout_output_V_data_V(AUTOTB_TVOUT_output_V_data_V);

        static AESL_RUNTIME tvin_output_V_keep_V(AUTOTB_TVIN_output_V_keep_V);

        static AESL_RUNTIME tvin_output_V_keep_V_pc(AUTOTB_TVIN_output_V_keep_V_pc);

        static AESL_RUNTIME tvout_output_V_keep_V(AUTOTB_TVOUT_output_V_keep_V);

        static AESL_RUNTIME tvin_output_V_strb_V(AUTOTB_TVIN_output_V_strb_V);

        static AESL_RUNTIME tvin_output_V_strb_V_pc(AUTOTB_TVIN_output_V_strb_V_pc);

        static AESL_RUNTIME tvout_output_V_strb_V(AUTOTB_TVOUT_output_V_strb_V);

        static AESL_RUNTIME tvin_output_V_user_V(AUTOTB_TVIN_output_V_user_V);

        static AESL_RUNTIME tvin_output_V_user_V_pc(AUTOTB_TVIN_output_V_user_V_pc);

        static AESL_RUNTIME tvout_output_V_user_V(AUTOTB_TVOUT_output_V_user_V);

        static AESL_RUNTIME tvin_output_V_last_V(AUTOTB_TVIN_output_V_last_V);

        static AESL_RUNTIME tvin_output_V_last_V_pc(AUTOTB_TVIN_output_V_last_V_pc);

        static AESL_RUNTIME tvout_output_V_last_V(AUTOTB_TVOUT_output_V_last_V);

        static AESL_RUNTIME tvin_output_V_id_V(AUTOTB_TVIN_output_V_id_V);

        static AESL_RUNTIME tvin_output_V_id_V_pc(AUTOTB_TVIN_output_V_id_V_pc);

        static AESL_RUNTIME tvout_output_V_id_V(AUTOTB_TVOUT_output_V_id_V);

        static AESL_RUNTIME tvin_output_V_dest_V(AUTOTB_TVIN_output_V_dest_V);

        static AESL_RUNTIME tvin_output_V_dest_V_pc(AUTOTB_TVIN_output_V_dest_V_pc);

        static AESL_RUNTIME tvout_output_V_dest_V(AUTOTB_TVOUT_output_V_dest_V);

        static AESL_RUNTIME tvin_rows(AUTOTB_TVIN_rows);

        static AESL_RUNTIME tvin_cols(AUTOTB_TVIN_cols);

        static AESL_RUNTIME AESL_c_tvin("image_filter.autotvin.dat");


        static INTER_TCL_FILE tcl_file(INTER_TCL);


        int leading_zero;

        fprintf(AESL_c_tvin.mFile, "[[transaction]] %d\n", AESL_transaction);
//=====================tvin==========================

            std::vector<ap_axiu< 64 ,1 ,1 ,1 > > tmp_0;

            int tmp_1 = 0;

            while (!input.empty()) {

                tmp_0.push_back(input.read());

                tmp_1 ++;

            }

            std::vector<ap_axiu< 64 ,1 ,1 ,1 > > tmp_3;

            int tmp_4 = 0;

            while (!output.empty()) {

                tmp_3.push_back(output.read());

                tmp_4 ++;

            }

            fprintf(tvin_input_V_data_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_input_V_data_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvin.mFile, "[input_V_data_V]\n");

            for (int i = 0; i < tmp_1; i++) {

                
                    fprintf(AESL_c_tvin.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].data).countLeadingZeros();

                    if( leading_zero >= 64 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvin.mFile, "0");

                    if(tmp_0[(i)/1].data == 0) 

                    fprintf(AESL_c_tvin.mFile, "\n");

                    else

                    fprintf(AESL_c_tvin.mFile, "%s\n", (tmp_0[(i)/1].data).to_string(16).c_str());


                
                    fprintf(tvin_input_V_data_V.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].data).countLeadingZeros();

                    if( leading_zero >= 64 % 4 && leading_zero != 0)

                    fprintf(tvin_input_V_data_V.mFile, "0");

                    if(tmp_0[(i)/1].data == 0) 

                    fprintf(tvin_input_V_data_V.mFile, "\n");

                    else

                    fprintf(tvin_input_V_data_V.mFile, "%s\n", (tmp_0[(i)/1].data).to_string(16).c_str());

            }

            fprintf(AESL_c_tvin.mFile, "[/input_V_data_V]\n");

            tcl_file.set_num(tmp_1,&tcl_file.input_V_data_V_depth);

            fprintf(tvin_input_V_data_V_pc.mFile, "%d\n", tmp_1);

            fprintf(tvin_input_V_data_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_data_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_keep_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_input_V_keep_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvin.mFile, "[input_V_keep_V]\n");

            for (int i = 0; i < tmp_1; i++) {

                
                    fprintf(AESL_c_tvin.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].keep).countLeadingZeros();

                    if( leading_zero >= 8 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvin.mFile, "0");

                    if(tmp_0[(i)/1].keep == 0) 

                    fprintf(AESL_c_tvin.mFile, "\n");

                    else

                    fprintf(AESL_c_tvin.mFile, "%s\n", (tmp_0[(i)/1].keep).to_string(16).c_str());


                
                    fprintf(tvin_input_V_keep_V.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].keep).countLeadingZeros();

                    if( leading_zero >= 8 % 4 && leading_zero != 0)

                    fprintf(tvin_input_V_keep_V.mFile, "0");

                    if(tmp_0[(i)/1].keep == 0) 

                    fprintf(tvin_input_V_keep_V.mFile, "\n");

                    else

                    fprintf(tvin_input_V_keep_V.mFile, "%s\n", (tmp_0[(i)/1].keep).to_string(16).c_str());

            }

            fprintf(AESL_c_tvin.mFile, "[/input_V_keep_V]\n");

            tcl_file.set_num(tmp_1,&tcl_file.input_V_keep_V_depth);

            fprintf(tvin_input_V_keep_V_pc.mFile, "%d\n", tmp_1);

            fprintf(tvin_input_V_keep_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_keep_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_strb_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_input_V_strb_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvin.mFile, "[input_V_strb_V]\n");

            for (int i = 0; i < tmp_1; i++) {

                
                    fprintf(AESL_c_tvin.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].strb).countLeadingZeros();

                    if( leading_zero >= 8 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvin.mFile, "0");

                    if(tmp_0[(i)/1].strb == 0) 

                    fprintf(AESL_c_tvin.mFile, "\n");

                    else

                    fprintf(AESL_c_tvin.mFile, "%s\n", (tmp_0[(i)/1].strb).to_string(16).c_str());


                
                    fprintf(tvin_input_V_strb_V.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].strb).countLeadingZeros();

                    if( leading_zero >= 8 % 4 && leading_zero != 0)

                    fprintf(tvin_input_V_strb_V.mFile, "0");

                    if(tmp_0[(i)/1].strb == 0) 

                    fprintf(tvin_input_V_strb_V.mFile, "\n");

                    else

                    fprintf(tvin_input_V_strb_V.mFile, "%s\n", (tmp_0[(i)/1].strb).to_string(16).c_str());

            }

            fprintf(AESL_c_tvin.mFile, "[/input_V_strb_V]\n");

            tcl_file.set_num(tmp_1,&tcl_file.input_V_strb_V_depth);

            fprintf(tvin_input_V_strb_V_pc.mFile, "%d\n", tmp_1);

            fprintf(tvin_input_V_strb_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_strb_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_user_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_input_V_user_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvin.mFile, "[input_V_user_V]\n");

            for (int i = 0; i < tmp_1; i++) {

                
                    fprintf(AESL_c_tvin.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].user).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvin.mFile, "0");

                    if(tmp_0[(i)/1].user == 0) 

                    fprintf(AESL_c_tvin.mFile, "\n");

                    else

                    fprintf(AESL_c_tvin.mFile, "%s\n", (tmp_0[(i)/1].user).to_string(16).c_str());


                
                    fprintf(tvin_input_V_user_V.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].user).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(tvin_input_V_user_V.mFile, "0");

                    if(tmp_0[(i)/1].user == 0) 

                    fprintf(tvin_input_V_user_V.mFile, "\n");

                    else

                    fprintf(tvin_input_V_user_V.mFile, "%s\n", (tmp_0[(i)/1].user).to_string(16).c_str());

            }

            fprintf(AESL_c_tvin.mFile, "[/input_V_user_V]\n");

            tcl_file.set_num(tmp_1,&tcl_file.input_V_user_V_depth);

            fprintf(tvin_input_V_user_V_pc.mFile, "%d\n", tmp_1);

            fprintf(tvin_input_V_user_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_user_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_last_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_input_V_last_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvin.mFile, "[input_V_last_V]\n");

            for (int i = 0; i < tmp_1; i++) {

                
                    fprintf(AESL_c_tvin.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].last).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvin.mFile, "0");

                    if(tmp_0[(i)/1].last == 0) 

                    fprintf(AESL_c_tvin.mFile, "\n");

                    else

                    fprintf(AESL_c_tvin.mFile, "%s\n", (tmp_0[(i)/1].last).to_string(16).c_str());


                
                    fprintf(tvin_input_V_last_V.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].last).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(tvin_input_V_last_V.mFile, "0");

                    if(tmp_0[(i)/1].last == 0) 

                    fprintf(tvin_input_V_last_V.mFile, "\n");

                    else

                    fprintf(tvin_input_V_last_V.mFile, "%s\n", (tmp_0[(i)/1].last).to_string(16).c_str());

            }

            fprintf(AESL_c_tvin.mFile, "[/input_V_last_V]\n");

            tcl_file.set_num(tmp_1,&tcl_file.input_V_last_V_depth);

            fprintf(tvin_input_V_last_V_pc.mFile, "%d\n", tmp_1);

            fprintf(tvin_input_V_last_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_last_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_id_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_input_V_id_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvin.mFile, "[input_V_id_V]\n");

            for (int i = 0; i < tmp_1; i++) {

                
                    fprintf(AESL_c_tvin.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].id).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvin.mFile, "0");

                    if(tmp_0[(i)/1].id == 0) 

                    fprintf(AESL_c_tvin.mFile, "\n");

                    else

                    fprintf(AESL_c_tvin.mFile, "%s\n", (tmp_0[(i)/1].id).to_string(16).c_str());


                
                    fprintf(tvin_input_V_id_V.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].id).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(tvin_input_V_id_V.mFile, "0");

                    if(tmp_0[(i)/1].id == 0) 

                    fprintf(tvin_input_V_id_V.mFile, "\n");

                    else

                    fprintf(tvin_input_V_id_V.mFile, "%s\n", (tmp_0[(i)/1].id).to_string(16).c_str());

            }

            fprintf(AESL_c_tvin.mFile, "[/input_V_id_V]\n");

            tcl_file.set_num(tmp_1,&tcl_file.input_V_id_V_depth);

            fprintf(tvin_input_V_id_V_pc.mFile, "%d\n", tmp_1);

            fprintf(tvin_input_V_id_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_id_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_dest_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_input_V_dest_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvin.mFile, "[input_V_dest_V]\n");

            for (int i = 0; i < tmp_1; i++) {

                
                    fprintf(AESL_c_tvin.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].dest).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvin.mFile, "0");

                    if(tmp_0[(i)/1].dest == 0) 

                    fprintf(AESL_c_tvin.mFile, "\n");

                    else

                    fprintf(AESL_c_tvin.mFile, "%s\n", (tmp_0[(i)/1].dest).to_string(16).c_str());


                
                    fprintf(tvin_input_V_dest_V.mFile, "0x");

                    leading_zero = (tmp_0[(i)/1].dest).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(tvin_input_V_dest_V.mFile, "0");

                    if(tmp_0[(i)/1].dest == 0) 

                    fprintf(tvin_input_V_dest_V.mFile, "\n");

                    else

                    fprintf(tvin_input_V_dest_V.mFile, "%s\n", (tmp_0[(i)/1].dest).to_string(16).c_str());

            }

            fprintf(AESL_c_tvin.mFile, "[/input_V_dest_V]\n");

            tcl_file.set_num(tmp_1,&tcl_file.input_V_dest_V_depth);

            fprintf(tvin_input_V_dest_V_pc.mFile, "%d\n", tmp_1);

            fprintf(tvin_input_V_dest_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvin_input_V_dest_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_output_V_data_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_data_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_output_V_keep_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_keep_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_output_V_strb_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_strb_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_output_V_user_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_user_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_output_V_last_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_last_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_output_V_id_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_id_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_output_V_dest_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_dest_V.mFile, "[[/transaction]] \n");

            fprintf(tvin_rows.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvin.mFile, "[rows]\n");

            
                fprintf(AESL_c_tvin.mFile, "0x%08X\n", rows);

            
                fprintf(tvin_rows.mFile, "0x%08X\n", rows);

            fprintf(AESL_c_tvin.mFile, "[/rows]\n");

            tcl_file.set_num(0,&tcl_file.rows_depth);

            fprintf(tvin_rows.mFile, "[[/transaction]] \n");


            fprintf(tvin_cols.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvin.mFile, "[cols]\n");

            
                fprintf(AESL_c_tvin.mFile, "0x%08X\n", cols);

            
                fprintf(tvin_cols.mFile, "0x%08X\n", cols);

            fprintf(AESL_c_tvin.mFile, "[/cols]\n");

            tcl_file.set_num(0,&tcl_file.cols_depth);

            fprintf(tvin_cols.mFile, "[[/transaction]] \n");


            for (int i = 0; i < tmp_1; i++) {

                input.write(tmp_0[i]);

            }

        fprintf(AESL_c_tvin.mFile, "[[/transaction]] \n\n\n", AESL_transaction);

        AESL_ORIG_DUT_image_filter(input,output,rows,cols);

        static AESL_RUNTIME AESL_c_tvout("image_filter.autotvout.dat");


        fprintf(AESL_c_tvout.mFile, "[[transaction]] %d\n", AESL_transaction);
//=====================tvout==========================

            int tmp_5 = tmp_4;

            while (!output.empty()) {

                tmp_3.push_back(output.read());

                tmp_4 ++;

            }

            fprintf(tvout_output_V_data_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_data_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvout.mFile, "[output_V_data_V]\n");

            for (int i = tmp_5; i < tmp_4; i++) {

                
                    fprintf(AESL_c_tvout.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].data).countLeadingZeros();

                    if( leading_zero >= 64 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvout.mFile, "0");

                    if(tmp_3[(i)/1].data == 0) 

                    fprintf(AESL_c_tvout.mFile, "\n");

                    else

                    fprintf(AESL_c_tvout.mFile, "%s\n", (tmp_3[(i)/1].data).to_string(16).c_str());


                
                    fprintf(tvout_output_V_data_V.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].data).countLeadingZeros();

                    if( leading_zero >= 64 % 4 && leading_zero != 0)

                    fprintf(tvout_output_V_data_V.mFile, "0");

                    if(tmp_3[(i)/1].data == 0) 

                    fprintf(tvout_output_V_data_V.mFile, "\n");

                    else

                    fprintf(tvout_output_V_data_V.mFile, "%s\n", (tmp_3[(i)/1].data).to_string(16).c_str());

            }

            fprintf(AESL_c_tvout.mFile, "[/output_V_data_V]\n");

            tcl_file.set_num(tmp_4 - tmp_5,&tcl_file.output_V_data_V_depth);

            fprintf(tvin_output_V_data_V_pc.mFile, "%d\n", tmp_4 - tmp_5);

            fprintf(tvin_output_V_data_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_data_V.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_keep_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_keep_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvout.mFile, "[output_V_keep_V]\n");

            for (int i = tmp_5; i < tmp_4; i++) {

                
                    fprintf(AESL_c_tvout.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].keep).countLeadingZeros();

                    if( leading_zero >= 8 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvout.mFile, "0");

                    if(tmp_3[(i)/1].keep == 0) 

                    fprintf(AESL_c_tvout.mFile, "\n");

                    else

                    fprintf(AESL_c_tvout.mFile, "%s\n", (tmp_3[(i)/1].keep).to_string(16).c_str());


                
                    fprintf(tvout_output_V_keep_V.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].keep).countLeadingZeros();

                    if( leading_zero >= 8 % 4 && leading_zero != 0)

                    fprintf(tvout_output_V_keep_V.mFile, "0");

                    if(tmp_3[(i)/1].keep == 0) 

                    fprintf(tvout_output_V_keep_V.mFile, "\n");

                    else

                    fprintf(tvout_output_V_keep_V.mFile, "%s\n", (tmp_3[(i)/1].keep).to_string(16).c_str());

            }

            fprintf(AESL_c_tvout.mFile, "[/output_V_keep_V]\n");

            tcl_file.set_num(tmp_4 - tmp_5,&tcl_file.output_V_keep_V_depth);

            fprintf(tvin_output_V_keep_V_pc.mFile, "%d\n", tmp_4 - tmp_5);

            fprintf(tvin_output_V_keep_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_keep_V.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_strb_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_strb_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvout.mFile, "[output_V_strb_V]\n");

            for (int i = tmp_5; i < tmp_4; i++) {

                
                    fprintf(AESL_c_tvout.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].strb).countLeadingZeros();

                    if( leading_zero >= 8 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvout.mFile, "0");

                    if(tmp_3[(i)/1].strb == 0) 

                    fprintf(AESL_c_tvout.mFile, "\n");

                    else

                    fprintf(AESL_c_tvout.mFile, "%s\n", (tmp_3[(i)/1].strb).to_string(16).c_str());


                
                    fprintf(tvout_output_V_strb_V.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].strb).countLeadingZeros();

                    if( leading_zero >= 8 % 4 && leading_zero != 0)

                    fprintf(tvout_output_V_strb_V.mFile, "0");

                    if(tmp_3[(i)/1].strb == 0) 

                    fprintf(tvout_output_V_strb_V.mFile, "\n");

                    else

                    fprintf(tvout_output_V_strb_V.mFile, "%s\n", (tmp_3[(i)/1].strb).to_string(16).c_str());

            }

            fprintf(AESL_c_tvout.mFile, "[/output_V_strb_V]\n");

            tcl_file.set_num(tmp_4 - tmp_5,&tcl_file.output_V_strb_V_depth);

            fprintf(tvin_output_V_strb_V_pc.mFile, "%d\n", tmp_4 - tmp_5);

            fprintf(tvin_output_V_strb_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_strb_V.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_user_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_user_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvout.mFile, "[output_V_user_V]\n");

            for (int i = tmp_5; i < tmp_4; i++) {

                
                    fprintf(AESL_c_tvout.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].user).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvout.mFile, "0");

                    if(tmp_3[(i)/1].user == 0) 

                    fprintf(AESL_c_tvout.mFile, "\n");

                    else

                    fprintf(AESL_c_tvout.mFile, "%s\n", (tmp_3[(i)/1].user).to_string(16).c_str());


                
                    fprintf(tvout_output_V_user_V.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].user).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(tvout_output_V_user_V.mFile, "0");

                    if(tmp_3[(i)/1].user == 0) 

                    fprintf(tvout_output_V_user_V.mFile, "\n");

                    else

                    fprintf(tvout_output_V_user_V.mFile, "%s\n", (tmp_3[(i)/1].user).to_string(16).c_str());

            }

            fprintf(AESL_c_tvout.mFile, "[/output_V_user_V]\n");

            tcl_file.set_num(tmp_4 - tmp_5,&tcl_file.output_V_user_V_depth);

            fprintf(tvin_output_V_user_V_pc.mFile, "%d\n", tmp_4 - tmp_5);

            fprintf(tvin_output_V_user_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_user_V.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_last_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_last_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvout.mFile, "[output_V_last_V]\n");

            for (int i = tmp_5; i < tmp_4; i++) {

                
                    fprintf(AESL_c_tvout.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].last).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvout.mFile, "0");

                    if(tmp_3[(i)/1].last == 0) 

                    fprintf(AESL_c_tvout.mFile, "\n");

                    else

                    fprintf(AESL_c_tvout.mFile, "%s\n", (tmp_3[(i)/1].last).to_string(16).c_str());


                
                    fprintf(tvout_output_V_last_V.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].last).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(tvout_output_V_last_V.mFile, "0");

                    if(tmp_3[(i)/1].last == 0) 

                    fprintf(tvout_output_V_last_V.mFile, "\n");

                    else

                    fprintf(tvout_output_V_last_V.mFile, "%s\n", (tmp_3[(i)/1].last).to_string(16).c_str());

            }

            fprintf(AESL_c_tvout.mFile, "[/output_V_last_V]\n");

            tcl_file.set_num(tmp_4 - tmp_5,&tcl_file.output_V_last_V_depth);

            fprintf(tvin_output_V_last_V_pc.mFile, "%d\n", tmp_4 - tmp_5);

            fprintf(tvin_output_V_last_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_last_V.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_id_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_id_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvout.mFile, "[output_V_id_V]\n");

            for (int i = tmp_5; i < tmp_4; i++) {

                
                    fprintf(AESL_c_tvout.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].id).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvout.mFile, "0");

                    if(tmp_3[(i)/1].id == 0) 

                    fprintf(AESL_c_tvout.mFile, "\n");

                    else

                    fprintf(AESL_c_tvout.mFile, "%s\n", (tmp_3[(i)/1].id).to_string(16).c_str());


                
                    fprintf(tvout_output_V_id_V.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].id).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(tvout_output_V_id_V.mFile, "0");

                    if(tmp_3[(i)/1].id == 0) 

                    fprintf(tvout_output_V_id_V.mFile, "\n");

                    else

                    fprintf(tvout_output_V_id_V.mFile, "%s\n", (tmp_3[(i)/1].id).to_string(16).c_str());

            }

            fprintf(AESL_c_tvout.mFile, "[/output_V_id_V]\n");

            tcl_file.set_num(tmp_4 - tmp_5,&tcl_file.output_V_id_V_depth);

            fprintf(tvin_output_V_id_V_pc.mFile, "%d\n", tmp_4 - tmp_5);

            fprintf(tvin_output_V_id_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_id_V.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_dest_V.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(tvin_output_V_dest_V_pc.mFile, "[[transaction]] %d\n", AESL_transaction);

            fprintf(AESL_c_tvout.mFile, "[output_V_dest_V]\n");

            for (int i = tmp_5; i < tmp_4; i++) {

                
                    fprintf(AESL_c_tvout.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].dest).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(AESL_c_tvout.mFile, "0");

                    if(tmp_3[(i)/1].dest == 0) 

                    fprintf(AESL_c_tvout.mFile, "\n");

                    else

                    fprintf(AESL_c_tvout.mFile, "%s\n", (tmp_3[(i)/1].dest).to_string(16).c_str());


                
                    fprintf(tvout_output_V_dest_V.mFile, "0x");

                    leading_zero = (tmp_3[(i)/1].dest).countLeadingZeros();

                    if( leading_zero >= 1 % 4 && leading_zero != 0)

                    fprintf(tvout_output_V_dest_V.mFile, "0");

                    if(tmp_3[(i)/1].dest == 0) 

                    fprintf(tvout_output_V_dest_V.mFile, "\n");

                    else

                    fprintf(tvout_output_V_dest_V.mFile, "%s\n", (tmp_3[(i)/1].dest).to_string(16).c_str());

            }

            fprintf(AESL_c_tvout.mFile, "[/output_V_dest_V]\n");

            tcl_file.set_num(tmp_4 - tmp_5,&tcl_file.output_V_dest_V_depth);

            fprintf(tvin_output_V_dest_V_pc.mFile, "%d\n", tmp_4 - tmp_5);

            fprintf(tvin_output_V_dest_V_pc.mFile, "[[/transaction]] \n");

            fprintf(tvout_output_V_dest_V.mFile, "[[/transaction]] \n");

            for (int i = 0; i < tmp_4; i++) {

                output.write(tmp_3[i]);

            }

        fprintf(AESL_c_tvout.mFile, "[[/transaction]] \n\n\n", AESL_transaction);

        AESL_transaction++;

        tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

    }
}


