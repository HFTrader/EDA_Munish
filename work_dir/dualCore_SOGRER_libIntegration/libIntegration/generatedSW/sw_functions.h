// this SW module would be generated by the code generator during the library integration step

// it will simply merge all the individual SW modules being provided by the HA IP suppliers
// this module would be provided to system architect which he can use to build his embedded application on the GRIP generated SoC


// TODO: auto generate this module having sufficient documentation for using the API!!


#ifndef __SW_FUNCTIONS__
#define __SW_FUNCTIONS__



// using the pure SW implementations of each of IP's functionality..these files will be provided by IP supplier
#include "/nfs/TUEIEDAprojects/SystemDesign/work/zynq/mamatha/uzair_sharif/EDA_Munish/work_dir/dualCore_SOGRER_libIntegration/HA_IPs/grayscaleIP/SW/SW_implementation/GrayscaleIP_SW.h"


// this would be provided by the GRIP after generating a specific SoC
// this config file would let this module know about the presence/absencse of HA to do a particular processing task
// NOTE: in this module the "#define *_HA" should be matched with "SoC_config.h" provided defines........so that GRIP guy and library integration guy should agree on the same name for compatibilty....for now using the convention "<IP_Name>_HA" 
// e.g for grayscale filtering if the IP is named Grayscale then both SoC_config.h and this module should use "GRAYSCALE_HA" to refer to this filter
#include "SoC_config.h"  

#include "HardwareAccelerators_API.h"






// API for Application Developer to perform data processing
void Grayscale_processInit(XScuGic *InterruptController, unsigned short frameRows, unsigned short frameCols, unsigned long CONTROL_BUS_BASEADDRESS, unsigned long VDMA_BASEADDR, unsigned int VDMA_INTR_ID);            
// must be called once before using Grayscale_process() method if there is atleast one HA in the design to make use of it for processing
// if there is no Grayscale HA in the design then don't call this method
// if there are 'N' HAs of this IP in the SoC design then you should call this method 'N' times before using Grayscale_process method to make use of all 'N' HAs for processing..in each function call use the HA specific parameters (uppercase parameters!!) from SoC_config module for a specific HA instance
// the application developer can have this info about presence/absence of a particular HA as well as their number from SoC_config

void Grayscale_process(unsigned long ImgIn_BaseAddr,unsigned long ImgOut_BaseAddr,unsigned short width, unsigned short height, unsigned short horizontalActiveTime);











// driver instances for Grayscale_HA
#if NUM_GRAYSCALE_HA != 0
    XConvert_to_gray GrayscaleFilters[NUM_GRAYSCALE_HA];
#endif



#endif










