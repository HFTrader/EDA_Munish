#include "function.h"

// driver instances for Grayscale_HA
Grayscale_R0_DriverInstance Driver[NUM_INSTANCES];

void Grayscale_R0_init(IntCntrl_t *InterruptController, unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short horizontalActiveTime, unsigned short verticalActiveTime) {
    Driver[0]._GrayscaleIP_DriverInstance.baseaddr = IP_BASEADDR;
    Driver[0]._GrayscaleIP_DriverInstance.intr_id = IP_INTRID;
    Driver[0]._GrayscaleIP_DriverInstance.busy = 0;
    Grayscale_R0_initialize(&Driver[0], InterruptController, ImgIn_BaseAddr, ImgOutBaseAddr, width, height, horizontalActiveTime, verticalActiveTime);
}

int Rule0_func(unsigned long ImgIn_BaseAddr, unsigned long ImgOut_BaseAddr, unsigned short width, unsigned short height, unsigned short horizontalActiveTime, unsigned short verticalActiveTime) {
#if NUM_INSTANCES == 0
    return 0;
#else
    int idx;    
    // seeing if Grayscale filtering for current captured frame can be done on this Grayscale Rule system    
    for (idx = 0; idx<NUM_INSTANCES; idx++) {
        if (isBusy(&Driver[idx]) == 0) {
            start(&Driver[idx], ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime, verticalActiveTime);
            while(isBusy(&Driver[idx]) == 1);
            return 1;
        }
    }    
    
    return 0;
#endif
}









