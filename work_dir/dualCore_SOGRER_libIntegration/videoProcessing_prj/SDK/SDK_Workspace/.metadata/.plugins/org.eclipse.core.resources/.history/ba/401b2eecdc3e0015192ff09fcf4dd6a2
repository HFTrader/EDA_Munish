// this driver corresponds to VDMA IP
// it is generated by modifying the auto-generated template

#include "VDMAIP_Driver.h"


// TODO: don't know how to initialize it properly...just resetting the vdma by seeing application code from Benjamin and hoping its in initialized state at startup
VDMAIPRegMap VDMAIPInitMode = {
								.MM2S_DMACR = {.offset = 0x00, .mask = 0x00000004, .value = 0x00000004},
								//      ...     //  NOTE: not shown here for simplicity
								.S2MM_DMACR = {.offset = 0x30, .mask = 0x00000004, .value = 0x00000004},
								.S2MM_DMASR = {.offset = 0x34, .mask = 0x00000000, .value = 0xffffffff},
								//      ...     //  NOTE: not shown here for simplicity
								.MM2S_VSIZE = {.offset = 0x50, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_HSIZE = {.offset = 0x54, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_FRMDLY_STRIDE  = {.offset = 0x58, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_START_ADDRESS1 = {.offset = 0x5c, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_START_ADDRESS2 = {.offset = 0x60, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_START_ADDRESS3 = {.offset = 0x64, .mask = 0x00000000, .value = 0xffffffff},
								//      ...     //  NOTE: not shown here for simplicity
								.S2MM_VSIZE = {.offset = 0xa0, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_HSIZE = {.offset = 0xa4, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_FRMDLY_STRIDE  = {.offset = 0xa8, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_START_ADDRESS1 = {.offset = 0xac, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_START_ADDRESS2 = {.offset = 0xb0, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_START_ADDRESS3 = {.offset = 0xb4, .mask = 0x00000000, .value = 0xffffffff}
								//      ...     //  NOTE: not shown here for simplicity
							  };


VDMAIPRegMap VDMAIPStartMode = {
								.MM2S_DMACR = {.offset = 0x00, .mask = 0xffffffff, .value = 0x00011003},
								//      ...     //  NOTE: not shown here for simplicity
								.S2MM_DMACR = {.offset = 0x30, .mask = 0xffffffff, .value = 0x00011003},
								.S2MM_DMASR = {.offset = 0x34, .mask = 0x00000000, .value = 0xffffffff},
								//      ...     //  NOTE: not shown here for simplicity
								.MM2S_VSIZE = {.offset = 0x50, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_HSIZE = {.offset = 0x54, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_FRMDLY_STRIDE  = {.offset = 0x58, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_START_ADDRESS1 = {.offset = 0x5c, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_START_ADDRESS2 = {.offset = 0x60, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_START_ADDRESS3 = {.offset = 0x64, .mask = 0x00000000, .value = 0xffffffff},
								//      ...     //  NOTE: not shown here for simplicity
								.S2MM_VSIZE = {.offset = 0xa0, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_HSIZE = {.offset = 0xa4, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_FRMDLY_STRIDE  = {.offset = 0xa8, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_START_ADDRESS1 = {.offset = 0xac, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_START_ADDRESS2 = {.offset = 0xb0, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_START_ADDRESS3 = {.offset = 0xb4, .mask = 0x00000000, .value = 0xffffffff}
								//      ...     //  NOTE: not shown here for simplicity
							  };


VDMAIPRegMap VDMAIPStopMode = {
								.MM2S_DMACR = {.offset = 0x00, .mask = 0x00000001, .value = 0x00000000},
								//      ...     //  NOTE: not shown here for simplicity
								.S2MM_DMACR = {.offset = 0x30, .mask = 0x00000001, .value = 0x00000000},
								.S2MM_DMASR = {.offset = 0x34, .mask = 0x00000000, .value = 0xffffffff},
								//      ...     //  NOTE: not shown here for simplicity
								.MM2S_VSIZE = {.offset = 0x50, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_HSIZE = {.offset = 0x54, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_FRMDLY_STRIDE  = {.offset = 0x58, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_START_ADDRESS1 = {.offset = 0x5c, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_START_ADDRESS2 = {.offset = 0x60, .mask = 0x00000000, .value = 0xffffffff},
								.MM2S_START_ADDRESS3 = {.offset = 0x64, .mask = 0x00000000, .value = 0xffffffff},
								//      ...     //  NOTE: not shown here for simplicity
								.S2MM_VSIZE = {.offset = 0xA0, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_HSIZE = {.offset = 0xA4, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_FRMDLY_STRIDE  = {.offset = 0xA8, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_START_ADDRESS1 = {.offset = 0xAc, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_START_ADDRESS2 = {.offset = 0xB0, .mask = 0x00000000, .value = 0xffffffff},
								.S2MM_START_ADDRESS3 = {.offset = 0xB4, .mask = 0x00000000, .value = 0xffffffff}
								//      ...     //  NOTE: not shown here for simplicity
						      };



static void localWriteReg(unsigned int addr, unsigned int mask, unsigned int value) {
    // only write to reg if mask != 0
    if ((mask | 0x0) != 0x0) {
        *((volatile unsigned int *)(addr)) = (*(volatile unsigned int *)(addr) & ~(mask)) | value;
    }
}


static unsigned int localReadReg(unsigned int addr) {
    return (unsigned int) *((volatile unsigned int *)(addr));
}


// updates the VDMA IP peripheral's memory mapped registers with content provided in mode 
static void SetHAMode(VDMAIPRegMap mode, unsigned int baseaddr) {
    localWriteReg(baseaddr + mode.MM2S_DMACR.offset, mode.MM2S_DMACR.mask, mode.MM2S_DMACR.value);
    //      ...     //  NOTE: not shown here for simplicity
    localWriteReg(baseaddr + mode.S2MM_DMACR.offset, mode.S2MM_DMACR.mask, mode.S2MM_DMACR.value);
    localWriteReg(baseaddr + mode.S2MM_DMASR.offset, mode.S2MM_DMASR.mask, mode.S2MM_DMASR.value);
    //      ...     //  NOTE: not shown here for simplicity    
    localWriteReg(baseaddr + mode.MM2S_VSIZE.offset, mode.MM2S_VSIZE.mask, mode.MM2S_VSIZE.value);        
    localWriteReg(baseaddr + mode.MM2S_HSIZE.offset, mode.MM2S_HSIZE.mask, mode.MM2S_HSIZE.value);        
    localWriteReg(baseaddr + mode.MM2S_FRMDLY_STRIDE.offset, mode.MM2S_FRMDLY_STRIDE.mask, mode.MM2S_FRMDLY_STRIDE.value);        
    localWriteReg(baseaddr + mode.MM2S_START_ADDRESS1.offset, mode.MM2S_START_ADDRESS1.mask, mode.MM2S_START_ADDRESS1.value);        
    localWriteReg(baseaddr + mode.MM2S_START_ADDRESS2.offset, mode.MM2S_START_ADDRESS2.mask, mode.MM2S_START_ADDRESS2.value);        
    localWriteReg(baseaddr + mode.MM2S_START_ADDRESS3.offset, mode.MM2S_START_ADDRESS3.mask, mode.MM2S_START_ADDRESS3.value);        
    //      ...     //  NOTE: not shown here for simplicity
    localWriteReg(baseaddr + mode.S2MM_VSIZE.offset, mode.S2MM_VSIZE.mask, mode.S2MM_VSIZE.value);        
    localWriteReg(baseaddr + mode.S2MM_HSIZE.offset, mode.S2MM_HSIZE.mask, mode.S2MM_HSIZE.value);        
    localWriteReg(baseaddr + mode.S2MM_FRMDLY_STRIDE.offset, mode.S2MM_FRMDLY_STRIDE.mask, mode.S2MM_FRMDLY_STRIDE.value);        
    localWriteReg(baseaddr + mode.S2MM_START_ADDRESS1.offset, mode.S2MM_START_ADDRESS1.mask, mode.S2MM_START_ADDRESS1.value);        
    localWriteReg(baseaddr + mode.S2MM_START_ADDRESS2.offset, mode.S2MM_START_ADDRESS2.mask, mode.S2MM_START_ADDRESS2.value);        
    localWriteReg(baseaddr + mode.S2MM_START_ADDRESS3.offset, mode.S2MM_START_ADDRESS3.mask, mode.S2MM_START_ADDRESS3.value);        
    //      ...     //  NOTE: not shown here for simplicity                           
}




void VDMAIP_Driver_initialize(VDMAIPDriverInstance *InstancePtr) {    
	SetHAMode(VDMAIPInitMode, InstancePtr->baseaddr);
}




void VDMAIP_Driver_start(VDMAIPDriverInstance *InstancePtr, unsigned long ImgIn_BaseAddr,unsigned long ImgOut_BaseAddr,unsigned short width, unsigned short height, unsigned short horizontalActiveTime, unsigned short verticalActiveTime) {
/*	VDMAIPStartMode.MM2S_VSIZE.offset = 0x50;
	VDMAIPStartMode.MM2S_VSIZE.mask = 0xffffffff;
	VDMAIPStartMode.MM2S_VSIZE.value = verticalActiveTime;

	VDMAIPStartMode.MM2S_HSIZE.offset = 0x54;
	VDMAIPStartMode.MM2S_HSIZE.mask = 0xffffffff;
	VDMAIPStartMode.MM2S_HSIZE.value = horizontalActiveTime*4;

	VDMAIPStartMode.MM2S_FRMDLY_STRIDE.offset = 0x58;
	VDMAIPStartMode.MM2S_FRMDLY_STRIDE.mask = 0xffffffff;
	VDMAIPStartMode.MM2S_FRMDLY_STRIDE.value = horizontalActiveTime*4;

	VDMAIPStartMode.MM2S_START_ADDRESS1.offset = 0x5c;
	VDMAIPStartMode.MM2S_START_ADDRESS1.mask = 0xffffffff;
	VDMAIPStartMode.MM2S_START_ADDRESS1.value = ImgIn_BaseAddr;

	VDMAIPStartMode.MM2S_START_ADDRESS2.offset = 0x60;
	VDMAIPStartMode.MM2S_START_ADDRESS2.mask = 0xffffffff;
	VDMAIPStartMode.MM2S_START_ADDRESS2.value = ImgIn_BaseAddr;

	VDMAIPStartMode.MM2S_START_ADDRESS3.offset = 0x64;
	VDMAIPStartMode.MM2S_START_ADDRESS3.mask = 0xffffffff;
	VDMAIPStartMode.MM2S_START_ADDRESS3.value = ImgIn_BaseAddr;

	VDMAIPStartMode.S2MM_VSIZE.offset = 0xa0;
	VDMAIPStartMode.S2MM_VSIZE.mask = 0xffffffff;
	VDMAIPStartMode.S2MM_VSIZE.value = verticalActiveTime;

	VDMAIPStartMode.S2MM_HSIZE.offset = 0xa4;
	VDMAIPStartMode.S2MM_HSIZE.mask = 0xffffffff;
	VDMAIPStartMode.S2MM_HSIZE.value = horizontalActiveTime*4;

	VDMAIPStartMode.S2MM_FRMDLY_STRIDE.offset = 0xa8;
	VDMAIPStartMode.S2MM_FRMDLY_STRIDE.mask = 0xffffffff;
	VDMAIPStartMode.S2MM_FRMDLY_STRIDE.value = horizontalActiveTime*4;

	VDMAIPStartMode.S2MM_START_ADDRESS1.offset = 0xac;
	VDMAIPStartMode.S2MM_START_ADDRESS1.mask = 0xffffffff;
	VDMAIPStartMode.S2MM_START_ADDRESS1.value = ImgOut_BaseAddr;

	VDMAIPStartMode.S2MM_START_ADDRESS2.offset = 0xb0;
	VDMAIPStartMode.S2MM_START_ADDRESS2.mask = 0xffffffff;
	VDMAIPStartMode.S2MM_START_ADDRESS2.value = ImgOut_BaseAddr;

	VDMAIPStartMode.S2MM_START_ADDRESS3.offset = 0xb4;
	VDMAIPStartMode.S2MM_START_ADDRESS3.mask = 0xffffffff;
	VDMAIPStartMode.S2MM_START_ADDRESS3.value = ImgOut_BaseAddr;


    SetHAMode(VDMAIPStartMode, InstancePtr->baseaddr);*/

}



void VDMAIP_Driver_stop(VDMAIPDriverInstance *InstancePtr) {
    SetHAMode(VDMAIPStopMode, InstancePtr->baseaddr);
}


bool VDMAIP_Driver_isBusy(VDMAIPDriverInstance *InstancePtr) {    
    // if S2MM channel is idle or halted then return '0' else busy so return '1'
    return (bool) !(((localReadReg(InstancePtr->baseaddr + VDMAIP_BUSY_STATUS_REG_offset) >> VDMAIP_BUSY_STATUS_REG_bit) & 1) | ((localReadReg(InstancePtr->baseaddr + VDMAIP_BUSY_STATUS_REG_offset) >> 0) & 1)) ;
}











// NOTE: everything seems to be auto-generatable!!












