// this driver corresponds to Grayscale IP configuration corresponding to GRIP Rule 1 i.e Grayscale IP integrated with AXI-VDMA 
// it is generated by modifying the auto-generated template

#include "GrayscaleIP_Rule1Driver.h"




void localWriteReg(unsigned int addr, unsigned int mask, unsigned int value) {
    // only write to reg if mask != 0
    if ((mask | 0x0) != 0x0) {
        *((volatile unsigned int *)(addr)) = (*(volatile unsigned int *)(addr) & ~(mask)) | value;
    }
}


unsigned int localReadReg(unsigned int addr) {
    return (unsigned int) *((volatile unsigned int *)(addr));
}


// updates the Grayscale IP peripheral's memory mapped registers with content provided in mode 
void SetHAMode(GrayscaleIPRegMap mode, unsigned int baseaddr) {
	localWriteReg(baseaddr + mode.AP_CTRL.offset, mode.AP_CTRL.mask, mode.AP_CTRL.value);
	localWriteReg(baseaddr + mode.GIE.offset, mode.GIE.mask, mode.GIE.value);
	localWriteReg(baseaddr + mode.IER.offset, mode.IER.mask, mode.IER.value);
	localWriteReg(baseaddr + mode.ISR.offset, mode.ISR.mask, mode.ISR.value);
	localWriteReg(baseaddr + mode.ROWS_DATA.offset, mode.ROWS_DATA.mask, mode.ROWS_DATA.value);
	localWriteReg(baseaddr + mode.COLS_DATA.offset, mode.COLS_DATA.mask, mode.COLS_DATA.value);
}


void GrayscaleIP_Driver_initialize(GrayscaleIPDriverInstance *InstancePtr, unsigned long ImgIn_BaseAddr,unsigned long ImgOut_BaseAddr,unsigned short width, unsigned short height, unsigned short horizontalActiveTime, unsigned short verticalActiveTime) {
    // initializing GrayscaleIP
	GrayscaleIPInitMode.ROWS_DATA.mask = 0xffffffff;
	GrayscaleIPInitMode.ROWS_DATA.value = width;

	GrayscaleIPInitMode.COLS_DATA.mask = 0xffffffff;
	GrayscaleIPInitMode.COLS_DATA.value = height;

	SetHAMode(GrayscaleIPInitMode, InstancePtr->baseaddr);

    // for this rule we also need to initialize the connected VDMA as well
    VDMAIP_Driver_initialize(&InstancePtr->vdmaDriver);
}



void GrayscaleIP_Driver_start(GrayscaleIPDriverInstance *InstancePtr, unsigned long ImgIn_BaseAddr,unsigned long ImgOut_BaseAddr,unsigned short width, unsigned short height, unsigned short horizontalActiveTime, unsigned short verticalActiveTime) {
    // following is not needed as we haven't updated any register
    // SetHAMode(StartMode, InstancePtr->baseaddr);        
    
    // starting the VDMA whose driver will configure its MEM2DEV path as well as DEV2MEM path
    VDMAIP_Driver_start(&InstancePtr->vdmaDriver, ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime, verticalActiveTime);
}



void GrayscaleIP_Driver_stop(GrayscaleIPDriverInstance *InstancePtr) {
    // stopping GrayscaleIP
	SetHAMode(GrayscaleIPStopMode, InstancePtr->baseaddr);
    
    // stopping VDMA as well
    VDMAIP_Driver_stop(&InstancePtr->vdmaDriver);
}


bool GrayscaleIP_Driver_isBusy(GrayscaleIPDriverInstance *InstancePtr) {    
    // not using VDMA S2MM busy signal for now as documentation states we have to use scatter-gather mode to read in Idle
    // TODO: see if you can read in VDMA busy signal as well then driver would be more complete...i.e return busy status = '1' only if both the IP as well as the VDMA S2MM are free
    return (bool) !((localReadReg(InstancePtr->baseaddr + GRAYSCALEIP_BUSY_STATUS_REG_offset) >> GRAYSCALEIP_BUSY_STATUS_REG_bit) & 1);
}















