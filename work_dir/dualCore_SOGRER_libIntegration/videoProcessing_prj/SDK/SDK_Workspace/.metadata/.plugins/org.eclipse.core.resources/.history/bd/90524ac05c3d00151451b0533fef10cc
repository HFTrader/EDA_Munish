// this driver corresponds to VDMA IP
// it is generated by modifying the auto-generated template

#include "VDMAIP_Driver.h"



void localWriteReg(unsigned int addr, unsigned int mask, unsigned int value) {
    // only write to reg if mask != 0
    if ((mask | 0x0) != 0x0) {
        *((volatile unsigned int *)(addr)) = (*(volatile unsigned int *)(addr) & ~(mask)) | value;
    }
}


unsigned int localReadReg(unsigned int addr) {
    return (unsigned int) *((volatile unsigned int *)(addr));
}


// updates the VDMA IP peripheral's memory mapped registers with content provided in mode 
void SetHAMode(RegMap mode, unsigned int baseaddr) {
    localWriteReg(baseaddr + mode.MM2S_DMACR.offset, mode.MM2S_DMACR.mask, mode.MM2S_DMACR.value);
    //      ...     //  NOTE: not shown here for simplicity
    localWriteReg(baseaddr + mode.S2MM_DMACR.offset, mode.S2MM_DMACR.mask, mode.S2MM_DMACR.value);
    localWriteReg(baseaddr + mode.S2MM_DMASR.offset, mode.S2MM_DMASR.mask, mode.S2MM_DMASR.value);
    //      ...     //  NOTE: not shown here for simplicity    
    localWriteReg(baseaddr + mode.MM2S_VSIZE.offset, mode.MM2S_VSIZE.mask, mode.MM2S_VSIZE.value);        
    localWriteReg(baseaddr + mode.MM2S_HSIZE.offset, mode.MM2S_HSIZE.mask, mode.MM2S_HSIZE.value);        
    localWriteReg(baseaddr + mode.MM2S_FRMDLY_STRIDE.offset, mode.MM2S_FRMDLY_STRIDE.mask, mode.MM2S_FRMDLY_STRIDE.value);        
    localWriteReg(baseaddr + mode.MM2S_START_ADDRESS1.offset, mode.MM2S_START_ADDRESS1.mask, mode.MM2S_START_ADDRESS1.value);        
    localWriteReg(baseaddr + mode.MM2S_START_ADDRESS2.offset, mode.MM2S_START_ADDRESS2.mask, mode.MM2S_START_ADDRESS2.value);        
    localWriteReg(baseaddr + mode.MM2S_START_ADDRESS3.offset, mode.MM2S_START_ADDRESS3.mask, mode.MM2S_START_ADDRESS3.value);        
    //      ...     //  NOTE: not shown here for simplicity
    localWriteReg(baseaddr + mode.S2MM_VSIZE.offset, mode.S2MM_VSIZE.mask, mode.S2MM_VSIZE.value);        
    localWriteReg(baseaddr + mode.S2MM_HSIZE.offset, mode.S2MM_HSIZE.mask, mode.S2MM_HSIZE.value);        
    localWriteReg(baseaddr + mode.S2MM_FRMDLY_STRIDE.offset, mode.S2MM_FRMDLY_STRIDE.mask, mode.S2MM_FRMDLY_STRIDE.value);        
    localWriteReg(baseaddr + mode.S2MM_START_ADDRESS1.offset, mode.S2MM_START_ADDRESS1.mask, mode.S2MM_START_ADDRESS1.value);        
    localWriteReg(baseaddr + mode.S2MM_START_ADDRESS2.offset, mode.S2MM_START_ADDRESS2.mask, mode.S2MM_START_ADDRESS2.value);        
    localWriteReg(baseaddr + mode.S2MM_START_ADDRESS3.offset, mode.S2MM_START_ADDRESS3.mask, mode.S2MM_START_ADDRESS3.value);        
    //      ...     //  NOTE: not shown here for simplicity                           
}




void VDMAIP_Driver_initialize(VDMAIPDriverInstance *InstancePtr) {    
    InitMode.MM2S_START_ADDRESS1.offset = 0x5c;
    InitMode.MM2S_START_ADDRESS1.mask = 0xffffffff;
    InitMode.MM2S_START_ADDRESS1.value = InstancePtr->baseaddr;

    InitMode.MM2S_START_ADDRESS2.offset = 0x60;
    InitMode.MM2S_START_ADDRESS2.mask = 0xffffffff;
    InitMode.MM2S_START_ADDRESS2.value = InstancePtr->baseaddr;

    InitMode.MM2S_START_ADDRESS3.offset = 0x64;
    InitMode.MM2S_START_ADDRESS3.mask = 0xffffffff;
    InitMode.MM2S_START_ADDRESS3.value = InstancePtr->baseaddr;

    InitMode.S2MM_START_ADDRESS1.offset = 0xac;
    InitMode.S2MM_START_ADDRESS1.mask = 0xffffffff;
    InitMode.S2MM_START_ADDRESS1.value = InstancePtr->baseaddr;

    InitMode.S2MM_START_ADDRESS2.offset = 0xb0;
    InitMode.S2MM_START_ADDRESS2.mask = 0xffffffff;
    InitMode.S2MM_START_ADDRESS2.value = InstancePtr->baseaddr;

    InitMode.S2MM_START_ADDRESS3.offset = 0xb4;
    InitMode.S2MM_START_ADDRESS3.mask = 0xffffffff;
    InitMode.S2MM_START_ADDRESS3.value = InstancePtr->baseaddr;

    VDMAIP_Driver_SetHAMode(InitMode, InstancePtr->baseaddr);
}




void GrayscaleIP_Rule1Driver_start(VDMAIPDriverInstance *InstancePtr, unsigned long ImgIn_BaseAddr,unsigned long ImgOut_BaseAddr,unsigned short width, unsigned short height, unsigned short horizontalActiveTime, unsigned short verticalActiveTime) {
    StartMode.MM2S_VSIZE.offset = 0x50;
    StartMode.MM2S_VSIZE.mask = 0xffffffff;
	StartMode.MM2S_VSIZE.offset = verticalActiveTime;

    = {0x50, 0xffffffff, verticalActiveTime};
    StartMode.MM2S_HSIZE = {0x54, 0xffffffff, horizontalActiveTime*4};
    StartMode.MM2S_FRMDLY_STRIDE = {0x58, 0xffffffff, horizontalActiveTime*4};
    StartMode.S2MM_VSIZE = {0xa0, 0xffffffff, verticalActiveTime};
    StartMode.S2MM_HSIZE = {0xa4, 0xffffffff, horizontalActiveTime*4};
    StartMode.S2MM_FRMDLY_STRIDE = {0xa8, 0xffffffff, horizontalActiveTime*4};
    SetHAMode(StartMode, InstancePtr->baseaddr);
}



void VDMAIP_Driver_stop(VDMAIPDriverInstance *InstancePtr) {
    SetHAMode(StopMode, InstancePtr->baseaddr);
}


bool VDMAIP_Driver_isBusy(VDMAIPDriverInstance *InstancePtr) {    
    // if S2MM channel is idle or halted then return '0' else busy so return '1'
    return (bool) !(((localReadReg(InstancePtr->baseaddr + BUSY_STATUS_REG_offset) >> BUSY_STATUS_REG_bit) & 1) | ((localReadReg(InstancePtr->baseaddr + BUSY_STATUS_REG_offset) >> 0) & 1)) ;
}











// NOTE: everything seems to be auto-generatable!!












