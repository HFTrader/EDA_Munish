// this file is going to be auto-generated after reading in the IP_SW and all of IP_Rule*Driver modules
// it will use the configuration flags provided in config file

// this file provides API functionality to application developer to perform HA-aware grayscale filtering on captured video



#include "GrayscaleIP_func.h"



void ConvToGray_func(unsigned long ImgIn_BaseAddr,unsigned long ImgOut_BaseAddr,unsigned short width, unsigned short height, unsigned short horizontalActiveTime, unsigned short verticalActiveTime) {
#if NUM_GRAYSCALEIP_INSTANCES != 0
    static bool driverInit = 0;
    int i=0;
    if (driverInit == 0) {
        for (i=0; i<NUM_GRAYSCALEIP_INSTANCES; i++) {
        	if (GRAYSCALEIP_INFO[i].grip_rule == 1) {
        		GrayscaleIPRule1Driver[i].baseaddr = GRAYSCALEIP_INFO[i].baseaddr;
        		GrayscaleIPRule1Driver[i].vdmaDriver.baseaddr = GRAYSCALEIP_INFO[i].vdma_baseaddr;
        	} else if (GRAYSCALEIP_INFO[i].grip_rule == 2) {
        		GrayscaleIPRule2Driver[i].baseaddr = GRAYSCALEIP_INFO[i].baseaddr;
        	}
        }
               
        driverInit = 1;
    }
#endif

#if NUM_GRAYSCALEIP_INSTANCES == 0                      // no IP module in design so using SW implementation
    ConvToGray(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime, verticalActiveTime);
#else
    int j;
    for (j=0; j<NUM_GRAYSCALEIP_INSTANCES; j++) {
    	if (GrayscaleIPRule1Driver[j].grip_rule == 1) {
    		if (GrayscaleIP_Rule1Driver_isBusy(&GrayscaleIPRule1Driver[j]) == 0) {      // a free IP instance found
				GrayscaleIP_Rule1Driver_start(&GrayscaleIPRule1Driver[j], ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime, verticalActiveTime);
				while(GrayscaleIP_Rule1Driver_isBusy(&GrayscaleIPRule1Driver[j]) == 1);
				return;
			} else if (GrayscaleIP_Rule2Driveer_isBusy(&GrayscaleIPRule2Driver[j] == 0) {
				GrayscaleIP_Rule2Driver_start(&GrayscaleIPRule2Driver[j], ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime, verticalActiveTime);
				while(GrayscaleIP_Rule2Driver_isBusy(&GrayscaleIPRule2Driver[j]) == 1);
				return;
			}
    	}

    }    
    ConvToGray(ImgIn_BaseAddr, ImgOut_BaseAddr, width, height, horizontalActiveTime, verticalActiveTime); 
#endif
}




