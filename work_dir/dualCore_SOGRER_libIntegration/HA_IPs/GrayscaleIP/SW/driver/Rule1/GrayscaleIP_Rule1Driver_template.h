// this is a template file which will be auto-generated by GRIP framework by using the IP-Xact description provided by this IP corresponding to Rule1 (Grayscale filter + VDMA) 
// The IP supplier can then fill in this template to generate his driver targeting a specific platform

// NOTE: for now it is simulated i.e it is a sample representation of the actual template file which doesnt contain all the registers of this IP



#ifndef __GRAYSCALEIP_RULE1DRIVER_TEMPLATE_H__
#define __GRAYSCALEIP_RULE1DRIVER_TEMPLATE_H__


#include "GrayscaleIP_VDMA_Driver.h"


#define bool unsigned char


// all the hardware related info needed by the driver functions should be provided in this struct
typedef struct {
    unsigned int baseaddr;
    GRAYSCALEIP_VDMADriverInstance vdmaDriver;
    unsigned int grip_rule;
} GrayscaleIPRule1DriverInstance;


typedef struct {
    unsigned int offset;
    unsigned int value;
    unsigned int mask;
} GrayscaleIPRule1RegType;



// register map for Grayscale IP peripheral registers
typedef struct {
	GrayscaleIPRule1RegType AP_CTRL;
	GrayscaleIPRule1RegType GIE;
	GrayscaleIPRule1RegType IER;
	GrayscaleIPRule1RegType ISR;
	GrayscaleIPRule1RegType ROWS_DATA;
	GrayscaleIPRule1RegType COLS_DATA;
} GrayscaleIPRule1RegMap;



// the IP supplier should modify the contents of below register to be able to monitor the status of IP processing
#define GRAYSCALEIPRULE1_BUSY_STATUS_REG_offset 0xff
#define GRAYSCALEIPRULE1_BUSY_STATUS_REG_bit 31          // little endian convention [31:0]



// API for GrayscaleIP_Driver to use if this rule is applied by GRIP
void GrayscaleIP_Rule1Driver_initialize(GrayscaleIPRule1DriverInstance *InstancePtr);
void GrayscaleIP_Rule1Driver_start(GrayscaleIPRule1DriverInstance *InstancePtr);
void GrayscaleIP_Rule1Driver_stop(GrayscaleIPRule1DriverInstance *InstancePtr);
bool GrayscaleIP_Rule1Driver_isBusy(GrayscaleIPRule1DriverInstance *InstancePtr);



#endif




// NOTE: everything seems to be auto-generatable!!











