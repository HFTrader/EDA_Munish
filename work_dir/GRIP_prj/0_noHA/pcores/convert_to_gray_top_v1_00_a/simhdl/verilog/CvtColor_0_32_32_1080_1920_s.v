// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CvtColor_0_32_32_1080_1920_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_rows_V_read,
        p_src_cols_V_read,
        p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n,
        p_dst_data_stream_2_V_write
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] p_src_rows_V_read;
input  [11:0] p_src_cols_V_read;
input  [7:0] p_src_data_stream_0_V_dout;
input   p_src_data_stream_0_V_empty_n;
output   p_src_data_stream_0_V_read;
input  [7:0] p_src_data_stream_1_V_dout;
input   p_src_data_stream_1_V_empty_n;
output   p_src_data_stream_1_V_read;
input  [7:0] p_src_data_stream_2_V_dout;
input   p_src_data_stream_2_V_empty_n;
output   p_src_data_stream_2_V_read;
output  [7:0] p_dst_data_stream_0_V_din;
input   p_dst_data_stream_0_V_full_n;
output   p_dst_data_stream_0_V_write;
output  [7:0] p_dst_data_stream_1_V_din;
input   p_dst_data_stream_1_V_full_n;
output   p_dst_data_stream_1_V_write;
output  [7:0] p_dst_data_stream_2_V_din;
input   p_dst_data_stream_2_V_full_n;
output   p_dst_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_data_stream_0_V_read;
reg p_src_data_stream_1_V_read;
reg p_src_data_stream_2_V_read;
reg p_dst_data_stream_0_V_write;
reg p_dst_data_stream_1_V_write;
reg p_dst_data_stream_2_V_write;
reg    ap_done_reg = 1'b0;
reg   [1:0] ap_CS_fsm = 2'b00;
reg   [11:0] j_reg_148;
reg    ap_sig_bdd_56;
wire   [11:0] i_1_fu_165_p2;
reg   [11:0] i_1_reg_295;
wire   [0:0] exitcond_fu_171_p2;
reg   [0:0] exitcond_reg_300;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_80;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_300_pp0_it2;
reg    ap_sig_bdd_96;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_300_pp0_it1;
wire   [11:0] j_1_fu_176_p2;
wire   [26:0] p_Val2_s_fu_186_p2;
reg   [26:0] p_Val2_s_reg_309;
wire   [28:0] p_Val2_1_fu_196_p2;
reg   [28:0] p_Val2_1_reg_314;
wire   [27:0] p_Val2_2_fu_206_p2;
reg   [27:0] p_Val2_2_reg_319;
reg   [7:0] tmp_2_reg_324;
reg   [0:0] tmp_10_reg_329;
wire   [0:0] exitcond8_fu_160_p2;
reg   [11:0] i_reg_137;
wire   [7:0] tmp_1_fu_271_p3;
wire   [7:0] p_Val2_s_fu_186_p0;
wire   [7:0] p_Val2_1_fu_196_p0;
wire   [7:0] p_Val2_2_fu_206_p0;
wire   [27:0] tmp_cast_fu_212_p1;
wire   [27:0] p_Val2_3_fu_215_p2;
wire   [28:0] tmp_8_cast_fu_220_p1;
wire   [28:0] p_Val2_4_fu_224_p2;
wire   [8:0] p_Val2_5_cast_fu_247_p1;
wire   [8:0] tmp_11_cast_fu_250_p1;
wire   [8:0] p_Val2_6_fu_253_p2;
wire   [0:0] tmp_11_fu_259_p3;
wire   [7:0] tmp_12_fu_267_p1;
reg   [1:0] ap_NS_fsm;
wire   [28:0] p_Val2_1_fu_196_p00;
wire   [27:0] p_Val2_2_fu_206_p00;
wire   [26:0] p_Val2_s_fu_186_p00;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_pp0_stg0_fsm_2 = 2'b10;
parameter    ap_ST_st7_fsm_3 = 2'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv27_3A5E3 = 27'b111010010111100011;
parameter    ap_const_lv29_12C8B4 = 29'b100101100100010110100;
parameter    ap_const_lv28_99168 = 28'b10011001000101101000;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond8_fu_160_p2))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(exitcond_fu_171_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond8_fu_160_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & (exitcond_fu_171_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond8_fu_160_p2)) | ((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(exitcond_fu_171_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond8_fu_160_p2))) begin
            ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_3 == ap_CS_fsm)) begin
        i_reg_137 <= i_1_reg_295;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_56)) begin
        i_reg_137 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & (exitcond_fu_171_p2 == ap_const_lv1_0))) begin
        j_reg_148 <= j_1_fu_176_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond8_fu_160_p2))) begin
        j_reg_148 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        ap_reg_ppstg_exitcond_reg_300_pp0_it1 <= exitcond_reg_300;
        ap_reg_ppstg_exitcond_reg_300_pp0_it2 <= ap_reg_ppstg_exitcond_reg_300_pp0_it1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        exitcond_reg_300 <= exitcond_fu_171_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        i_1_reg_295 <= i_1_fu_165_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (exitcond_reg_300 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        p_Val2_1_reg_314[2] <= p_Val2_1_fu_196_p2[2];
p_Val2_1_reg_314[3] <= p_Val2_1_fu_196_p2[3];
p_Val2_1_reg_314[4] <= p_Val2_1_fu_196_p2[4];
p_Val2_1_reg_314[5] <= p_Val2_1_fu_196_p2[5];
p_Val2_1_reg_314[6] <= p_Val2_1_fu_196_p2[6];
p_Val2_1_reg_314[7] <= p_Val2_1_fu_196_p2[7];
p_Val2_1_reg_314[8] <= p_Val2_1_fu_196_p2[8];
p_Val2_1_reg_314[9] <= p_Val2_1_fu_196_p2[9];
p_Val2_1_reg_314[10] <= p_Val2_1_fu_196_p2[10];
p_Val2_1_reg_314[11] <= p_Val2_1_fu_196_p2[11];
p_Val2_1_reg_314[12] <= p_Val2_1_fu_196_p2[12];
p_Val2_1_reg_314[13] <= p_Val2_1_fu_196_p2[13];
p_Val2_1_reg_314[14] <= p_Val2_1_fu_196_p2[14];
p_Val2_1_reg_314[15] <= p_Val2_1_fu_196_p2[15];
p_Val2_1_reg_314[16] <= p_Val2_1_fu_196_p2[16];
p_Val2_1_reg_314[17] <= p_Val2_1_fu_196_p2[17];
p_Val2_1_reg_314[18] <= p_Val2_1_fu_196_p2[18];
p_Val2_1_reg_314[19] <= p_Val2_1_fu_196_p2[19];
p_Val2_1_reg_314[20] <= p_Val2_1_fu_196_p2[20];
p_Val2_1_reg_314[21] <= p_Val2_1_fu_196_p2[21];
p_Val2_1_reg_314[22] <= p_Val2_1_fu_196_p2[22];
p_Val2_1_reg_314[23] <= p_Val2_1_fu_196_p2[23];
p_Val2_1_reg_314[24] <= p_Val2_1_fu_196_p2[24];
p_Val2_1_reg_314[25] <= p_Val2_1_fu_196_p2[25];
p_Val2_1_reg_314[26] <= p_Val2_1_fu_196_p2[26];
p_Val2_1_reg_314[27] <= p_Val2_1_fu_196_p2[27];
p_Val2_1_reg_314[28] <= p_Val2_1_fu_196_p2[28];
        p_Val2_2_reg_319[3] <= p_Val2_2_fu_206_p2[3];
p_Val2_2_reg_319[4] <= p_Val2_2_fu_206_p2[4];
p_Val2_2_reg_319[5] <= p_Val2_2_fu_206_p2[5];
p_Val2_2_reg_319[6] <= p_Val2_2_fu_206_p2[6];
p_Val2_2_reg_319[7] <= p_Val2_2_fu_206_p2[7];
p_Val2_2_reg_319[8] <= p_Val2_2_fu_206_p2[8];
p_Val2_2_reg_319[9] <= p_Val2_2_fu_206_p2[9];
p_Val2_2_reg_319[10] <= p_Val2_2_fu_206_p2[10];
p_Val2_2_reg_319[11] <= p_Val2_2_fu_206_p2[11];
p_Val2_2_reg_319[12] <= p_Val2_2_fu_206_p2[12];
p_Val2_2_reg_319[13] <= p_Val2_2_fu_206_p2[13];
p_Val2_2_reg_319[14] <= p_Val2_2_fu_206_p2[14];
p_Val2_2_reg_319[15] <= p_Val2_2_fu_206_p2[15];
p_Val2_2_reg_319[16] <= p_Val2_2_fu_206_p2[16];
p_Val2_2_reg_319[17] <= p_Val2_2_fu_206_p2[17];
p_Val2_2_reg_319[18] <= p_Val2_2_fu_206_p2[18];
p_Val2_2_reg_319[19] <= p_Val2_2_fu_206_p2[19];
p_Val2_2_reg_319[20] <= p_Val2_2_fu_206_p2[20];
p_Val2_2_reg_319[21] <= p_Val2_2_fu_206_p2[21];
p_Val2_2_reg_319[22] <= p_Val2_2_fu_206_p2[22];
p_Val2_2_reg_319[23] <= p_Val2_2_fu_206_p2[23];
p_Val2_2_reg_319[24] <= p_Val2_2_fu_206_p2[24];
p_Val2_2_reg_319[25] <= p_Val2_2_fu_206_p2[25];
p_Val2_2_reg_319[26] <= p_Val2_2_fu_206_p2[26];
p_Val2_2_reg_319[27] <= p_Val2_2_fu_206_p2[27];
        p_Val2_s_reg_309 <= p_Val2_s_fu_186_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_300_pp0_it1))) begin
        tmp_10_reg_329 <= p_Val2_4_fu_224_p2[ap_const_lv32_14];
        tmp_2_reg_324 <= {{p_Val2_4_fu_224_p2[ap_const_lv32_1C : ap_const_lv32_15]}};
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_CS_fsm or exitcond8_fu_160_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond8_fu_160_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond8_fu_160_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond8_fu_160_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// p_dst_data_stream_0_V_write assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_80 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond_reg_300_pp0_it2 or ap_sig_bdd_96 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_300_pp0_it2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        p_dst_data_stream_0_V_write = ap_const_logic_1;
    end else begin
        p_dst_data_stream_0_V_write = ap_const_logic_0;
    end
end

/// p_dst_data_stream_1_V_write assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_80 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond_reg_300_pp0_it2 or ap_sig_bdd_96 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_300_pp0_it2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        p_dst_data_stream_1_V_write = ap_const_logic_1;
    end else begin
        p_dst_data_stream_1_V_write = ap_const_logic_0;
    end
end

/// p_dst_data_stream_2_V_write assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_80 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond_reg_300_pp0_it2 or ap_sig_bdd_96 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_300_pp0_it2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        p_dst_data_stream_2_V_write = ap_const_logic_1;
    end else begin
        p_dst_data_stream_2_V_write = ap_const_logic_0;
    end
end

/// p_src_data_stream_0_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_reg_300 or ap_sig_bdd_80 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_96 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (exitcond_reg_300 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        p_src_data_stream_0_V_read = ap_const_logic_1;
    end else begin
        p_src_data_stream_0_V_read = ap_const_logic_0;
    end
end

/// p_src_data_stream_1_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_reg_300 or ap_sig_bdd_80 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_96 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (exitcond_reg_300 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        p_src_data_stream_1_V_read = ap_const_logic_1;
    end else begin
        p_src_data_stream_1_V_read = ap_const_logic_0;
    end
end

/// p_src_data_stream_2_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_reg_300 or ap_sig_bdd_80 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_96 or ap_reg_ppiten_pp0_it3)
begin
    if (((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (exitcond_reg_300 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))))) begin
        p_src_data_stream_2_V_read = ap_const_logic_1;
    end else begin
        p_src_data_stream_2_V_read = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_56 or exitcond_fu_171_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_80 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_sig_bdd_96 or ap_reg_ppiten_pp0_it3 or exitcond8_fu_160_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~ap_sig_bdd_56) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(ap_const_lv1_0 == exitcond8_fu_160_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        ap_ST_pp0_stg0_fsm_2 : 
            if ((~((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(exitcond_fu_171_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if ((((ap_ST_pp0_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_80 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | (ap_sig_bdd_96 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it3))) & ~(exitcond_fu_171_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st7_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        ap_ST_st7_fsm_3 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_56 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_56 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_80 assign process. ///
always @ (p_src_data_stream_0_V_empty_n or p_src_data_stream_1_V_empty_n or p_src_data_stream_2_V_empty_n or exitcond_reg_300)
begin
    ap_sig_bdd_80 = (((p_src_data_stream_0_V_empty_n == ap_const_logic_0) & (exitcond_reg_300 == ap_const_lv1_0)) | ((exitcond_reg_300 == ap_const_lv1_0) & (p_src_data_stream_1_V_empty_n == ap_const_logic_0)) | ((exitcond_reg_300 == ap_const_lv1_0) & (p_src_data_stream_2_V_empty_n == ap_const_logic_0)));
end

/// ap_sig_bdd_96 assign process. ///
always @ (p_dst_data_stream_0_V_full_n or p_dst_data_stream_1_V_full_n or p_dst_data_stream_2_V_full_n or ap_reg_ppstg_exitcond_reg_300_pp0_it2)
begin
    ap_sig_bdd_96 = (((p_dst_data_stream_0_V_full_n == ap_const_logic_0) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_300_pp0_it2)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_300_pp0_it2) & (p_dst_data_stream_1_V_full_n == ap_const_logic_0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_300_pp0_it2) & (p_dst_data_stream_2_V_full_n == ap_const_logic_0)));
end
assign exitcond8_fu_160_p2 = (i_reg_137 == p_src_rows_V_read? 1'b1: 1'b0);
assign exitcond_fu_171_p2 = (j_reg_148 == p_src_cols_V_read? 1'b1: 1'b0);
assign i_1_fu_165_p2 = (i_reg_137 + ap_const_lv12_1);
assign j_1_fu_176_p2 = (j_reg_148 + ap_const_lv12_1);
assign p_Val2_1_fu_196_p0 = p_Val2_1_fu_196_p00;
assign p_Val2_1_fu_196_p00 = $unsigned(p_src_data_stream_1_V_dout);
assign p_Val2_1_fu_196_p2 = ($signed({{1'b0}, {p_Val2_1_fu_196_p0}}) * $signed('h12C8B4));
assign p_Val2_2_fu_206_p0 = p_Val2_2_fu_206_p00;
assign p_Val2_2_fu_206_p00 = $unsigned(p_src_data_stream_0_V_dout);
assign p_Val2_2_fu_206_p2 = ($signed({{1'b0}, {p_Val2_2_fu_206_p0}}) * $signed('h99168));
assign p_Val2_3_fu_215_p2 = (p_Val2_2_reg_319 + tmp_cast_fu_212_p1);
assign p_Val2_4_fu_224_p2 = (p_Val2_1_reg_314 + tmp_8_cast_fu_220_p1);
assign p_Val2_5_cast_fu_247_p1 = $unsigned(tmp_2_reg_324);
assign p_Val2_6_fu_253_p2 = (p_Val2_5_cast_fu_247_p1 + tmp_11_cast_fu_250_p1);
assign p_Val2_s_fu_186_p0 = p_Val2_s_fu_186_p00;
assign p_Val2_s_fu_186_p00 = $unsigned(p_src_data_stream_2_V_dout);
assign p_Val2_s_fu_186_p2 = ($signed({{1'b0}, {p_Val2_s_fu_186_p0}}) * $signed('h3A5E3));
assign p_dst_data_stream_0_V_din = tmp_1_fu_271_p3;
assign p_dst_data_stream_1_V_din = tmp_1_fu_271_p3;
assign p_dst_data_stream_2_V_din = tmp_1_fu_271_p3;
assign tmp_11_cast_fu_250_p1 = $unsigned(tmp_10_reg_329);
assign tmp_11_fu_259_p3 = p_Val2_6_fu_253_p2[ap_const_lv32_8];
assign tmp_12_fu_267_p1 = p_Val2_6_fu_253_p2[7:0];
assign tmp_1_fu_271_p3 = ((tmp_11_fu_259_p3)? ap_const_lv8_FF: tmp_12_fu_267_p1);
assign tmp_8_cast_fu_220_p1 = $unsigned(p_Val2_3_fu_215_p2);
assign tmp_cast_fu_212_p1 = $unsigned(p_Val2_s_reg_309);
always @ (posedge ap_clk)
begin
    p_Val2_1_reg_314[1:0] <= 2'b00;
    p_Val2_2_reg_319[2:0] <= 3'b000;
end



endmodule //CvtColor_0_32_32_1080_1920_s

