// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIvideo2Mat_32_1080_1920_32_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        AXI_video_strm_V_data_V_dout,
        AXI_video_strm_V_data_V_empty_n,
        AXI_video_strm_V_data_V_read,
        AXI_video_strm_V_keep_V_dout,
        AXI_video_strm_V_keep_V_empty_n,
        AXI_video_strm_V_keep_V_read,
        AXI_video_strm_V_strb_V_dout,
        AXI_video_strm_V_strb_V_empty_n,
        AXI_video_strm_V_strb_V_read,
        AXI_video_strm_V_user_V_dout,
        AXI_video_strm_V_user_V_empty_n,
        AXI_video_strm_V_user_V_read,
        AXI_video_strm_V_last_V_dout,
        AXI_video_strm_V_last_V_empty_n,
        AXI_video_strm_V_last_V_read,
        AXI_video_strm_V_id_V_dout,
        AXI_video_strm_V_id_V_empty_n,
        AXI_video_strm_V_id_V_read,
        AXI_video_strm_V_dest_V_dout,
        AXI_video_strm_V_dest_V_empty_n,
        AXI_video_strm_V_dest_V_read,
        img_rows_V_read,
        img_cols_V_read,
        img_data_stream_0_V_din,
        img_data_stream_0_V_full_n,
        img_data_stream_0_V_write,
        img_data_stream_1_V_din,
        img_data_stream_1_V_full_n,
        img_data_stream_1_V_write,
        img_data_stream_2_V_din,
        img_data_stream_2_V_full_n,
        img_data_stream_2_V_write
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] AXI_video_strm_V_data_V_dout;
input   AXI_video_strm_V_data_V_empty_n;
output   AXI_video_strm_V_data_V_read;
input  [3:0] AXI_video_strm_V_keep_V_dout;
input   AXI_video_strm_V_keep_V_empty_n;
output   AXI_video_strm_V_keep_V_read;
input  [3:0] AXI_video_strm_V_strb_V_dout;
input   AXI_video_strm_V_strb_V_empty_n;
output   AXI_video_strm_V_strb_V_read;
input  [0:0] AXI_video_strm_V_user_V_dout;
input   AXI_video_strm_V_user_V_empty_n;
output   AXI_video_strm_V_user_V_read;
input  [0:0] AXI_video_strm_V_last_V_dout;
input   AXI_video_strm_V_last_V_empty_n;
output   AXI_video_strm_V_last_V_read;
input  [0:0] AXI_video_strm_V_id_V_dout;
input   AXI_video_strm_V_id_V_empty_n;
output   AXI_video_strm_V_id_V_read;
input  [0:0] AXI_video_strm_V_dest_V_dout;
input   AXI_video_strm_V_dest_V_empty_n;
output   AXI_video_strm_V_dest_V_read;
input  [11:0] img_rows_V_read;
input  [11:0] img_cols_V_read;
output  [7:0] img_data_stream_0_V_din;
input   img_data_stream_0_V_full_n;
output   img_data_stream_0_V_write;
output  [7:0] img_data_stream_1_V_din;
input   img_data_stream_1_V_full_n;
output   img_data_stream_1_V_write;
output  [7:0] img_data_stream_2_V_din;
input   img_data_stream_2_V_full_n;
output   img_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_stream_0_V_write;
reg img_data_stream_1_V_write;
reg img_data_stream_2_V_write;
reg    ap_done_reg = 1'b0;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [11:0] p_1_reg_192;
reg   [0:0] eol_1_reg_203;
reg   [31:0] axi_data_V_1_reg_214;
reg   [0:0] eol_reg_225;
reg    ap_sig_bdd_87;
reg   [31:0] tmp_data_V_reg_413;
wire    AXI_video_strm_V_0_status;
reg   [0:0] tmp_last_V_reg_421;
wire   [11:0] i_V_fu_332_p2;
reg   [11:0] i_V_reg_436;
wire   [0:0] exitcond2_fu_338_p2;
reg   [0:0] exitcond2_reg_441;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
wire   [0:0] brmerge_fu_352_p2;
reg    ap_sig_bdd_125;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
wire   [11:0] j_V_fu_343_p2;
reg    ap_sig_bdd_138;
wire   [0:0] exitcond1_fu_327_p2;
reg   [0:0] axi_last_V_3_reg_272;
reg   [0:0] axi_last_V1_reg_161;
reg   [31:0] axi_data_V_3_reg_284;
reg   [31:0] axi_data_V1_reg_171;
reg   [11:0] p_s_reg_181;
reg   [0:0] axi_last_V_2_phi_fu_241_p4;
reg   [31:0] p_Val2_s_phi_fu_253_p4;
reg   [0:0] eol_2_phi_fu_265_p4;
wire   [0:0] eol_1_mux_fu_364_p2;
reg   [0:0] eol_3_reg_296;
reg    AXI_video_strm_V_0_update;
reg   [0:0] sof_1_fu_106;
wire   [0:0] not_sof_2_fu_358_p2;
wire   [0:0] tmp_user_V_fu_318_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_sig_bdd_210;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_pp1_stg0_fsm_4 = 3'b100;
parameter    ap_ST_st7_fsm_5 = 3'b101;
parameter    ap_ST_st8_fsm_6 = 3'b110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_327_p2))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp1_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(exitcond2_fu_338_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_327_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp1_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_reg_ppiten_pp1_it0;
        end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_327_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        axi_data_V1_reg_171 <= tmp_data_V_reg_413;
    end else if ((ap_ST_st8_fsm_6 == ap_CS_fsm)) begin
        axi_data_V1_reg_171 <= axi_data_V_3_reg_284;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        axi_data_V_1_reg_214 <= p_Val2_s_phi_fu_253_p4;
    end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_327_p2))) begin
        axi_data_V_1_reg_214 <= axi_data_V1_reg_171;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(exitcond2_reg_441 == ap_const_lv1_0))) begin
        axi_data_V_3_reg_284 <= axi_data_V_1_reg_214;
    end else if (((ap_ST_st7_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == eol_3_reg_296) & ~ap_sig_bdd_138)) begin
        axi_data_V_3_reg_284 <= AXI_video_strm_V_data_V_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        axi_last_V1_reg_161 <= tmp_last_V_reg_421;
    end else if ((ap_ST_st8_fsm_6 == ap_CS_fsm)) begin
        axi_last_V1_reg_161 <= axi_last_V_3_reg_272;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(exitcond2_reg_441 == ap_const_lv1_0))) begin
        axi_last_V_3_reg_272 <= eol_1_reg_203;
    end else if (((ap_ST_st7_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == eol_3_reg_296) & ~ap_sig_bdd_138)) begin
        axi_last_V_3_reg_272 <= AXI_video_strm_V_last_V_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        eol_1_reg_203 <= axi_last_V_2_phi_fu_241_p4;
    end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_327_p2))) begin
        eol_1_reg_203 <= axi_last_V1_reg_161;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(exitcond2_reg_441 == ap_const_lv1_0))) begin
        eol_3_reg_296 <= eol_reg_225;
    end else if (((ap_ST_st7_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == eol_3_reg_296) & ~ap_sig_bdd_138)) begin
        eol_3_reg_296 <= AXI_video_strm_V_last_V_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        eol_reg_225 <= eol_2_phi_fu_265_p4;
    end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_327_p2))) begin
        eol_reg_225 <= ap_const_lv1_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (exitcond2_fu_338_p2 == ap_const_lv1_0))) begin
        p_1_reg_192 <= j_V_fu_343_p2;
    end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_327_p2))) begin
        p_1_reg_192 <= ap_const_lv12_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        p_s_reg_181 <= ap_const_lv12_0;
    end else if ((ap_ST_st8_fsm_6 == ap_CS_fsm)) begin
        p_s_reg_181 <= i_V_reg_436;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        sof_1_fu_106 <= ap_const_lv1_0;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        sof_1_fu_106 <= ap_const_lv1_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        exitcond2_reg_441 <= exitcond2_fu_338_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        i_V_reg_436 <= i_V_fu_332_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(AXI_video_strm_V_0_status == ap_const_logic_0))) begin
        tmp_data_V_reg_413 <= AXI_video_strm_V_data_V_dout;
        tmp_last_V_reg_421 <= AXI_video_strm_V_last_V_dout;
    end
end

/// AXI_video_strm_V_0_update assign process. ///
always @ (ap_CS_fsm or AXI_video_strm_V_0_status or exitcond2_reg_441 or brmerge_fu_352_p2 or ap_sig_bdd_125 or ap_reg_ppiten_pp1_it1 or ap_sig_bdd_138 or eol_3_reg_296)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(AXI_video_strm_V_0_status == ap_const_logic_0)) | ((ap_ST_st7_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == eol_3_reg_296) & ~ap_sig_bdd_138) | ((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_lv1_0 == brmerge_fu_352_p2) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))))) begin
        AXI_video_strm_V_0_update = ap_const_logic_1;
    end else begin
        AXI_video_strm_V_0_update = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_CS_fsm or exitcond1_fu_327_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_327_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_327_p2)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_327_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// axi_last_V_2_phi_fu_241_p4 assign process. ///
always @ (AXI_video_strm_V_last_V_dout or eol_1_reg_203 or brmerge_fu_352_p2 or ap_sig_bdd_210)
begin
    if (ap_sig_bdd_210) begin
        if (~(ap_const_lv1_0 == brmerge_fu_352_p2)) begin
            axi_last_V_2_phi_fu_241_p4 = eol_1_reg_203;
        end else if ((ap_const_lv1_0 == brmerge_fu_352_p2)) begin
            axi_last_V_2_phi_fu_241_p4 = AXI_video_strm_V_last_V_dout;
        end else begin
            axi_last_V_2_phi_fu_241_p4 = ap_const_lv1_1;
        end
    end else begin
        axi_last_V_2_phi_fu_241_p4 = ap_const_lv1_1;
    end
end

/// eol_2_phi_fu_265_p4 assign process. ///
always @ (AXI_video_strm_V_last_V_dout or brmerge_fu_352_p2 or eol_1_mux_fu_364_p2 or ap_sig_bdd_210)
begin
    if (ap_sig_bdd_210) begin
        if (~(ap_const_lv1_0 == brmerge_fu_352_p2)) begin
            eol_2_phi_fu_265_p4 = eol_1_mux_fu_364_p2;
        end else if ((ap_const_lv1_0 == brmerge_fu_352_p2)) begin
            eol_2_phi_fu_265_p4 = AXI_video_strm_V_last_V_dout;
        end else begin
            eol_2_phi_fu_265_p4 = ap_const_lv1_1;
        end
    end else begin
        eol_2_phi_fu_265_p4 = ap_const_lv1_1;
    end
end

/// img_data_stream_0_V_write assign process. ///
always @ (ap_CS_fsm or exitcond2_reg_441 or ap_sig_bdd_125 or ap_reg_ppiten_pp1_it1)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        img_data_stream_0_V_write = ap_const_logic_1;
    end else begin
        img_data_stream_0_V_write = ap_const_logic_0;
    end
end

/// img_data_stream_1_V_write assign process. ///
always @ (ap_CS_fsm or exitcond2_reg_441 or ap_sig_bdd_125 or ap_reg_ppiten_pp1_it1)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        img_data_stream_1_V_write = ap_const_logic_1;
    end else begin
        img_data_stream_1_V_write = ap_const_logic_0;
    end
end

/// img_data_stream_2_V_write assign process. ///
always @ (ap_CS_fsm or exitcond2_reg_441 or ap_sig_bdd_125 or ap_reg_ppiten_pp1_it1)
begin
    if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        img_data_stream_2_V_write = ap_const_logic_1;
    end else begin
        img_data_stream_2_V_write = ap_const_logic_0;
    end
end

/// p_Val2_s_phi_fu_253_p4 assign process. ///
always @ (AXI_video_strm_V_data_V_dout or axi_data_V_1_reg_214 or brmerge_fu_352_p2 or ap_sig_bdd_210)
begin
    if (ap_sig_bdd_210) begin
        if (~(ap_const_lv1_0 == brmerge_fu_352_p2)) begin
            p_Val2_s_phi_fu_253_p4 = axi_data_V_1_reg_214;
        end else if ((ap_const_lv1_0 == brmerge_fu_352_p2)) begin
            p_Val2_s_phi_fu_253_p4 = AXI_video_strm_V_data_V_dout;
        end else begin
            p_Val2_s_phi_fu_253_p4 = ap_const_lv32_1;
        end
    end else begin
        p_Val2_s_phi_fu_253_p4 = ap_const_lv32_1;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_87 or AXI_video_strm_V_0_status or ap_reg_ppiten_pp1_it0 or ap_sig_bdd_125 or ap_reg_ppiten_pp1_it1 or ap_sig_bdd_138 or exitcond1_fu_327_p2 or eol_3_reg_296 or tmp_user_V_fu_318_p1)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~ap_sig_bdd_87) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((~(AXI_video_strm_V_0_status == ap_const_logic_0) & (ap_const_lv1_0 == tmp_user_V_fu_318_p1))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if ((~(AXI_video_strm_V_0_status == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_user_V_fu_318_p1))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            if (~(ap_const_lv1_0 == exitcond1_fu_327_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_4;
            end
        ap_ST_pp1_stg0_fsm_4 : 
            if (~((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it0))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_4;
            end else if (((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_125 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it0))) begin
                ap_NS_fsm = ap_ST_st7_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_4;
            end
        ap_ST_st7_fsm_5 : 
            if (((ap_const_lv1_0 == eol_3_reg_296) & ~ap_sig_bdd_138)) begin
                ap_NS_fsm = ap_ST_st7_fsm_5;
            end else if ((~ap_sig_bdd_138 & ~(ap_const_lv1_0 == eol_3_reg_296))) begin
                ap_NS_fsm = ap_ST_st8_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_5;
            end
        ap_ST_st8_fsm_6 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign AXI_video_strm_V_0_status = (AXI_video_strm_V_data_V_empty_n & AXI_video_strm_V_keep_V_empty_n & AXI_video_strm_V_strb_V_empty_n & AXI_video_strm_V_user_V_empty_n & AXI_video_strm_V_last_V_empty_n & AXI_video_strm_V_id_V_empty_n & AXI_video_strm_V_dest_V_empty_n);
assign AXI_video_strm_V_data_V_read = AXI_video_strm_V_0_update;
assign AXI_video_strm_V_dest_V_read = AXI_video_strm_V_0_update;
assign AXI_video_strm_V_id_V_read = AXI_video_strm_V_0_update;
assign AXI_video_strm_V_keep_V_read = AXI_video_strm_V_0_update;
assign AXI_video_strm_V_last_V_read = AXI_video_strm_V_0_update;
assign AXI_video_strm_V_strb_V_read = AXI_video_strm_V_0_update;
assign AXI_video_strm_V_user_V_read = AXI_video_strm_V_0_update;

/// ap_sig_bdd_125 assign process. ///
always @ (img_data_stream_0_V_full_n or img_data_stream_1_V_full_n or img_data_stream_2_V_full_n or AXI_video_strm_V_0_status or exitcond2_reg_441 or brmerge_fu_352_p2)
begin
    ap_sig_bdd_125 = (((AXI_video_strm_V_0_status == ap_const_logic_0) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_lv1_0 == brmerge_fu_352_p2)) | ((exitcond2_reg_441 == ap_const_lv1_0) & (img_data_stream_0_V_full_n == ap_const_logic_0)) | ((exitcond2_reg_441 == ap_const_lv1_0) & (img_data_stream_1_V_full_n == ap_const_logic_0)) | ((exitcond2_reg_441 == ap_const_lv1_0) & (img_data_stream_2_V_full_n == ap_const_logic_0)));
end

/// ap_sig_bdd_138 assign process. ///
always @ (AXI_video_strm_V_0_status or eol_3_reg_296)
begin
    ap_sig_bdd_138 = ((AXI_video_strm_V_0_status == ap_const_logic_0) & (ap_const_lv1_0 == eol_3_reg_296));
end

/// ap_sig_bdd_210 assign process. ///
always @ (ap_CS_fsm or exitcond2_reg_441 or ap_reg_ppiten_pp1_it1)
begin
    ap_sig_bdd_210 = ((ap_ST_pp1_stg0_fsm_4 == ap_CS_fsm) & (exitcond2_reg_441 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1));
end

/// ap_sig_bdd_87 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_87 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign brmerge_fu_352_p2 = (sof_1_fu_106 | eol_reg_225);
assign eol_1_mux_fu_364_p2 = (eol_1_reg_203 | not_sof_2_fu_358_p2);
assign exitcond1_fu_327_p2 = (p_s_reg_181 == img_rows_V_read? 1'b1: 1'b0);
assign exitcond2_fu_338_p2 = (p_1_reg_192 == img_cols_V_read? 1'b1: 1'b0);
assign i_V_fu_332_p2 = (p_s_reg_181 + ap_const_lv12_1);
assign img_data_stream_0_V_din = p_Val2_s_phi_fu_253_p4[7:0];
assign img_data_stream_1_V_din = {{p_Val2_s_phi_fu_253_p4[ap_const_lv32_F : ap_const_lv32_8]}};
assign img_data_stream_2_V_din = {{p_Val2_s_phi_fu_253_p4[ap_const_lv32_17 : ap_const_lv32_10]}};
assign j_V_fu_343_p2 = (p_1_reg_192 + ap_const_lv12_1);
assign not_sof_2_fu_358_p2 = (sof_1_fu_106 ^ ap_const_lv1_1);
assign tmp_user_V_fu_318_p1 = AXI_video_strm_V_user_V_dout;


endmodule //AXIvideo2Mat_32_1080_1920_32_s

