// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XERODE_FILTER_H
#define XERODE_FILTER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#include "xerode_filter_CONTROL_BUS.h"

/**************************** Type Definitions ******************************/
typedef struct {
    u16 DeviceId; // currently not used
    u32 Control_bus_BaseAddress;
} XErode_filter_Config;

typedef struct {
    u32 Control_bus_BaseAddress;
    u32 IsReady;
} XErode_filter;

/***************** Macros (Inline Functions) Definitions *********************/
#define XErode_filter_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))

#define XErode_filter_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))

/************************** Function Prototypes *****************************/
int XErode_filter_Initialize(XErode_filter *InstancePtr, XErode_filter_Config *ConfigPtr);

void XErode_filter_Start(XErode_filter *InstancePtr);
u32 XErode_filter_IsDone(XErode_filter *InstancePtr);
u32 XErode_filter_IsIdle(XErode_filter *InstancePtr);
u32 XErode_filter_IsReady(XErode_filter *InstancePtr);
void XErode_filter_EnableAutoRestart(XErode_filter *InstancePtr);
void XErode_filter_DisableAutoRestart(XErode_filter *InstancePtr);

void XErode_filter_SetRows(XErode_filter *InstancePtr, u32 Data);
u32 XErode_filter_GetRows(XErode_filter *InstancePtr);
void XErode_filter_SetCols(XErode_filter *InstancePtr, u32 Data);
u32 XErode_filter_GetCols(XErode_filter *InstancePtr);

void XErode_filter_InterruptGlobalEnable(XErode_filter *InstancePtr);
void XErode_filter_InterruptGlobalDisable(XErode_filter *InstancePtr);
void XErode_filter_InterruptEnable(XErode_filter *InstancePtr, u32 Mask);
void XErode_filter_InterruptDisable(XErode_filter *InstancePtr, u32 Mask);
void XErode_filter_InterruptClear(XErode_filter *InstancePtr, u32 Mask);
u32 XErode_filter_InterruptGetEnabled(XErode_filter *InstancePtr);
u32 XErode_filter_InterruptGetStatus(XErode_filter *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
