/***************************************************************************//**
 *   @file   main.c

*******************************************************************************/

/******************************************************************************/
/***************************** Include Files **********************************/
/******************************************************************************/
#include <stdio.h>
#include "xil_cache.h"
#include "xbasic_types.h"
#include "xil_io.h"
#include "cf_hdmi.h"
#include "atv_platform.h"
#include "transmitter.h"
#include "xil_exception.h"
#include "xuartps.h"
// for interrupt handling
#include "axi_interrupt.h"
#include "xscugic.h"
#include "xil_mmu.h"
#include "sw_functions.h"
#include "xpseudo_asm.h"
#include "global.h"
//#include "xgray_scale.h"
#include "hw_config.h"
#include "profile_cnt.h"



/******************************************************************************/
/************************ Variables Definitions *******************************/
/******************************************************************************/
static UCHAR    MajorRev;      /* Major Release Number */
static UCHAR    MinorRev;      /* Usually used for code-drops */
static UCHAR    RcRev;         /* Release Candidate Number */
static BOOL     DriverEnable;
static BOOL     LastEnable;


XScuGic InterruptController; /* Instance of the Interrupt Controller */
static XScuGic_Config *GicConfig;/* The configuration parameters of the controller */


short int FRAME_INTR = 0;

//XGray_scale xGrayScaleFilter1;
//XGray_scale xGrayScaleFilter2;



int ScuGicInterrupt_Init()
{
	int Status;
	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 * */
	Xil_ExceptionInit();

	GicConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	if (NULL == GicConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(&InterruptController, GicConfig,
			GicConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	 // **** Setup the Interrupt System *****

//	 * Connect the interrupt controller interrupt handler to the hardware
//	 * interrupt handling logic in the ARM processor.
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler,
			(void *) &InterruptController);

//	 * Connect a device driver handler that will be called when an
//	 * interrupt for the device occurs, the device driver handler performs
//	 * the specific interrupt processing for the device
	Status = XScuGic_Connect(&InterruptController,XPAR_FABRIC_CAM_INTERFACE_0_VSYNC_NEGEDGE_INTR,
			(Xil_ExceptionHandler)AXI_INTERRUPT_VsyncIntr_Handler,
			(void *) &InterruptController);
	XScuGic_Enable(&InterruptController, XPAR_FABRIC_CAM_INTERFACE_0_VSYNC_NEGEDGE_INTR);

// 	Enable interrupts in the ARM
	Xil_ExceptionEnable();

	//Only used for edge sensitive Interrupts
	XScuGic_SetPriorityTriggerType(&InterruptController, XPAR_FABRIC_CAM_INTERFACE_0_VSYNC_NEGEDGE_INTR, 0xa0, 3);

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	return XST_SUCCESS ; 
}

void delay_us(u32 us_count) {
  u32 count;
  for (count = 0; count < ((us_count * 800) + 1); count++) {
    asm("nop");
  }
}

/***************************************************************************//**
 * @brief Enables the driver.
 *
 * @return Returns ATVERR_OK.
*******************************************************************************/
void APP_EnableDriver (BOOL Enable)
{
    DriverEnable = Enable;
}

/***************************************************************************//**
 * @brief Returns the driver enable status.
 *
 * @return Returns the driver enable status.
*******************************************************************************/
static BOOL APP_DriverEnabled (void)
{
    if ((DriverEnable && HAL_GetMBSwitchState()) != LastEnable)
    {
        LastEnable = DriverEnable && HAL_GetMBSwitchState();
        DBG_MSG ("APP: Driver %s\n\r", LastEnable? "Enabled": "Disabled");
    }
    return (LastEnable);
}


/*void configureGrayscaleFilter() {
	xGrayScaleFilter1.Control_bus_BaseAddress = XPAR_GRAY_SCALE_TOP_0_S_AXI_CONTROL_BUS_BASEADDR;
	xGrayScaleFilter1.IsReady = XIL_COMPONENT_IS_READY;
	config_grayScaleFilter(xGrayScaleFilter1);
	resetVDMA(1);
	config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_MEM_TO_DEV, VIDEO_BASEADDR);
	config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_DEV_TO_MEM, HWPROC_VIDEO_BASEADDR);
}*/


/***************************************************************************//**
 * @brief Changes the video resolution depending on User input.
 *
 * @return None.
*******************************************************************************/
static int APP_ChangeResolution (void)
{
	char *resolutions[7] = {"640x480", "800x600", "1024x768", "1280x720", "1360x768", "1600x900", "1920x1080"};
	char receivedChar    = 0;

	if(XUartPs_IsReceiveData(UART_BASEADDR))
	{
		receivedChar = inbyte();
		if((receivedChar >= 0x30) && (receivedChar <= 0x36))
		{
			SetVideoResolution(receivedChar - 0x30);
			//configureGrayscaleFilter();
			DBG_MSG("Resolution was changed to %s \r\n", resolutions[receivedChar - 0x30]);
		}
		else if (receivedChar == 'q') {
			DBG_MSG("Exiting Application. \n\r");
		    return(0);
		    }
		else
		{
			if((receivedChar != 0x0A) && (receivedChar != 0x0D))
			{
				SetVideoResolution(RESOLUTION_640x480);
				//configureGrayscaleFilter();
				DBG_MSG("Resolution was changed to %s \r\n", resolutions[0]);
			}
		}
	}
	return 1;
}

/*
// this function when called, leaves current core's frame and starts processing the other core's video frame!!
void GrayscaleFilter_processVideoFrame() {
	static unsigned char flag = 0;
	flag++;
	if (flag == 1) {
		config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_MEM_TO_DEV, VIDEO_BASEADDR_CPU1);
	} else if (flag == 2) {
		config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_MEM_TO_DEV, VIDEO_BASEADDR);
		flag = 0;
	}

}*/

// this function contains cpu1 startup code to boot it with MMU, cache enabled
// the initial boot code (wait for SEV from cpu0 code) is copied to DDR memory as it was found that it got corrupted in shared memory
void CPU1_init() {

	// duplicating the initial boot code for CPU1 into ddr and then jumping to that boot code!
	Xil_Out32((u32) 0x06000000, (u32) 0xe3e0000f);
	Xil_Out32((u32) 0x06000004, (u32) 0xe3a01000);
	Xil_Out32((u32) 0x06000008, (u32) 0xe5801000);
	Xil_Out32((u32) 0x0600000c, (u32) 0xe320f002);
	Xil_Out32((u32) 0x06000010, (u32) 0xe5902000);
	Xil_Out32((u32) 0x06000014, (u32) 0xe1520001);
	Xil_Out32((u32) 0x06000018, (u32) 0x0afffffb);
	Xil_Out32((u32) 0x0600001c, (u32) 0xe1a0f002);


    // BSP startup code!!

	asm volatile (
						/* Write to ACTLR */
						"mrc	p15, 0, r0, c1, c0, 1		/* Read ACTLR*/\n"
						"orr	r0, r0, #(0x01 << 6)		/* set SMP bit */\n"
						"orr	r0, r0, #(0x01 )		/* */\n"
						"mcr	p15, 0, r0, c1, c0, 1		/* Write ACTLR*/\n"



						/* Invalidate caches and TLBs */
						"mov	r0,#0				/* r0 = 0  */\n"
						"mcr	p15, 0, r0, c8, c7, 0		/* invalidate TLBs */\n"
						"mcr	p15, 0, r0, c7, c5, 0		/* invalidate icache */\n"
						"mcr	p15, 0, r0, c7, c5, 6		/* Invalidate branch predictor array */\n"
						"bl	invalidate_dcache		/* invalidate dcache */\n"

						/* Disable MMU, if enabled */
						"mrc	p15, 0, r0, c1, c0, 0		/* read CP15 register 1 */\n"
						"bic	r0, r0, #0x1			/* clear bit 0 */\n"
						"mcr	p15, 0, r0, c1, c0, 0		/* write value back */\n"


						/* setup stack pointer for cpu1*/
						"mrs	r0, cpsr			/* get the current PSR */\n"
						"mvn	r1, #0x1f			/* set up the system stack pointer */\n"
						"and	r2, r1, r0\n"
						"orr	r2, r2, #0x1F			/* SYS mode */\n"
						"msr	cpsr, r2\n"
						"ldr	r13,=__stack1			/* SYS stack pointer */\n"




						/* enable MMU and cache */
						"ldr	r0,=MMUTable			/* Load MMU translation table base */\n"
						"orr	r0, r0, #0x5B			/* Outer-cacheable, WB */\n"
						"mcr	15, 0, r0, c2, c0, 0		/* TTB0 */\n"

						"mvn	r0,#0				/* Load MMU domains -- all ones=manager */\n"
						"mcr	p15,0,r0,c3,c0,0\n"
						/* Enable mmu, icahce and dcache */
						"ldr	r0,=0b01000000000101\n"

						"mcr	p15,0,r0,c1,c0,0		/* Enable cache and MMU */\n"
						"dsb					/* dsb	allow the MMU to start up */\n"

						"isb					/* isb	flush prefetch buffer */\n"






						"mrc	p15,0,r0,c1,c0,0		/* flow prediction enable */\n"
						"orr	r0, r0, #(0x01 << 11)		/* #0x8000 */\n"
						"mcr	p15,0,r0,c1,c0,0\n"

						"mrc	p15,0,r0,c1,c0,1		/* read Auxiliary Control Register */\n"
						"orr	r0, r0, #(0x1 << 2)		/* enable Dside prefetch */\n"
						"orr	r0, r0, #(0x1 << 1)		/* enable L2 Prefetch hint */\n"
						"mcr	p15,0,r0,c1,c0,1		/* write Auxiliary Control Register */\n"



						// CPU1 powering down (will then be waiting for sev from CPU0)
						"movw r0, 0x0000\n"
						"movt r0, 0x0600\n"
						"bx r0\n"





						"invalidate_dcache:\n"
						"	mrc	p15, 1, r0, c0, c0, 1		/* read CLIDR */\n"
						"	ands	r3, r0, #0x7000000\n"
						"	mov	r3, r3, lsr #23			/* cache level value (naturally aligned) */\n"
						"	beq	finished\n"
						"	mov	r10, #0				/* start with level 0 */\n"
						"loop1:\n"
						"	add	r2, r10, r10, lsr #1		/* work out 3xcachelevel */\n"
						"	mov	r1, r0, lsr r2			/* bottom 3 bits are the Cache type for this level */\n"
						"	and	r1, r1, #7			/* get those 3 bits alone */\n"
						"	cmp	r1, #2\n"
						"	blt	skip				/* no cache or only instruction cache at this level */\n"
						"	mcr	p15, 2, r10, c0, c0, 0		/* write the Cache Size selection register */\n"
						"	isb					/* isb to sync the change to the CacheSizeID reg */\n"
						"	mrc	p15, 1, r1, c0, c0, 0		/* reads current Cache Size ID register */\n"
						"	and	r2, r1, #7			/* extract the line length field */\n"
						"	add	r2, r2, #4			/* add 4 for the line length offset (log2 16 bytes) */\n"
						"	ldr	r4, =0x3ff\n"
						"	ands	r4, r4, r1, lsr #3		/* r4 is the max number on the way size (right aligned) */\n"
						"	clz	r5, r4				/* r5 is the bit position of the way size increment */\n"
						"	ldr	r7, =0x7fff\n"
						"	ands	r7, r7, r1, lsr #13		/* r7 is the max number of the index size (right aligned) */\n"
						"loop2:\n"
						"	mov	r9, r4				/* r9 working copy of the max way size (right aligned) */\n"
						"loop3:\n"
						"	orr	r11, r10, r9, lsl r5		/* factor in the way number and cache number into r11 */\n"
						"	orr	r11, r11, r7, lsl r2		/* factor in the index number */\n"
						"	mcr	p15, 0, r11, c7, c14, 2		/* clean & invalidate by set/way */\n"
						"	subs	r9, r9, #1			/* decrement the way number */\n"
						"	bge	loop3\n"
						"	subs	r7, r7, #1			/* decrement the index */\n"
						"	bge	loop2\n"
						"skip:\n"
						"	add	r10, r10, #2			/* increment the cache number */\n"
						"	cmp	r3, r10\n"
						"	bgt	loop1\n"

						"finished:\n"
						"	mov	r10, #0				/* swith back to cache level 0 */\n"
						"	mcr	p15, 2, r10, c0, c0, 0		/* select current cache level in cssr */\n"
						"	dsb\n"
						"	isb\n"

						"	bx	lr\n"
				);


}



/***************************************************************************//**
 * @brief Main function.
 *
 * @return Returns 0.
*******************************************************************************/
int main()
{
	UINT32 StartCount;
	int xstatus;
	MajorRev     = 1;
	MinorRev     = 1;
	RcRev        = 1;
	DriverEnable = TRUE;
	LastEnable   = FALSE;
	void (*funcPtr_CPU1init)() = CPU1_init;
	int delay;


    /* Disable caching on shared OCM data by setting the appropriate TLB
     * attributes for the shared data space in OCM.
	 *
     * S=b1
     * TEX=b100
     * AP=b11
     * Domain=b1111
     * C=b0
     * B=b0
	 */
    Xil_SetTlbAttributes(SHARED_OCM_MEMORY_BASE, 0x14de2);
	Xil_ICacheEnable();
	Xil_DCacheEnable();


	// interrupting cpu1 to run startup code
	Xil_Out32(0xfffffff0, (u32) funcPtr_CPU1init);
	dmb();
	sev();
	for (delay=0; delay<100000; delay++);




	EnablePerfCounters();
	init_perfcounters(1, 0);

	HAL_PlatformInit(XPAR_AXI_IIC_0_BASEADDR,	/* Perform any required platform init */
					 XPAR_SCUTIMER_DEVICE_ID,	/* including hardware reset to HDMI devices */
					 XPAR_SCUGIC_SINGLE_DEVICE_ID,
					 XPAR_SCUTIMER_INTR);

	/*xGrayScaleFilter1.Control_bus_BaseAddress = XPAR_GRAY_SCALE_TOP_0_S_AXI_CONTROL_BUS_BASEADDR;
	xGrayScaleFilter1.IsReady = XIL_COMPONENT_IS_READY;
	config_grayScaleFilter(xGrayScaleFilter1);
	resetVDMA(1);
	config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_MEM_TO_DEV, VIDEO_BASEADDR);
	config_filterVDMA(XPAR_AXI_VDMA_1_BASEADDR, DMA_DEV_TO_MEM, HWPROC_VIDEO_BASEADDR);

	xGrayScaleFilter2.Control_bus_BaseAddress = XPAR_GRAY_SCALE_TOP_1_S_AXI_CONTROL_BUS_BASEADDR;
	xGrayScaleFilter2.IsReady = XIL_COMPONENT_IS_READY;
	config_grayScaleFilter(xGrayScaleFilter2);
	resetVDMA(2);
	config_filterVDMA(XPAR_AXI_VDMA_2_BASEADDR, DMA_MEM_TO_DEV, VIDEO_BASEADDR_CPU1);
	config_filterVDMA(XPAR_AXI_VDMA_2_BASEADDR, DMA_DEV_TO_MEM, HWPROC_VIDEO_BASEADDR);*/

	//configureGrayscaleFilter();



	DBG_MSG("  To change the video resolution press:\r\n");
	DBG_MSG("  '0' - 640x480;  '1' - 800x600;  '2' - 1024x768; '3' - 1280x720 \r\n");
	DBG_MSG("  '4' - 1360x768; '5' - 1600x900; '6' - 1920x1080.\r\n");

	ADIAPI_TransmitterInit();   /* Initialize ADI repeater software and h/w */
	ADIAPI_TransmitterSetPowerMode(REP_POWER_UP);

	StartCount = HAL_GetCurrentMsCount();
	ADIAPI_TransmitterMain();
	
	/*Initialize the HDMI Core with default display settings*/
	SetVideoResolution(RESOLUTION_640x480);


	/* Initialize the interrupt controller */
	xstatus = ScuGicInterrupt_Init();
	if (xstatus != XST_SUCCESS) {
		xil_printf("Unable to initialize Interrupts");
	  		//return XST_FAILURE;
	  	}


	while (APP_ChangeResolution())
	{
		if (ATV_GetElapsedMs (StartCount, NULL) >= HDMI_CALL_INTERVAL_MS)
		{
			StartCount = HAL_GetCurrentMsCount();
			if (APP_DriverEnabled())
			{
				ADIAPI_TransmitterMain();
			}
		}

		ADIAPI_TransmitterMain();
		while (FRAME_INTR == 0);

		DDRVideoWr(640, 480, detailedTiming[currentResolution][H_ACTIVE_TIME], detailedTiming[currentResolution][V_ACTIVE_TIME], VIDEO_BASEADDR);
		// frame processing (pure SW implementation) on this CPU0!!
		ConvToGrayHLS(VIDEO_BASEADDR, PROC_VIDEO_BASEADDR, detailedTiming[currentResolution][H_ACTIVE_TIME]);

		FRAME_INTR = 0;
	}

	Xil_DCacheDisable();
	Xil_ICacheDisable();

	return(0);
}









