-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir,hls_ip_2013_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=89,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal shift_reg_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_reg_ce0 : STD_LOGIC;
    signal shift_reg_we0 : STD_LOGIC;
    signal shift_reg_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_addr_gep_fu_57_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_addr_reg_201 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_138_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_178_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_248 : STD_LOGIC_VECTOR (4 downto 0);
    signal acc_1_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_99 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_pn_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_152_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_156_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_167_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_112_temp: signed (5-1 downto 0);
    signal grp_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_ce : STD_LOGIC;
    signal grp_fu_184_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_63 : BOOLEAN;

    component fir_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_shift_reg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    shift_reg_U : component fir_shift_reg
    generic map (
        DataWidth => 32,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shift_reg_address0,
        ce0 => shift_reg_ce0,
        we0 => shift_reg_we0,
        d0 => shift_reg_d0,
        q0 => shift_reg_q0);

    fir_mul_32s_32s_32_6_U1 : component fir_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_172_p0,
        din1 => grp_fu_172_p1,
        ce => grp_fu_172_ce,
        dout => grp_fu_172_p2);

    fir_mul_32s_32s_32_6_U2 : component fir_mul_32s_32s_32_6
    generic map (
        ID => 2,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_184_p0,
        din1 => grp_fu_184_p1,
        ce => grp_fu_184_ce,
        dout => grp_fu_184_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- acc_reg_99 assign process. --
    acc_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
                acc_reg_99 <= acc_1_fu_189_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                acc_reg_99 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i_reg_112 assign process. --
    i_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
                i_reg_112 <= i_1_reg_248;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_112 <= ap_const_lv5_A;
            end if; 
        end if;
    end process;

    -- p_pn_reg_124 assign process. --
    p_pn_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                if ((tmp_1_reg_209 = ap_const_lv1_0)) then 
                    p_pn_reg_124 <= grp_fu_172_p2;
                elsif (not((tmp_1_reg_209 = ap_const_lv1_0))) then 
                    p_pn_reg_124 <= grp_fu_184_p2;
                end if;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                i_1_reg_248 <= i_1_fu_178_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_138_p3 = ap_const_lv1_0))) then
                tmp_1_reg_209 <= tmp_1_fu_146_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_138_p3 = ap_const_lv1_0) and (tmp_1_fu_146_p2 = ap_const_lv1_0))) then
                tmp_5_reg_218(0) <= tmp_5_fu_167_p1(0);
    tmp_5_reg_218(1) <= tmp_5_fu_167_p1(1);
    tmp_5_reg_218(2) <= tmp_5_fu_167_p1(2);
    tmp_5_reg_218(3) <= tmp_5_fu_167_p1(3);
    tmp_5_reg_218(4) <= tmp_5_fu_167_p1(4);
    tmp_5_reg_218(5) <= tmp_5_fu_167_p1(5);
    tmp_5_reg_218(6) <= tmp_5_fu_167_p1(6);
    tmp_5_reg_218(7) <= tmp_5_fu_167_p1(7);
    tmp_5_reg_218(8) <= tmp_5_fu_167_p1(8);
    tmp_5_reg_218(9) <= tmp_5_fu_167_p1(9);
    tmp_5_reg_218(10) <= tmp_5_fu_167_p1(10);
    tmp_5_reg_218(11) <= tmp_5_fu_167_p1(11);
    tmp_5_reg_218(12) <= tmp_5_fu_167_p1(12);
    tmp_5_reg_218(13) <= tmp_5_fu_167_p1(13);
    tmp_5_reg_218(14) <= tmp_5_fu_167_p1(14);
    tmp_5_reg_218(15) <= tmp_5_fu_167_p1(15);
    tmp_5_reg_218(16) <= tmp_5_fu_167_p1(16);
    tmp_5_reg_218(17) <= tmp_5_fu_167_p1(17);
    tmp_5_reg_218(18) <= tmp_5_fu_167_p1(18);
    tmp_5_reg_218(19) <= tmp_5_fu_167_p1(19);
    tmp_5_reg_218(20) <= tmp_5_fu_167_p1(20);
    tmp_5_reg_218(21) <= tmp_5_fu_167_p1(21);
    tmp_5_reg_218(22) <= tmp_5_fu_167_p1(22);
    tmp_5_reg_218(23) <= tmp_5_fu_167_p1(23);
    tmp_5_reg_218(24) <= tmp_5_fu_167_p1(24);
    tmp_5_reg_218(25) <= tmp_5_fu_167_p1(25);
    tmp_5_reg_218(26) <= tmp_5_fu_167_p1(26);
    tmp_5_reg_218(27) <= tmp_5_fu_167_p1(27);
    tmp_5_reg_218(28) <= tmp_5_fu_167_p1(28);
    tmp_5_reg_218(29) <= tmp_5_fu_167_p1(29);
    tmp_5_reg_218(30) <= tmp_5_fu_167_p1(30);
    tmp_5_reg_218(31) <= tmp_5_fu_167_p1(31);
            end if;
        end if;
    end process;
    c_addr_reg_201(3 downto 0) <= "0000";
    tmp_5_reg_218(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_1_fu_146_p2 , tmp_fu_138_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((tmp_fu_138_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((tmp_fu_138_p3 = ap_const_lv1_0) and not((tmp_1_fu_146_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    acc_1_fu_189_p2 <= std_logic_vector(unsigned(p_pn_reg_124) + unsigned(acc_reg_99));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, tmp_fu_138_p3)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_fu_138_p3 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_fu_138_p3)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_fu_138_p3 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_63 assign process. --
    ap_sig_bdd_63_assign_proc : process(ap_CS_fsm, tmp_fu_138_p3)
    begin
                ap_sig_bdd_63 <= ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_138_p3 = ap_const_lv1_0));
    end process;

    c_addr_gep_fu_57_p3 <= ap_const_lv64_0(4 - 1 downto 0);

    -- c_address0 assign process. --
    c_address0_assign_proc : process(c_addr_reg_201, tmp_1_fu_146_p2, tmp_5_fu_167_p1, ap_sig_bdd_63)
    begin
        if (ap_sig_bdd_63) then
            if (not((tmp_1_fu_146_p2 = ap_const_lv1_0))) then 
                c_address0 <= c_addr_reg_201;
            elsif ((tmp_1_fu_146_p2 = ap_const_lv1_0)) then 
                c_address0 <= tmp_5_fu_167_p1(4 - 1 downto 0);
            else 
                c_address0 <= "XXXX";
            end if;
        else 
            c_address0 <= "XXXX";
        end if; 
    end process;


    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_CS_fsm, tmp_1_fu_146_p2, tmp_fu_138_p3)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_138_p3 = ap_const_lv1_0) and (tmp_1_fu_146_p2 = ap_const_lv1_0)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_138_p3 = ap_const_lv1_0) and not((tmp_1_fu_146_p2 = ap_const_lv1_0))))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_172_ce <= ap_const_logic_1;
    grp_fu_172_p0 <= c_q0;
    grp_fu_172_p1 <= shift_reg_q0;
    grp_fu_184_ce <= ap_const_logic_1;
    grp_fu_184_p0 <= c_q0;
    grp_fu_184_p1 <= x;
    i_1_fu_178_p2 <= std_logic_vector(unsigned(i_reg_112) + unsigned(ap_const_lv5_1F));

    -- shift_reg_address0 assign process. --
    shift_reg_address0_assign_proc : process(ap_CS_fsm, tmp_5_reg_218, tmp_4_fu_162_p1)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            shift_reg_address0 <= ap_const_lv4_0;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            shift_reg_address0 <= tmp_5_reg_218(4 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            shift_reg_address0 <= tmp_4_fu_162_p1(4 - 1 downto 0);
        else 
            shift_reg_address0 <= "XXXX";
        end if; 
    end process;


    -- shift_reg_ce0 assign process. --
    shift_reg_ce0_assign_proc : process(ap_CS_fsm, tmp_1_fu_146_p2, tmp_fu_138_p3)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_138_p3 = ap_const_lv1_0) and (tmp_1_fu_146_p2 = ap_const_lv1_0)) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            shift_reg_ce0 <= ap_const_logic_1;
        else 
            shift_reg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- shift_reg_d0 assign process. --
    shift_reg_d0_assign_proc : process(ap_CS_fsm, x, shift_reg_q0)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            shift_reg_d0 <= x;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            shift_reg_d0 <= shift_reg_q0;
        else 
            shift_reg_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- shift_reg_we0 assign process. --
    shift_reg_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            shift_reg_we0 <= ap_const_logic_1;
        else 
            shift_reg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_146_p2 <= "1" when (i_reg_112 = ap_const_lv5_0) else "0";
    tmp_3_fu_156_p2 <= std_logic_vector(unsigned(tmp_7_fu_152_p1) + unsigned(ap_const_lv4_F));
    tmp_4_fu_162_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_156_p2),64));
    
    i_reg_112_temp <= signed(i_reg_112);
    tmp_5_fu_167_p0 <= std_logic_vector(resize(i_reg_112_temp,32));

    tmp_5_fu_167_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_167_p0),64));
    tmp_7_fu_152_p1 <= i_reg_112(4 - 1 downto 0);
    tmp_fu_138_p3 <= i_reg_112(4 downto 4);
    y <= acc_reg_99;

    -- y_ap_vld assign process. --
    y_ap_vld_assign_proc : process(ap_CS_fsm, tmp_fu_138_p3)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_fu_138_p3 = ap_const_lv1_0)))) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
