-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_Loop_Row_DCT_Loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_2d_in_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_in_ce0 : OUT STD_LOGIC;
    buf_2d_in_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_in_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_in_ce1 : OUT STD_LOGIC;
    buf_2d_in_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    row_outbuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_ce0 : OUT STD_LOGIC;
    row_outbuf_we0 : OUT STD_LOGIC;
    row_outbuf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_Loop_Row_DCT_Loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st10_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal dct_coeff_table_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_0_ce0 : STD_LOGIC;
    signal dct_coeff_table_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_1_ce0 : STD_LOGIC;
    signal dct_coeff_table_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_2_ce0 : STD_LOGIC;
    signal dct_coeff_table_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_3_ce0 : STD_LOGIC;
    signal dct_coeff_table_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_4_ce0 : STD_LOGIC;
    signal dct_coeff_table_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_5_ce0 : STD_LOGIC;
    signal dct_coeff_table_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_6_ce0 : STD_LOGIC;
    signal dct_coeff_table_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_7_ce0 : STD_LOGIC;
    signal dct_coeff_table_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_reg_259 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i_reg_270 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i_reg_281 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_293 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_622_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_304_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_reg_626 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i_mid2_fu_330_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i_mid2_reg_631 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_17_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_17_reg_642 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_addr1_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_reg_672 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_p_addr1_reg_672_pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_fu_384_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_677 : STD_LOGIC_VECTOR (3 downto 0);
    signal dct_coeff_table_1_load_reg_692 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_1_i_fu_435_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_1_i_reg_737 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_2_load_reg_742 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_load_reg_757 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_load_reg_767 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_load_reg_777 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_load_reg_782 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_2_i_fu_486_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_2_i_reg_787 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_fu_529_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_reg_812 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_i_fu_541_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_i_reg_817 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_6_i_fu_554_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_6_i_reg_822 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_fu_565_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_reg_827 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_fu_583_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_reg_832 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_fu_588_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_reg_837 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp3_fu_598_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp3_reg_842 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_bdd_219 : BOOLEAN;
    signal indvar_flatten_phi_fu_263_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i_phi_fu_274_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i_phi_fu_285_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_i_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_324_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i_mid2_fu_316_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_344_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_361_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_352_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_trn_cast_fu_374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_398_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_404_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_416_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_1_i_fu_435_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_i_fu_435_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_449_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_fu_455_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_467_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_2_i_fu_486_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_i_fu_486_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_499_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_499_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_505_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_517_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_i_fu_541_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_4_i_fu_541_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_6_i_fu_554_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_6_i_fu_554_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp2_fu_560_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_7_i_fu_577_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_7_i_fu_577_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_499_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_7_i_fu_577_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_fu_594_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_2_i_fu_603_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_398_ce : STD_LOGIC;
    signal grp_fu_449_ce : STD_LOGIC;
    signal grp_fu_499_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_398_p10 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mul_16s_14ns_29_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_16s_15s_29_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_0_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_0
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_0_address0,
        ce0 => dct_coeff_table_0_ce0,
        q0 => dct_coeff_table_0_q0);

    dct_coeff_table_1_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_1
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_1_address0,
        ce0 => dct_coeff_table_1_ce0,
        q0 => dct_coeff_table_1_q0);

    dct_coeff_table_2_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_2
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_2_address0,
        ce0 => dct_coeff_table_2_ce0,
        q0 => dct_coeff_table_2_q0);

    dct_coeff_table_3_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_3
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_3_address0,
        ce0 => dct_coeff_table_3_ce0,
        q0 => dct_coeff_table_3_q0);

    dct_coeff_table_4_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_4
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_4_address0,
        ce0 => dct_coeff_table_4_ce0,
        q0 => dct_coeff_table_4_q0);

    dct_coeff_table_5_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_5
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_5_address0,
        ce0 => dct_coeff_table_5_ce0,
        q0 => dct_coeff_table_5_q0);

    dct_coeff_table_6_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_6
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_6_address0,
        ce0 => dct_coeff_table_6_ce0,
        q0 => dct_coeff_table_6_q0);

    dct_coeff_table_7_U : component dct_Loop_Row_DCT_Loop_proc_dct_coeff_table_7
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_7_address0,
        ce0 => dct_coeff_table_7_ce0,
        q0 => dct_coeff_table_7_q0);

    dct_mul_16s_14ns_29_3_U3 : component dct_mul_16s_14ns_29_3
    generic map (
        ID => 3,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_398_p0,
        din1 => grp_fu_398_p1,
        ce => grp_fu_398_ce,
        dout => grp_fu_398_p2);

    dct_mul_16s_15s_29_3_U4 : component dct_mul_16s_15s_29_3
    generic map (
        ID => 4,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_449_p0,
        din1 => grp_fu_449_p1,
        ce => grp_fu_449_ce,
        dout => grp_fu_449_p2);

    dct_mul_16s_15s_29_3_U5 : component dct_mul_16s_15s_29_3
    generic map (
        ID => 5,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_499_p0,
        din1 => grp_fu_499_p1,
        ce => grp_fu_499_ce,
        dout => grp_fu_499_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_ST_st10_fsm_5 = ap_CS_fsm)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_flatten_fu_298_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_219))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_219)) or ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and not((exitcond_flatten_reg_622 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_0_i_reg_270 assign process. --
    i_0_i_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then 
                i_0_i_reg_270 <= i_0_i_mid2_reg_631;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_219))) then 
                i_0_i_reg_270 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_259 assign process. --
    indvar_flatten_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then 
                indvar_flatten_reg_259 <= indvar_flatten_next_reg_626;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_219))) then 
                indvar_flatten_reg_259 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- k_i_reg_281 assign process. --
    k_i_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then 
                k_i_reg_281 <= k_reg_677;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_219))) then 
                k_i_reg_281 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- reg_293 assign process. --
    reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)))) then 
                reg_293 <= buf_2d_in_q0;
            elsif ((((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)))) then 
                reg_293 <= buf_2d_in_q1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond_flatten_reg_622_pp0_it1 <= exitcond_flatten_reg_622;
                ap_reg_ppstg_p_addr1_reg_672_pp0_it1 <= p_addr1_reg_672;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0))) then
                dct_coeff_table_1_load_reg_692 <= dct_coeff_table_1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm))) then
                dct_coeff_table_2_load_reg_742 <= dct_coeff_table_2_q0;
                dct_coeff_table_4_load_reg_757 <= dct_coeff_table_4_q0;
                dct_coeff_table_5_load_reg_767 <= dct_coeff_table_5_q0;
                dct_coeff_table_6_load_reg_777 <= dct_coeff_table_6_q0;
                dct_coeff_table_7_load_reg_782 <= dct_coeff_table_7_q0;
                tmp_8_1_i_reg_737 <= tmp_8_1_i_fu_435_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then
                exitcond_flatten_reg_622 <= exitcond_flatten_fu_298_p2;
                indvar_flatten_next_reg_626 <= indvar_flatten_next_fu_304_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_flatten_fu_298_p2))) then
                i_0_i_mid2_reg_631 <= i_0_i_mid2_fu_330_p3;
                k_reg_677 <= k_fu_384_p2;
                p_addr1_reg_672 <= p_addr1_fu_378_p2;
                tmp_i_17_reg_642(0) <= tmp_i_17_fu_338_p1(0);
    tmp_i_17_reg_642(1) <= tmp_i_17_fu_338_p1(1);
    tmp_i_17_reg_642(2) <= tmp_i_17_fu_338_p1(2);
    tmp_i_17_reg_642(3) <= tmp_i_17_fu_338_p1(3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm))) then
                tmp1_reg_812 <= tmp1_fu_529_p2;
                tmp_8_2_i_reg_787 <= tmp_8_2_i_fu_486_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_622_pp0_it1))) then
                tmp3_reg_842 <= tmp3_fu_598_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_622_pp0_it1))) then
                tmp4_reg_832 <= tmp4_fu_583_p2;
                tmp6_reg_837 <= tmp6_fu_588_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then
                tmp_8_4_i_reg_817 <= tmp_8_4_i_fu_541_p2;
                tmp_8_6_i_reg_822 <= tmp_8_6_i_fu_554_p2;
                tmp_reg_827 <= tmp_fu_565_p2;
            end if;
        end if;
    end process;
    tmp_i_17_reg_642(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_reg_ppiten_pp0_it0 , ap_reg_ppiten_pp0_it1 , exitcond_flatten_fu_298_p2 , ap_sig_bdd_219)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_219)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_298_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_5;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_5;
                end if;
            when ap_ST_st10_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_ST_st10_fsm_5 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st10_fsm_5 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_219 assign process. --
    ap_sig_bdd_219_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_219 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- buf_2d_in_address0 assign process. --
    buf_2d_in_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, tmp_8_fu_356_p1, tmp_2_fu_411_p1, tmp_6_fu_462_p1, tmp_13_fu_512_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                buf_2d_in_address0 <= tmp_13_fu_512_p1(6 - 1 downto 0);
            elsif ((ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) then 
                buf_2d_in_address0 <= tmp_6_fu_462_p1(6 - 1 downto 0);
            elsif ((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm)) then 
                buf_2d_in_address0 <= tmp_2_fu_411_p1(6 - 1 downto 0);
            elsif ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)) then 
                buf_2d_in_address0 <= tmp_8_fu_356_p1(6 - 1 downto 0);
            else 
                buf_2d_in_address0 <= "XXXXXX";
            end if;
        else 
            buf_2d_in_address0 <= "XXXXXX";
        end if; 
    end process;


    -- buf_2d_in_address1 assign process. --
    buf_2d_in_address1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, tmp_s_fu_369_p1, tmp_4_fu_423_p1, tmp_11_fu_474_p1, tmp_15_fu_524_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                buf_2d_in_address1 <= tmp_15_fu_524_p1(6 - 1 downto 0);
            elsif ((ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) then 
                buf_2d_in_address1 <= tmp_11_fu_474_p1(6 - 1 downto 0);
            elsif ((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm)) then 
                buf_2d_in_address1 <= tmp_4_fu_423_p1(6 - 1 downto 0);
            elsif ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)) then 
                buf_2d_in_address1 <= tmp_s_fu_369_p1(6 - 1 downto 0);
            else 
                buf_2d_in_address1 <= "XXXXXX";
            end if;
        else 
            buf_2d_in_address1 <= "XXXXXX";
        end if; 
    end process;


    -- buf_2d_in_ce0 assign process. --
    buf_2d_in_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_reg_622, exitcond_flatten_fu_298_p2)
    begin
        if ((((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_flatten_fu_298_p2)))) then 
            buf_2d_in_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buf_2d_in_ce1 assign process. --
    buf_2d_in_ce1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_reg_622, exitcond_flatten_fu_298_p2)
    begin
        if ((((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_flatten_fu_298_p2)))) then 
            buf_2d_in_ce1 <= ap_const_logic_1;
        else 
            buf_2d_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= tmp_i_17_fu_338_p1(3 - 1 downto 0);

    -- dct_coeff_table_0_ce0 assign process. --
    dct_coeff_table_0_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_fu_298_p2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_flatten_fu_298_p2))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= tmp_i_17_fu_338_p1(3 - 1 downto 0);

    -- dct_coeff_table_1_ce0 assign process. --
    dct_coeff_table_1_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_fu_298_p2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_flatten_fu_298_p2))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= tmp_i_17_reg_642(3 - 1 downto 0);

    -- dct_coeff_table_2_ce0 assign process. --
    dct_coeff_table_2_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_reg_622)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= tmp_i_17_reg_642(3 - 1 downto 0);

    -- dct_coeff_table_3_ce0 assign process. --
    dct_coeff_table_3_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_reg_622)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= tmp_i_17_reg_642(3 - 1 downto 0);

    -- dct_coeff_table_4_ce0 assign process. --
    dct_coeff_table_4_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_reg_622)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= tmp_i_17_reg_642(3 - 1 downto 0);

    -- dct_coeff_table_5_ce0 assign process. --
    dct_coeff_table_5_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_reg_622)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= tmp_i_17_reg_642(3 - 1 downto 0);

    -- dct_coeff_table_6_ce0 assign process. --
    dct_coeff_table_6_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_reg_622)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= tmp_i_17_reg_642(3 - 1 downto 0);

    -- dct_coeff_table_7_ce0 assign process. --
    dct_coeff_table_7_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond_flatten_reg_622)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_622 = ap_const_lv1_0))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_310_p2 <= "1" when (k_i_phi_fu_285_p4 = ap_const_lv4_8) else "0";
    exitcond_flatten_fu_298_p2 <= "1" when (indvar_flatten_phi_fu_263_p4 = ap_const_lv7_40) else "0";
    grp_fu_398_ce <= ap_const_logic_1;
    grp_fu_398_p0 <= buf_2d_in_q0;
    grp_fu_398_p1 <= grp_fu_398_p10(14 - 1 downto 0);
    grp_fu_398_p10 <= std_logic_vector(resize(unsigned(dct_coeff_table_0_q0),29));
    grp_fu_449_ce <= ap_const_logic_1;
    grp_fu_449_p0 <= buf_2d_in_q1;
    grp_fu_449_p1 <= dct_coeff_table_3_q0;
    grp_fu_499_ce <= ap_const_logic_1;
    grp_fu_499_p0 <= buf_2d_in_q1;
    grp_fu_499_p1 <= dct_coeff_table_5_load_reg_767;
    i_0_i_mid2_fu_330_p3 <= 
        i_fu_324_p2 when (exitcond1_i_fu_310_p2(0) = '1') else 
        i_0_i_phi_fu_274_p4;

    -- i_0_i_phi_fu_274_p4 assign process. --
    i_0_i_phi_fu_274_p4_assign_proc : process(ap_CS_fsm, i_0_i_reg_270, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_622, i_0_i_mid2_reg_631)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then 
            i_0_i_phi_fu_274_p4 <= i_0_i_mid2_reg_631;
        else 
            i_0_i_phi_fu_274_p4 <= i_0_i_reg_270;
        end if; 
    end process;

    i_fu_324_p2 <= std_logic_vector(unsigned(i_0_i_phi_fu_274_p4) + unsigned(ap_const_lv4_1));
    indvar_flatten_next_fu_304_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_263_p4) + unsigned(ap_const_lv7_1));

    -- indvar_flatten_phi_fu_263_p4 assign process. --
    indvar_flatten_phi_fu_263_p4_assign_proc : process(ap_CS_fsm, indvar_flatten_reg_259, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_622, indvar_flatten_next_reg_626)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then 
            indvar_flatten_phi_fu_263_p4 <= indvar_flatten_next_reg_626;
        else 
            indvar_flatten_phi_fu_263_p4 <= indvar_flatten_reg_259;
        end if; 
    end process;

    k_fu_384_p2 <= std_logic_vector(unsigned(k_i_mid2_fu_316_p3) + unsigned(ap_const_lv4_1));
    k_i_mid2_fu_316_p3 <= 
        ap_const_lv4_0 when (exitcond1_i_fu_310_p2(0) = '1') else 
        k_i_phi_fu_285_p4;

    -- k_i_phi_fu_285_p4 assign process. --
    k_i_phi_fu_285_p4_assign_proc : process(ap_CS_fsm, k_i_reg_281, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_622, k_reg_677)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_622 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then 
            k_i_phi_fu_285_p4 <= k_reg_677;
        else 
            k_i_phi_fu_285_p4 <= k_i_reg_281;
        end if; 
    end process;

    p_addr1_fu_378_p2 <= std_logic_vector(unsigned(p_addr_cast_fu_352_p1) + unsigned(tmp_i_trn_cast_fu_374_p1));
    p_addr_cast_fu_352_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_344_p3),8));
    row_outbuf_address0 <= tmp_16_fu_618_p1(6 - 1 downto 0);

    -- row_outbuf_ce0 assign process. --
    row_outbuf_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_622_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_622_pp0_it1))) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_outbuf_d0 <= tmp_2_i_fu_603_p2(28 downto 13);

    -- row_outbuf_we0 assign process. --
    row_outbuf_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_622_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_622_pp0_it1)))) then 
            row_outbuf_we0 <= ap_const_logic_1;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_529_p2 <= std_logic_vector(unsigned(tmp_8_1_i_reg_737) + unsigned(grp_fu_398_p2));
    tmp2_fu_560_p2 <= std_logic_vector(unsigned(tmp_8_2_i_reg_787) + unsigned(grp_fu_449_p2));
    tmp3_fu_598_p2 <= std_logic_vector(unsigned(tmp5_fu_594_p2) + unsigned(tmp4_reg_832));
    tmp4_fu_583_p2 <= std_logic_vector(unsigned(tmp_8_4_i_reg_817) + unsigned(grp_fu_499_p2));
    tmp5_fu_594_p2 <= std_logic_vector(unsigned(tmp6_reg_837) + unsigned(tmp_8_6_i_reg_822));
    tmp6_fu_588_p2 <= std_logic_vector(unsigned(tmp_8_7_i_fu_577_p2) + unsigned(ap_const_lv29_1000));
    tmp_10_fu_467_p3 <= (i_0_i_mid2_reg_631 & ap_const_lv3_5);
    tmp_11_fu_474_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_467_p3),64));
    tmp_12_fu_505_p3 <= (i_0_i_mid2_reg_631 & ap_const_lv3_6);
    tmp_13_fu_512_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_505_p3),64));
    tmp_14_fu_517_p3 <= (i_0_i_mid2_reg_631 & ap_const_lv3_7);
    tmp_15_fu_524_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_517_p3),64));
    tmp_16_fu_618_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_p_addr1_reg_672_pp0_it1),64));
    tmp_1_fu_404_p3 <= (i_0_i_mid2_reg_631 & ap_const_lv3_2);
    tmp_2_fu_411_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_404_p3),64));
    tmp_2_i_fu_603_p2 <= std_logic_vector(unsigned(tmp3_reg_842) + unsigned(tmp_reg_827));
    tmp_3_fu_416_p3 <= (i_0_i_mid2_reg_631 & ap_const_lv3_3);
    tmp_4_fu_423_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_416_p3),64));
    tmp_5_fu_455_p3 <= (i_0_i_mid2_reg_631 & ap_const_lv3_4);
    tmp_6_fu_462_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_455_p3),64));
    tmp_7_fu_344_p3 <= (i_0_i_mid2_fu_330_p3 & ap_const_lv3_0);
    tmp_8_1_i_fu_435_p0 <= reg_293;
    tmp_8_1_i_fu_435_p1 <= dct_coeff_table_1_load_reg_692;
    tmp_8_1_i_fu_435_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_1_i_fu_435_p0) * signed(tmp_8_1_i_fu_435_p1))), 29));
    tmp_8_2_i_fu_486_p0 <= reg_293;
    tmp_8_2_i_fu_486_p1 <= dct_coeff_table_2_load_reg_742;
    tmp_8_2_i_fu_486_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_2_i_fu_486_p0) * signed(tmp_8_2_i_fu_486_p1))), 29));
    tmp_8_4_i_fu_541_p0 <= reg_293;
    tmp_8_4_i_fu_541_p1 <= dct_coeff_table_4_load_reg_757;
    tmp_8_4_i_fu_541_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_4_i_fu_541_p0) * signed(tmp_8_4_i_fu_541_p1))), 29));
    tmp_8_6_i_fu_554_p0 <= buf_2d_in_q0;
    tmp_8_6_i_fu_554_p1 <= dct_coeff_table_6_load_reg_777;
    tmp_8_6_i_fu_554_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_6_i_fu_554_p0) * signed(tmp_8_6_i_fu_554_p1))), 29));
    tmp_8_7_i_fu_577_p0 <= reg_293;
    tmp_8_7_i_fu_577_p1 <= dct_coeff_table_7_load_reg_782;
    tmp_8_7_i_fu_577_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_7_i_fu_577_p0) * signed(tmp_8_7_i_fu_577_p1))), 29));
    tmp_8_fu_356_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_344_p3),64));
    tmp_9_fu_361_p3 <= (i_0_i_mid2_fu_330_p3 & ap_const_lv3_1);
    tmp_fu_565_p2 <= std_logic_vector(unsigned(tmp2_fu_560_p2) + unsigned(tmp1_reg_812));
    tmp_i_17_fu_338_p1 <= std_logic_vector(resize(unsigned(k_i_mid2_fu_316_p3),64));
    tmp_i_trn_cast_fu_374_p1 <= std_logic_vector(resize(unsigned(k_i_mid2_fu_316_p3),8));
    tmp_s_fu_369_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_361_p3),64));
end behav;
