// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2013_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=89,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        x
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;
reg[3:0] c_address0;
reg c_ce0;
reg   [3:0] ap_CS_fsm = 4'b0000;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
reg   [31:0] shift_reg_d0;
wire   [31:0] shift_reg_q0;
wire   [3:0] c_addr_gep_fu_57_p3;
reg   [3:0] c_addr_reg_201;
wire   [0:0] tmp_1_fu_146_p2;
reg   [0:0] tmp_1_reg_209;
wire   [0:0] tmp_fu_138_p3;
wire   [63:0] tmp_5_fu_167_p1;
reg   [63:0] tmp_5_reg_218;
wire   [31:0] grp_fu_172_p2;
wire   [31:0] grp_fu_184_p2;
wire   [4:0] i_1_fu_178_p2;
reg   [4:0] i_1_reg_248;
wire   [31:0] acc_1_fu_189_p2;
reg   [31:0] acc_reg_99;
reg   [4:0] i_reg_112;
reg   [31:0] p_pn_reg_124;
wire   [63:0] tmp_4_fu_162_p1;
wire   [3:0] tmp_7_fu_152_p1;
wire   [3:0] tmp_3_fu_156_p2;
wire   [31:0] tmp_5_fu_167_p0;
wire   [31:0] grp_fu_172_p0;
wire   [31:0] grp_fu_172_p1;
wire   [31:0] grp_fu_184_p0;
wire   [31:0] grp_fu_184_p1;
wire    grp_fu_172_ce;
wire    grp_fu_184_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_sig_bdd_63;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b0000;
parameter    ap_ST_st2_fsm_1 = 4'b1;
parameter    ap_ST_st3_fsm_2 = 4'b10;
parameter    ap_ST_st4_fsm_3 = 4'b11;
parameter    ap_ST_st5_fsm_4 = 4'b100;
parameter    ap_ST_st6_fsm_5 = 4'b101;
parameter    ap_ST_st7_fsm_6 = 4'b110;
parameter    ap_ST_st8_fsm_7 = 4'b111;
parameter    ap_ST_st9_fsm_8 = 4'b1000;
parameter    ap_ST_st10_fsm_9 = 4'b1001;
parameter    ap_ST_st11_fsm_10 = 4'b1010;
parameter    ap_ST_st12_fsm_11 = 4'b1011;
parameter    ap_ST_st13_fsm_12 = 4'b1100;
parameter    ap_ST_st14_fsm_13 = 4'b1101;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv5_A = 5'b1010;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_true = 1'b1;


fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( shift_reg_address0 ),
    .ce0( shift_reg_ce0 ),
    .we0( shift_reg_we0 ),
    .d0( shift_reg_d0 ),
    .q0( shift_reg_q0 )
);

fir_mul_32s_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_6_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_172_p0 ),
    .din1( grp_fu_172_p1 ),
    .ce( grp_fu_172_ce ),
    .dout( grp_fu_172_p2 )
);

fir_mul_32s_32s_32_6 #(
    .ID( 2 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_6_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_184_p0 ),
    .din1( grp_fu_184_p1 ),
    .ce( grp_fu_184_ce ),
    .dout( grp_fu_184_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        acc_reg_99 <= acc_1_fu_189_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        acc_reg_99 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        i_reg_112 <= i_1_reg_248;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_112 <= ap_const_lv5_A;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        if ((tmp_1_reg_209 == ap_const_lv1_0)) begin
            p_pn_reg_124 <= grp_fu_172_p2;
        end else if (~(tmp_1_reg_209 == ap_const_lv1_0)) begin
            p_pn_reg_124 <= grp_fu_184_p2;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        i_1_reg_248 <= i_1_fu_178_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_fu_138_p3 == ap_const_lv1_0))) begin
        tmp_1_reg_209 <= tmp_1_fu_146_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_fu_138_p3 == ap_const_lv1_0) & (tmp_1_fu_146_p2 == ap_const_lv1_0))) begin
        tmp_5_reg_218[0] <= tmp_5_fu_167_p1[0];
tmp_5_reg_218[1] <= tmp_5_fu_167_p1[1];
tmp_5_reg_218[2] <= tmp_5_fu_167_p1[2];
tmp_5_reg_218[3] <= tmp_5_fu_167_p1[3];
tmp_5_reg_218[4] <= tmp_5_fu_167_p1[4];
tmp_5_reg_218[5] <= tmp_5_fu_167_p1[5];
tmp_5_reg_218[6] <= tmp_5_fu_167_p1[6];
tmp_5_reg_218[7] <= tmp_5_fu_167_p1[7];
tmp_5_reg_218[8] <= tmp_5_fu_167_p1[8];
tmp_5_reg_218[9] <= tmp_5_fu_167_p1[9];
tmp_5_reg_218[10] <= tmp_5_fu_167_p1[10];
tmp_5_reg_218[11] <= tmp_5_fu_167_p1[11];
tmp_5_reg_218[12] <= tmp_5_fu_167_p1[12];
tmp_5_reg_218[13] <= tmp_5_fu_167_p1[13];
tmp_5_reg_218[14] <= tmp_5_fu_167_p1[14];
tmp_5_reg_218[15] <= tmp_5_fu_167_p1[15];
tmp_5_reg_218[16] <= tmp_5_fu_167_p1[16];
tmp_5_reg_218[17] <= tmp_5_fu_167_p1[17];
tmp_5_reg_218[18] <= tmp_5_fu_167_p1[18];
tmp_5_reg_218[19] <= tmp_5_fu_167_p1[19];
tmp_5_reg_218[20] <= tmp_5_fu_167_p1[20];
tmp_5_reg_218[21] <= tmp_5_fu_167_p1[21];
tmp_5_reg_218[22] <= tmp_5_fu_167_p1[22];
tmp_5_reg_218[23] <= tmp_5_fu_167_p1[23];
tmp_5_reg_218[24] <= tmp_5_fu_167_p1[24];
tmp_5_reg_218[25] <= tmp_5_fu_167_p1[25];
tmp_5_reg_218[26] <= tmp_5_fu_167_p1[26];
tmp_5_reg_218[27] <= tmp_5_fu_167_p1[27];
tmp_5_reg_218[28] <= tmp_5_fu_167_p1[28];
tmp_5_reg_218[29] <= tmp_5_fu_167_p1[29];
tmp_5_reg_218[30] <= tmp_5_fu_167_p1[30];
tmp_5_reg_218[31] <= tmp_5_fu_167_p1[31];
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or tmp_fu_138_p3)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_fu_138_p3 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_fu_138_p3)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_fu_138_p3 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// c_address0 assign process. ///
always @ (c_addr_reg_201 or tmp_1_fu_146_p2 or tmp_5_fu_167_p1 or ap_sig_bdd_63)
begin
    if (ap_sig_bdd_63) begin
        if (~(tmp_1_fu_146_p2 == ap_const_lv1_0)) begin
            c_address0 = c_addr_reg_201;
        end else if ((tmp_1_fu_146_p2 == ap_const_lv1_0)) begin
            c_address0 = tmp_5_fu_167_p1;
        end else begin
            c_address0 = 'bx;
        end
    end else begin
        c_address0 = 'bx;
    end
end

/// c_ce0 assign process. ///
always @ (ap_CS_fsm or tmp_1_fu_146_p2 or tmp_fu_138_p3)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_fu_138_p3 == ap_const_lv1_0) & (tmp_1_fu_146_p2 == ap_const_lv1_0)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_fu_138_p3 == ap_const_lv1_0) & ~(tmp_1_fu_146_p2 == ap_const_lv1_0)))) begin
        c_ce0 = ap_const_logic_1;
    end else begin
        c_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_address0 assign process. ///
always @ (ap_CS_fsm or tmp_5_reg_218 or tmp_4_fu_162_p1)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        shift_reg_address0 = ap_const_lv4_0;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        shift_reg_address0 = tmp_5_reg_218;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        shift_reg_address0 = tmp_4_fu_162_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

/// shift_reg_ce0 assign process. ///
always @ (ap_CS_fsm or tmp_1_fu_146_p2 or tmp_fu_138_p3)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_fu_138_p3 == ap_const_lv1_0) & (tmp_1_fu_146_p2 == ap_const_lv1_0)) | (ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st9_fsm_8 == ap_CS_fsm))) begin
        shift_reg_ce0 = ap_const_logic_1;
    end else begin
        shift_reg_ce0 = ap_const_logic_0;
    end
end

/// shift_reg_d0 assign process. ///
always @ (ap_CS_fsm or x or shift_reg_q0)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        shift_reg_d0 = x;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        shift_reg_d0 = shift_reg_q0;
    end else begin
        shift_reg_d0 = 'bx;
    end
end

/// shift_reg_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st9_fsm_8 == ap_CS_fsm))) begin
        shift_reg_we0 = ap_const_logic_1;
    end else begin
        shift_reg_we0 = ap_const_logic_0;
    end
end

/// y_ap_vld assign process. ///
always @ (ap_CS_fsm or tmp_fu_138_p3)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_fu_138_p3 == ap_const_lv1_0))) begin
        y_ap_vld = ap_const_logic_1;
    end else begin
        y_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_1_fu_146_p2 or tmp_fu_138_p3)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(tmp_fu_138_p3 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((tmp_fu_138_p3 == ap_const_lv1_0) & ~(tmp_1_fu_146_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
        ap_ST_st9_fsm_8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
        ap_ST_st10_fsm_9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
        ap_ST_st11_fsm_10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
        ap_ST_st13_fsm_12 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st14_fsm_13 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign acc_1_fu_189_p2 = (p_pn_reg_124 + acc_reg_99);

/// ap_sig_bdd_63 assign process. ///
always @ (ap_CS_fsm or tmp_fu_138_p3)
begin
    ap_sig_bdd_63 = ((ap_ST_st2_fsm_1 == ap_CS_fsm) & (tmp_fu_138_p3 == ap_const_lv1_0));
end
assign c_addr_gep_fu_57_p3 = ap_const_lv64_0;
assign grp_fu_172_ce = ap_const_logic_1;
assign grp_fu_172_p0 = c_q0;
assign grp_fu_172_p1 = shift_reg_q0;
assign grp_fu_184_ce = ap_const_logic_1;
assign grp_fu_184_p0 = c_q0;
assign grp_fu_184_p1 = x;
assign i_1_fu_178_p2 = (i_reg_112 + ap_const_lv5_1F);
assign tmp_1_fu_146_p2 = (i_reg_112 == ap_const_lv5_0? 1'b1: 1'b0);
assign tmp_3_fu_156_p2 = (tmp_7_fu_152_p1 + ap_const_lv4_F);
assign tmp_4_fu_162_p1 = $unsigned(tmp_3_fu_156_p2);
assign tmp_5_fu_167_p0 = $signed(i_reg_112);
assign tmp_5_fu_167_p1 = $unsigned(tmp_5_fu_167_p0);
assign tmp_7_fu_152_p1 = i_reg_112[3:0];
assign tmp_fu_138_p3 = i_reg_112[ap_const_lv32_4];
assign y = acc_reg_99;
always @ (posedge ap_clk)
begin
    c_addr_reg_201[3:0] <= 4'b0000;
    tmp_5_reg_218[63:32] <= 32'b00000000000000000000000000000000;
end



endmodule //fir

