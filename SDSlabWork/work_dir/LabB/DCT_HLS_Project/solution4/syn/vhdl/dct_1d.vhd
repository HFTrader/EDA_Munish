-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp_11 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of dct_1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st10_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal dct_coeff_table_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_0_ce0 : STD_LOGIC;
    signal dct_coeff_table_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_1_ce0 : STD_LOGIC;
    signal dct_coeff_table_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_2_ce0 : STD_LOGIC;
    signal dct_coeff_table_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_3_ce0 : STD_LOGIC;
    signal dct_coeff_table_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_4_ce0 : STD_LOGIC;
    signal dct_coeff_table_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_5_ce0 : STD_LOGIC;
    signal dct_coeff_table_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_6_ce0 : STD_LOGIC;
    signal dct_coeff_table_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_7_ce0 : STD_LOGIC;
    signal dct_coeff_table_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_261 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_273 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal exitcond1_reg_626 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_addr_reg_586 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_1_reg_591 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_2_reg_596 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_3_reg_601 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_4_reg_606 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_5_reg_611 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_6_reg_616 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_addr_7_reg_621 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_626_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_388_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_630 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_addr8_fu_415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr8_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_p_addr8_reg_655_pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_1_load_reg_670 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_1_fu_442_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_1_reg_705 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_2_load_reg_710 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_load_reg_725 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_load_reg_730 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_load_reg_735 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_load_reg_740 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_2_fu_469_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_2_reg_745 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp2_fu_488_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp2_reg_760 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_fu_500_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_reg_765 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_6_fu_513_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_6_reg_770 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_fu_524_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_reg_775 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_fu_542_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_reg_780 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_fu_547_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_reg_785 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_fu_557_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_reg_790 : STD_LOGIC_VECTOR (28 downto 0);
    signal k_phi_fu_265_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_278_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_291_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_304_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_317_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_330_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_343_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_356_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_369_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_404_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_411_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_trn_cast_fu_400_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_429_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_429_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_1_fu_442_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_fu_442_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_456_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_456_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_2_fu_469_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_fu_469_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_482_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_482_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_4_fu_500_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_4_fu_500_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_6_fu_513_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_6_fu_513_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp3_fu_519_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_7_fu_536_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_7_fu_536_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_7_fu_536_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_fu_553_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_2_fu_562_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_429_ce : STD_LOGIC;
    signal grp_fu_456_ce : STD_LOGIC;
    signal grp_fu_482_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_429_p10 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mul_16s_14ns_29_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_16s_15s_29_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_1d_dct_coeff_table_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dct_1d_dct_coeff_table_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_table_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_table_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_table_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_table_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_table_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_dct_coeff_table_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_0_U : component dct_1d_dct_coeff_table_0
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_0_address0,
        ce0 => dct_coeff_table_0_ce0,
        q0 => dct_coeff_table_0_q0);

    dct_coeff_table_1_U : component dct_1d_dct_coeff_table_1
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_1_address0,
        ce0 => dct_coeff_table_1_ce0,
        q0 => dct_coeff_table_1_q0);

    dct_coeff_table_2_U : component dct_1d_dct_coeff_table_2
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_2_address0,
        ce0 => dct_coeff_table_2_ce0,
        q0 => dct_coeff_table_2_q0);

    dct_coeff_table_3_U : component dct_1d_dct_coeff_table_3
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_3_address0,
        ce0 => dct_coeff_table_3_ce0,
        q0 => dct_coeff_table_3_q0);

    dct_coeff_table_4_U : component dct_1d_dct_coeff_table_4
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_4_address0,
        ce0 => dct_coeff_table_4_ce0,
        q0 => dct_coeff_table_4_q0);

    dct_coeff_table_5_U : component dct_1d_dct_coeff_table_5
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_5_address0,
        ce0 => dct_coeff_table_5_ce0,
        q0 => dct_coeff_table_5_q0);

    dct_coeff_table_6_U : component dct_1d_dct_coeff_table_6
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_6_address0,
        ce0 => dct_coeff_table_6_ce0,
        q0 => dct_coeff_table_6_q0);

    dct_coeff_table_7_U : component dct_1d_dct_coeff_table_7
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_7_address0,
        ce0 => dct_coeff_table_7_ce0,
        q0 => dct_coeff_table_7_q0);

    dct_mul_16s_14ns_29_3_U3 : component dct_mul_16s_14ns_29_3
    generic map (
        ID => 3,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_429_p0,
        din1 => grp_fu_429_p1,
        ce => grp_fu_429_ce,
        dout => grp_fu_429_p2);

    dct_mul_16s_15s_29_3_U4 : component dct_mul_16s_15s_29_3
    generic map (
        ID => 4,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_456_p0,
        din1 => grp_fu_456_p1,
        ce => grp_fu_456_ce,
        dout => grp_fu_456_p2);

    dct_mul_16s_15s_29_3_U5 : component dct_mul_16s_15s_29_3
    generic map (
        ID => 5,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_482_p0,
        din1 => grp_fu_482_p1,
        ce => grp_fu_482_ce,
        dout => grp_fu_482_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_382_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and not((exitcond1_reg_626 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- k_reg_261 assign process. --
    k_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then 
                k_reg_261 <= k_1_reg_630;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_261 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- reg_273 assign process. --
    reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)))) then 
                reg_273 <= src_q0;
            elsif ((((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)))) then 
                reg_273 <= src_q1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond1_reg_626_pp0_it1 <= exitcond1_reg_626;
                ap_reg_ppstg_p_addr8_reg_655_pp0_it1 <= p_addr8_reg_655;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0))) then
                dct_coeff_table_1_load_reg_670 <= dct_coeff_table_1_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm))) then
                dct_coeff_table_2_load_reg_710 <= dct_coeff_table_2_q0;
                dct_coeff_table_4_load_reg_725 <= dct_coeff_table_4_q0;
                dct_coeff_table_5_load_reg_730 <= dct_coeff_table_5_q0;
                dct_coeff_table_6_load_reg_735 <= dct_coeff_table_6_q0;
                dct_coeff_table_7_load_reg_740 <= dct_coeff_table_7_q0;
                tmp_8_1_reg_705 <= tmp_8_1_fu_442_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then
                exitcond1_reg_626 <= exitcond1_fu_382_p2;
                k_1_reg_630 <= k_1_fu_388_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_382_p2))) then
                p_addr8_reg_655 <= p_addr8_fu_415_p2;
                tmp_reg_635(0) <= tmp_fu_394_p1(0);
    tmp_reg_635(1) <= tmp_fu_394_p1(1);
    tmp_reg_635(2) <= tmp_fu_394_p1(2);
    tmp_reg_635(3) <= tmp_fu_394_p1(3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                src_addr_1_reg_591(3) <= tmp_9_fu_299_p1(6 - 1 downto 0)(3);
    src_addr_1_reg_591(4) <= tmp_9_fu_299_p1(6 - 1 downto 0)(4);
    src_addr_1_reg_591(5) <= tmp_9_fu_299_p1(6 - 1 downto 0)(5);
                src_addr_2_reg_596(3) <= tmp_12_fu_312_p1(6 - 1 downto 0)(3);
    src_addr_2_reg_596(4) <= tmp_12_fu_312_p1(6 - 1 downto 0)(4);
    src_addr_2_reg_596(5) <= tmp_12_fu_312_p1(6 - 1 downto 0)(5);
                src_addr_3_reg_601(3) <= tmp_14_fu_325_p1(6 - 1 downto 0)(3);
    src_addr_3_reg_601(4) <= tmp_14_fu_325_p1(6 - 1 downto 0)(4);
    src_addr_3_reg_601(5) <= tmp_14_fu_325_p1(6 - 1 downto 0)(5);
                src_addr_4_reg_606(3) <= tmp_16_fu_338_p1(6 - 1 downto 0)(3);
    src_addr_4_reg_606(4) <= tmp_16_fu_338_p1(6 - 1 downto 0)(4);
    src_addr_4_reg_606(5) <= tmp_16_fu_338_p1(6 - 1 downto 0)(5);
                src_addr_5_reg_611(3) <= tmp_18_fu_351_p1(6 - 1 downto 0)(3);
    src_addr_5_reg_611(4) <= tmp_18_fu_351_p1(6 - 1 downto 0)(4);
    src_addr_5_reg_611(5) <= tmp_18_fu_351_p1(6 - 1 downto 0)(5);
                src_addr_6_reg_616(3) <= tmp_20_fu_364_p1(6 - 1 downto 0)(3);
    src_addr_6_reg_616(4) <= tmp_20_fu_364_p1(6 - 1 downto 0)(4);
    src_addr_6_reg_616(5) <= tmp_20_fu_364_p1(6 - 1 downto 0)(5);
                src_addr_7_reg_621(3) <= tmp_22_fu_377_p1(6 - 1 downto 0)(3);
    src_addr_7_reg_621(4) <= tmp_22_fu_377_p1(6 - 1 downto 0)(4);
    src_addr_7_reg_621(5) <= tmp_22_fu_377_p1(6 - 1 downto 0)(5);
                src_addr_reg_586(3) <= tmp_6_fu_286_p1(6 - 1 downto 0)(3);
    src_addr_reg_586(4) <= tmp_6_fu_286_p1(6 - 1 downto 0)(4);
    src_addr_reg_586(5) <= tmp_6_fu_286_p1(6 - 1 downto 0)(5);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then
                tmp1_reg_775 <= tmp1_fu_524_p2;
                tmp_8_4_reg_765 <= tmp_8_4_fu_500_p2;
                tmp_8_6_reg_770 <= tmp_8_6_fu_513_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm))) then
                tmp2_reg_760 <= tmp2_fu_488_p2;
                tmp_8_2_reg_745 <= tmp_8_2_fu_469_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_626_pp0_it1))) then
                tmp4_reg_790 <= tmp4_fu_557_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_626_pp0_it1))) then
                tmp5_reg_780 <= tmp5_fu_542_p2;
                tmp7_reg_785 <= tmp7_fu_547_p2;
            end if;
        end if;
    end process;
    src_addr_reg_586(2 downto 0) <= "000";
    src_addr_1_reg_591(2 downto 0) <= "001";
    src_addr_2_reg_596(2 downto 0) <= "010";
    src_addr_3_reg_601(2 downto 0) <= "011";
    src_addr_4_reg_606(2 downto 0) <= "100";
    src_addr_5_reg_611(2 downto 0) <= "101";
    src_addr_6_reg_616(2 downto 0) <= "110";
    src_addr_7_reg_621(2 downto 0) <= "111";
    tmp_reg_635(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , ap_reg_ppiten_pp0_it0 , ap_reg_ppiten_pp0_it1 , exitcond1_fu_382_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond1_fu_382_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_5;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_5;
                end if;
            when ap_ST_st10_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st10_fsm_5 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st10_fsm_5 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= tmp_fu_394_p1(3 - 1 downto 0);

    -- dct_coeff_table_0_ce0 assign process. --
    dct_coeff_table_0_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_fu_382_p2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_382_p2))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= tmp_fu_394_p1(3 - 1 downto 0);

    -- dct_coeff_table_1_ce0 assign process. --
    dct_coeff_table_1_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_fu_382_p2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_382_p2))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= tmp_reg_635(3 - 1 downto 0);

    -- dct_coeff_table_2_ce0 assign process. --
    dct_coeff_table_2_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_reg_626)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= tmp_reg_635(3 - 1 downto 0);

    -- dct_coeff_table_3_ce0 assign process. --
    dct_coeff_table_3_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_reg_626)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= tmp_reg_635(3 - 1 downto 0);

    -- dct_coeff_table_4_ce0 assign process. --
    dct_coeff_table_4_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_reg_626)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= tmp_reg_635(3 - 1 downto 0);

    -- dct_coeff_table_5_ce0 assign process. --
    dct_coeff_table_5_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_reg_626)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= tmp_reg_635(3 - 1 downto 0);

    -- dct_coeff_table_6_ce0 assign process. --
    dct_coeff_table_6_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_reg_626)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= tmp_reg_635(3 - 1 downto 0);

    -- dct_coeff_table_7_ce0 assign process. --
    dct_coeff_table_7_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_reg_626)
    begin
        if (((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= tmp_24_fu_577_p1(6 - 1 downto 0);

    -- dst_ce0 assign process. --
    dst_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_626_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_626_pp0_it1))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= tmp_2_fu_562_p2(28 downto 13);

    -- dst_we0 assign process. --
    dst_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_626_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_626_pp0_it1)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_382_p2 <= "1" when (k_phi_fu_265_p4 = ap_const_lv4_8) else "0";
    grp_fu_429_ce <= ap_const_logic_1;
    grp_fu_429_p0 <= src_q0;
    grp_fu_429_p1 <= grp_fu_429_p10(14 - 1 downto 0);
    grp_fu_429_p10 <= std_logic_vector(resize(unsigned(dct_coeff_table_0_q0),29));
    grp_fu_456_ce <= ap_const_logic_1;
    grp_fu_456_p0 <= src_q1;
    grp_fu_456_p1 <= dct_coeff_table_3_q0;
    grp_fu_482_ce <= ap_const_logic_1;
    grp_fu_482_p0 <= src_q1;
    grp_fu_482_p1 <= dct_coeff_table_5_load_reg_730;
    k_1_fu_388_p2 <= std_logic_vector(unsigned(k_phi_fu_265_p4) + unsigned(ap_const_lv4_1));

    -- k_phi_fu_265_p4 assign process. --
    k_phi_fu_265_p4_assign_proc : process(ap_CS_fsm, k_reg_261, ap_reg_ppiten_pp0_it1, exitcond1_reg_626, k_1_reg_630)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm))) then 
            k_phi_fu_265_p4 <= k_1_reg_630;
        else 
            k_phi_fu_265_p4 <= k_reg_261;
        end if; 
    end process;

    p_addr8_fu_415_p2 <= std_logic_vector(unsigned(p_addr_cast_fu_411_p1) + unsigned(tmp_trn_cast_fu_400_p1));
    p_addr_cast_fu_411_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_404_p3),8));

    -- src_address0 assign process. --
    src_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, src_addr_reg_586, src_addr_2_reg_596, src_addr_4_reg_606, src_addr_6_reg_616)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                src_address0 <= src_addr_6_reg_616;
            elsif ((ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) then 
                src_address0 <= src_addr_4_reg_606;
            elsif ((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm)) then 
                src_address0 <= src_addr_2_reg_596;
            elsif ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)) then 
                src_address0 <= src_addr_reg_586;
            else 
                src_address0 <= "XXXXXX";
            end if;
        else 
            src_address0 <= "XXXXXX";
        end if; 
    end process;


    -- src_address1 assign process. --
    src_address1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, src_addr_1_reg_591, src_addr_3_reg_601, src_addr_5_reg_611, src_addr_7_reg_621)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                src_address1 <= src_addr_7_reg_621;
            elsif ((ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) then 
                src_address1 <= src_addr_5_reg_611;
            elsif ((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm)) then 
                src_address1 <= src_addr_3_reg_601;
            elsif ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)) then 
                src_address1 <= src_addr_1_reg_591;
            else 
                src_address1 <= "XXXXXX";
            end if;
        else 
            src_address1 <= "XXXXXX";
        end if; 
    end process;


    -- src_ce0 assign process. --
    src_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_reg_626, exitcond1_fu_382_p2)
    begin
        if ((((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_382_p2)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- src_ce1 assign process. --
    src_ce1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, exitcond1_reg_626, exitcond1_fu_382_p2)
    begin
        if ((((ap_ST_pp0_stg1_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg2_fsm_3 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond1_reg_626 = ap_const_lv1_0) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_382_p2)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_524_p2 <= std_logic_vector(unsigned(tmp3_fu_519_p2) + unsigned(tmp2_reg_760));
    tmp2_fu_488_p2 <= std_logic_vector(unsigned(tmp_8_1_reg_705) + unsigned(grp_fu_429_p2));
    tmp3_fu_519_p2 <= std_logic_vector(unsigned(tmp_8_2_reg_745) + unsigned(grp_fu_456_p2));
    tmp4_fu_557_p2 <= std_logic_vector(unsigned(tmp6_fu_553_p2) + unsigned(tmp5_reg_780));
    tmp5_fu_542_p2 <= std_logic_vector(unsigned(tmp_8_4_reg_765) + unsigned(grp_fu_482_p2));
    tmp6_fu_553_p2 <= std_logic_vector(unsigned(tmp7_reg_785) + unsigned(tmp_8_6_reg_770));
    tmp7_fu_547_p2 <= std_logic_vector(unsigned(tmp_8_7_fu_536_p2) + unsigned(ap_const_lv29_1000));
    tmp_10_fu_304_p3 <= (tmp_1 & ap_const_lv3_2);
    tmp_12_fu_312_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_304_p3),64));
    tmp_13_fu_317_p3 <= (tmp_1 & ap_const_lv3_3);
    tmp_14_fu_325_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_317_p3),64));
    tmp_15_fu_330_p3 <= (tmp_1 & ap_const_lv3_4);
    tmp_16_fu_338_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_330_p3),64));
    tmp_17_fu_343_p3 <= (tmp_1 & ap_const_lv3_5);
    tmp_18_fu_351_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_343_p3),64));
    tmp_19_fu_356_p3 <= (tmp_1 & ap_const_lv3_6);
    tmp_20_fu_364_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_356_p3),64));
    tmp_21_fu_369_p3 <= (tmp_1 & ap_const_lv3_7);
    tmp_22_fu_377_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_369_p3),64));
    tmp_23_fu_404_p3 <= (tmp_11 & ap_const_lv3_0);
    tmp_24_fu_577_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_p_addr8_reg_655_pp0_it1),64));
    tmp_2_fu_562_p2 <= std_logic_vector(unsigned(tmp4_reg_790) + unsigned(tmp1_reg_775));
    tmp_5_fu_278_p3 <= (tmp_1 & ap_const_lv3_0);
    tmp_6_fu_286_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_278_p3),64));
    tmp_7_fu_291_p3 <= (tmp_1 & ap_const_lv3_1);
    tmp_8_1_fu_442_p0 <= reg_273;
    tmp_8_1_fu_442_p1 <= dct_coeff_table_1_load_reg_670;
    tmp_8_1_fu_442_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_1_fu_442_p0) * signed(tmp_8_1_fu_442_p1))), 29));
    tmp_8_2_fu_469_p0 <= reg_273;
    tmp_8_2_fu_469_p1 <= dct_coeff_table_2_load_reg_710;
    tmp_8_2_fu_469_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_2_fu_469_p0) * signed(tmp_8_2_fu_469_p1))), 29));
    tmp_8_4_fu_500_p0 <= reg_273;
    tmp_8_4_fu_500_p1 <= dct_coeff_table_4_load_reg_725;
    tmp_8_4_fu_500_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_4_fu_500_p0) * signed(tmp_8_4_fu_500_p1))), 29));
    tmp_8_6_fu_513_p0 <= src_q0;
    tmp_8_6_fu_513_p1 <= dct_coeff_table_6_load_reg_735;
    tmp_8_6_fu_513_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_6_fu_513_p0) * signed(tmp_8_6_fu_513_p1))), 29));
    tmp_8_7_fu_536_p0 <= reg_273;
    tmp_8_7_fu_536_p1 <= dct_coeff_table_7_load_reg_740;
    tmp_8_7_fu_536_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_8_7_fu_536_p0) * signed(tmp_8_7_fu_536_p1))), 29));
    tmp_9_fu_299_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_291_p3),64));
    tmp_fu_394_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_265_p4),64));
    tmp_trn_cast_fu_400_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_265_p4),8));
end behav;
