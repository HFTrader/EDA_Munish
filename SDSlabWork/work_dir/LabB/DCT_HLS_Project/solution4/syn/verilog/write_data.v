// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] buf_r_address0;
output   buf_r_ce0;
input  [15:0] buf_r_q0;
output  [5:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buf_r_ce0;
reg output_r_ce0;
reg output_r_we0;
reg    ap_done_reg = 1'b0;
reg   [1:0] ap_CS_fsm = 2'b00;
reg   [6:0] indvar_flatten_reg_69;
reg   [3:0] r_reg_80;
reg   [3:0] c_reg_92;
wire   [0:0] exitcond_flatten_fu_104_p2;
reg   [0:0] exitcond_flatten_reg_200;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_flatten_reg_200_pp0_it1;
wire   [6:0] indvar_flatten_next_fu_110_p2;
wire   [0:0] exitcond4_fu_116_p2;
reg   [0:0] exitcond4_reg_209;
wire   [3:0] c_mid2_fu_122_p3;
reg   [3:0] c_mid2_reg_214;
wire   [3:0] c_1_fu_130_p2;
wire   [3:0] r_mid2_fu_142_p3;
reg   [3:0] r_mid2_reg_225;
wire   [5:0] tmp_9_fu_190_p2;
reg   [5:0] tmp_9_reg_235;
reg    ap_sig_bdd_76;
reg   [3:0] r_phi_fu_84_p4;
wire   [63:0] tmp_4_fu_185_p1;
wire   [63:0] tmp_3_fu_196_p1;
wire   [3:0] r_s_fu_136_p2;
wire   [2:0] tmp_fu_149_p1;
wire   [6:0] tmp_1_fu_167_p3;
wire   [7:0] p_addr_cast_fu_175_p1;
wire   [7:0] tmp_8_trn_cast_fu_164_p1;
wire   [7:0] p_addr1_fu_179_p2;
wire   [5:0] tmp_s_fu_153_p3;
wire   [5:0] c_cast6_fu_161_p1;
reg   [1:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_pp0_stg0_fsm_1 = 2'b1;
parameter    ap_ST_st5_fsm_2 = 2'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_ST_st5_fsm_2 == ap_CS_fsm)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(exitcond_flatten_fu_104_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_76)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_fu_104_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_76) | ((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(exitcond_flatten_fu_104_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if ((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm)) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_76)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_104_p2 == ap_const_lv1_0))) begin
        c_reg_92 <= c_1_fu_130_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_76)) begin
        c_reg_92 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_104_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_69 <= indvar_flatten_next_fu_110_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_76)) begin
        indvar_flatten_reg_69 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_reg_ppstg_exitcond_flatten_reg_200_pp0_it1 == ap_const_lv1_0))) begin
        r_reg_80 <= r_mid2_reg_225;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_76)) begin
        r_reg_80 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm)) begin
        ap_reg_ppstg_exitcond_flatten_reg_200_pp0_it1 <= exitcond_flatten_reg_200;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_flatten_fu_104_p2 == ap_const_lv1_0))) begin
        c_mid2_reg_214 <= c_mid2_fu_122_p3;
        exitcond4_reg_209 <= exitcond4_fu_116_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        exitcond_flatten_reg_200 <= exitcond_flatten_fu_104_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_200 == ap_const_lv1_0))) begin
        r_mid2_reg_225 <= r_mid2_fu_142_p3;
        tmp_9_reg_235 <= tmp_9_fu_190_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_CS_fsm)
begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_ST_st5_fsm_2 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st5_fsm_2 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// buf_r_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_200 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond_flatten_reg_200 == ap_const_lv1_0))) begin
        buf_r_ce0 = ap_const_logic_1;
    end else begin
        buf_r_ce0 = ap_const_logic_0;
    end
end

/// output_r_ce0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_exitcond_flatten_reg_200_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_reg_ppstg_exitcond_flatten_reg_200_pp0_it1 == ap_const_lv1_0))) begin
        output_r_ce0 = ap_const_logic_1;
    end else begin
        output_r_ce0 = ap_const_logic_0;
    end
end

/// output_r_we0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_exitcond_flatten_reg_200_pp0_it1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_reg_ppstg_exitcond_flatten_reg_200_pp0_it1 == ap_const_lv1_0))) begin
        output_r_we0 = ap_const_logic_1;
    end else begin
        output_r_we0 = ap_const_logic_0;
    end
end

/// r_phi_fu_84_p4 assign process. ///
always @ (ap_CS_fsm or r_reg_80 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_exitcond_flatten_reg_200_pp0_it1 or r_mid2_reg_225)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_reg_ppstg_exitcond_flatten_reg_200_pp0_it1 == ap_const_lv1_0))) begin
        r_phi_fu_84_p4 = r_mid2_reg_225;
    end else begin
        r_phi_fu_84_p4 = r_reg_80;
    end
end
always @ (ap_CS_fsm or exitcond_flatten_fu_104_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_sig_bdd_76)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~ap_sig_bdd_76) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_pp0_stg0_fsm_1 : 
            if ((~((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_104_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_flatten_fu_104_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st5_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_2;
            end
        ap_ST_st5_fsm_2 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_76 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_76 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign buf_r_address0 = tmp_4_fu_185_p1;
assign c_1_fu_130_p2 = (c_mid2_fu_122_p3 + ap_const_lv4_1);
assign c_cast6_fu_161_p1 = $unsigned(c_mid2_reg_214);
assign c_mid2_fu_122_p3 = ((exitcond4_fu_116_p2)? ap_const_lv4_0: c_reg_92);
assign exitcond4_fu_116_p2 = (c_reg_92 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_flatten_fu_104_p2 = (indvar_flatten_reg_69 == ap_const_lv7_40? 1'b1: 1'b0);
assign indvar_flatten_next_fu_110_p2 = (indvar_flatten_reg_69 + ap_const_lv7_1);
assign output_r_address0 = tmp_3_fu_196_p1;
assign output_r_d0 = buf_r_q0;
assign p_addr1_fu_179_p2 = (p_addr_cast_fu_175_p1 + tmp_8_trn_cast_fu_164_p1);
assign p_addr_cast_fu_175_p1 = $unsigned(tmp_1_fu_167_p3);
assign r_mid2_fu_142_p3 = ((exitcond4_reg_209)? r_s_fu_136_p2: r_phi_fu_84_p4);
assign r_s_fu_136_p2 = (r_phi_fu_84_p4 + ap_const_lv4_1);
assign tmp_1_fu_167_p3 = {{r_mid2_fu_142_p3}, {ap_const_lv3_0}};
assign tmp_3_fu_196_p1 = $unsigned(tmp_9_reg_235);
assign tmp_4_fu_185_p1 = $unsigned(p_addr1_fu_179_p2);
assign tmp_8_trn_cast_fu_164_p1 = $unsigned(c_mid2_reg_214);
assign tmp_9_fu_190_p2 = (tmp_s_fu_153_p3 + c_cast6_fu_161_p1);
assign tmp_fu_149_p1 = r_mid2_fu_142_p3[2:0];
assign tmp_s_fu_153_p3 = {{tmp_fu_149_p1}, {ap_const_lv3_0}};


endmodule //write_data

