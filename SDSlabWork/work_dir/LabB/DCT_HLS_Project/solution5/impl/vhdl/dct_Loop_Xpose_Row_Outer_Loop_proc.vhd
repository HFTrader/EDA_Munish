-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_Loop_Xpose_Row_Outer_Loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row_outbuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_ce0 : OUT STD_LOGIC;
    row_outbuf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce0 : OUT STD_LOGIC;
    col_inbuf_we0 : OUT STD_LOGIC;
    col_inbuf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_Loop_Xpose_Row_Outer_Loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st5_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal indvar_flatten_reg_67 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_0_i_reg_78 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_i_reg_89 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_197 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_197_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_107_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_i_mid2_fu_119_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_i_mid2_reg_206 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_i_mid2_reg_206_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_i_mid2_fu_133_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_i_mid2_reg_212 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_0_i_mid2_reg_212_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_141_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_76 : BOOLEAN;
    signal j_0_i_phi_fu_82_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_i8_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j6_fu_127_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_150_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_trn_cast_fu_147_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_175_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr4_cast_fu_182_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_trn_cast_fu_172_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr5_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_ST_st5_fsm_2 = ap_CS_fsm)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((exitcond_flatten_fu_101_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_76))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (exitcond_flatten_fu_101_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_76)) or ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((exitcond_flatten_fu_101_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_76))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_i_reg_89 assign process. --
    i_1_i_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_101_p2 = ap_const_lv1_0))) then 
                i_1_i_reg_89 <= i_fu_141_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_76))) then 
                i_1_i_reg_89 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_67 assign process. --
    indvar_flatten_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_101_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_67 <= indvar_flatten_next_fu_107_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_76))) then 
                indvar_flatten_reg_67 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    -- j_0_i_reg_78 assign process. --
    j_0_i_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_197 = ap_const_lv1_0))) then 
                j_0_i_reg_78 <= j_0_i_mid2_reg_212;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_76))) then 
                j_0_i_reg_78 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond_flatten_reg_197_pp0_it1 <= exitcond_flatten_reg_197;
                ap_reg_ppstg_i_1_i_mid2_reg_206_pp0_it1 <= i_1_i_mid2_reg_206;
                ap_reg_ppstg_j_0_i_mid2_reg_212_pp0_it1 <= j_0_i_mid2_reg_212;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                exitcond_flatten_reg_197 <= exitcond_flatten_fu_101_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_101_p2 = ap_const_lv1_0))) then
                i_1_i_mid2_reg_206 <= i_1_i_mid2_fu_119_p3;
                j_0_i_mid2_reg_212 <= j_0_i_mid2_fu_133_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , exitcond_flatten_fu_101_p2 , ap_reg_ppiten_pp0_it0 , ap_reg_ppiten_pp0_it1 , ap_reg_ppiten_pp0_it2 , ap_sig_bdd_76)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_76)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_101_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_101_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_2;
                end if;
            when ap_ST_st5_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_ST_st5_fsm_2 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st5_fsm_2 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_76 assign process. --
    ap_sig_bdd_76_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_76 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

    col_inbuf_address0 <= tmp_18_fu_192_p1(6 - 1 downto 0);

    -- col_inbuf_ce0 assign process. --
    col_inbuf_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_flatten_reg_197_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond_flatten_reg_197_pp0_it1 = ap_const_lv1_0))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_d0 <= row_outbuf_q0;

    -- col_inbuf_we0 assign process. --
    col_inbuf_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_flatten_reg_197_pp0_it1)
    begin
        if ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond_flatten_reg_197_pp0_it1 = ap_const_lv1_0)))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_i8_fu_113_p2 <= "1" when (i_1_i_reg_89 = ap_const_lv4_8) else "0";
    exitcond_flatten_fu_101_p2 <= "1" when (indvar_flatten_reg_67 = ap_const_lv7_40) else "0";
    i_1_i_mid2_fu_119_p3 <= 
        ap_const_lv4_0 when (exitcond5_i8_fu_113_p2(0) = '1') else 
        i_1_i_reg_89;
    i_fu_141_p2 <= std_logic_vector(unsigned(i_1_i_mid2_fu_119_p3) + unsigned(ap_const_lv4_1));
    indvar_flatten_next_fu_107_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_67) + unsigned(ap_const_lv7_1));
    j6_fu_127_p2 <= std_logic_vector(unsigned(j_0_i_phi_fu_82_p4) + unsigned(ap_const_lv4_1));
    j_0_i_mid2_fu_133_p3 <= 
        j6_fu_127_p2 when (exitcond5_i8_fu_113_p2(0) = '1') else 
        j_0_i_phi_fu_82_p4;

    -- j_0_i_phi_fu_82_p4 assign process. --
    j_0_i_phi_fu_82_p4_assign_proc : process(ap_CS_fsm, j_0_i_reg_78, exitcond_flatten_reg_197, ap_reg_ppiten_pp0_it1, j_0_i_mid2_reg_212)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_197 = ap_const_lv1_0))) then 
            j_0_i_phi_fu_82_p4 <= j_0_i_mid2_reg_212;
        else 
            j_0_i_phi_fu_82_p4 <= j_0_i_reg_78;
        end if; 
    end process;

    p_addr1_fu_161_p2 <= std_logic_vector(unsigned(p_addr_cast_fu_157_p1) + unsigned(tmp_trn_cast_fu_147_p1));
    p_addr4_cast_fu_182_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_175_p3),8));
    p_addr5_fu_186_p2 <= std_logic_vector(unsigned(p_addr4_cast_fu_182_p1) + unsigned(tmp_8_trn_cast_fu_172_p1));
    p_addr_cast_fu_157_p1 <= std_logic_vector(resize(unsigned(tmp_fu_150_p3),8));
    row_outbuf_address0 <= tmp_s_fu_167_p1(6 - 1 downto 0);

    -- row_outbuf_ce0 assign process. --
    row_outbuf_ce0_assign_proc : process(ap_CS_fsm, exitcond_flatten_reg_197, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_197 = ap_const_lv1_0))) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_17_fu_175_p3 <= (ap_reg_ppstg_j_0_i_mid2_reg_212_pp0_it1 & ap_const_lv3_0);
    tmp_18_fu_192_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_186_p2),64));
    tmp_8_trn_cast_fu_172_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i_1_i_mid2_reg_206_pp0_it1),8));
    tmp_fu_150_p3 <= (i_1_i_mid2_reg_206 & ap_const_lv3_0);
    tmp_s_fu_167_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_161_p2),64));
    tmp_trn_cast_fu_147_p1 <= std_logic_vector(resize(unsigned(j_0_i_mid2_reg_212),8));
end behav;
