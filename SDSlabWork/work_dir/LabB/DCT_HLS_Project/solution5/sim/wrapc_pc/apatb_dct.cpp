// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>

using namespace std;
using namespace sc_core;
using namespace sc_dt;




   #define AUTOTB_TVIN_input_r  "../tv/cdatafile/c.dct.autotvin_input_r.dat"
   #define AUTOTB_TVOUT_output_r  "../tv/cdatafile/c.dct.autotvout_output_r.dat"
   #define AUTOTB_TVIN_output_r  "../tv/cdatafile/c.dct.autotvin_output_r.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVOUT_PC_output_r  "../tv/rtldatafile/rtl.dct.autotvout_output_r.dat"

class AESL_RUNTIME {
    public:
        AESL_RUNTIME(const char* name) {
            mName = name;
            mFile = fopen(mName, "w");
            if (mFile == NULL) {
                cout<<"Failed to open tv file ."<<mName<<endl;
                exit (1);
            }
            fprintf(mFile, "[[[runtime]]]\n");
        }
        ~AESL_RUNTIME() {
            fprintf(mFile, "[[[/runtime]]]\n");
            fclose(mFile);
        }
    public:
        FILE* mFile;
        const char* mName;
};

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            input_r_depth = 0;
            output_r_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {input_r "<< input_r_depth << "}\n";
            total_list<<"   {output_r "<< output_r_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int input_r_depth;
        int output_r_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

class AESL_RUNTIME_PC {
    public:
        AESL_RUNTIME_PC(const char* name) {
            file_token.open( name);
            if (!file_token.good()) {
                cout<<"Failed to open tv file ."<<name<<endl;
                exit (1);
            }
            file_token >> mName;//[[[runtime]]]
        }
        ~AESL_RUNTIME_PC() {
            file_token.close();
        }
    public:
        fstream file_token;
        string mName;
};

#define dct AESL_ORIG_DUT_dct
extern void dct ( short input[64],  short output[64]);
#undef dct
void dct ( short input[64],  short output[64]) {

        fstream wrapc_switch_file_token;

        wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

        int AESL_i;

        if (wrapc_switch_file_token.good()) {

            static unsigned AESL_transaction_pc;

            string AESL_token;

            string AESL_num;

            static AESL_RUNTIME_PC tvout_pc_output_r(AUTOTB_TVOUT_PC_output_r);

            tvout_pc_output_r.file_token >> AESL_token;//[[transaction]]

            if ( AESL_token != "[[transaction]]") {

               exit(1);

            }

            tvout_pc_output_r.file_token >> AESL_num;//transaction number

            if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

                tvout_pc_output_r.file_token >> AESL_token;//data

                sc_bv<16> *output_r_pc_buffer = new sc_bv<16>[64];

                int i = 0;

                while (AESL_token != "[[/transaction]]") {

                    bool no_x = false;

                    bool err = false;

                    while (!no_x) {

                    size_t x_found = AESL_token.find('X');

                    if (x_found != string::npos) {

                        if (!err) {

                            cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_r', possible cause: There are uninitialized variables in the C design." << endl; 

                            err = true;

                        }

                        AESL_token.replace(x_found, 1, "0");

                    } else {

                        no_x = true;

                    }

                    }

                    no_x = false;

                    while (!no_x) {

                    size_t x_found = AESL_token.find('x', 2);

                    if (x_found != string::npos) {

                        if (!err) {

                            cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'output_r', possible cause: There are uninitialized variables in the C design." << endl; 

                            err = true;

                        }

                        AESL_token.replace(x_found, 1, "0");

                    } else {

                        no_x = true;

                    }

                    }

                    if (AESL_token != "") {

                        output_r_pc_buffer[i] = AESL_token.c_str();

                        i++;

                    }

                    tvout_pc_output_r.file_token >> AESL_token;//data or [[/transaction]]

                    if (AESL_token == "[[[/runtime]]]" || tvout_pc_output_r.file_token.eof()) {

                       exit(1);

                    }

                }

                if (i > 0) {

                    AESL_i = 0; //subscript for rtl array

                    for (int i_0 = 0; i_0 <= 63 ; i_0+= 1) {

                        output[i_0] = (sc_bv<16>(output_r_pc_buffer[0 + AESL_i].range(15, 0))).to_uint64();

                        AESL_i++;

                    }

                    }

                delete [] output_r_pc_buffer;

            }

            AESL_transaction_pc ++ ;

        } else {

            static unsigned AESL_transaction;

            static AESL_RUNTIME tvin_input_r(AUTOTB_TVIN_input_r);

            static AESL_RUNTIME tvout_output_r(AUTOTB_TVOUT_output_r);

            static AESL_RUNTIME tvin_output_r(AUTOTB_TVIN_output_r);

            static INTER_TCL_FILE tcl_file(INTER_TCL);


            int leading_zero;

            fprintf(tvin_input_r.mFile, "[[transaction]] %d\n", AESL_transaction);

            sc_bv<16> *input_r_tvin_wrapc_buffer = new sc_bv<16>[64];

            AESL_i = 0; //subscript for rtl array

            for (int i_0 = 0; i_0 <= 63 ; i_0+= 1) {

                input_r_tvin_wrapc_buffer[0 + AESL_i].range(15, 0) = input[i_0];

                AESL_i++;

            }

            for (int i = 0; i < 64 ; i++) {

                fprintf(tvin_input_r.mFile, "%s\n", (input_r_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            }

            tcl_file.set_num(64,&tcl_file.input_r_depth);

            fprintf(tvin_input_r.mFile, "[[/transaction]] \n");

            delete [] input_r_tvin_wrapc_buffer;

            fprintf(tvin_output_r.mFile, "[[transaction]] %d\n", AESL_transaction);

            sc_bv<16> *output_r_tvin_wrapc_buffer = new sc_bv<16>[64];

            AESL_i = 0; //subscript for rtl array

            for (int i_0 = 0; i_0 <= 63 ; i_0+= 1) {

                output_r_tvin_wrapc_buffer[0 + AESL_i].range(15, 0) = output[i_0];

                AESL_i++;

            }

            for (int i = 0; i < 64 ; i++) {

                fprintf(tvin_output_r.mFile, "%s\n", (output_r_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            }

            tcl_file.set_num(64,&tcl_file.output_r_depth);

            fprintf(tvin_output_r.mFile, "[[/transaction]] \n");

            delete [] output_r_tvin_wrapc_buffer;

            AESL_ORIG_DUT_dct(input,output);

            fprintf(tvout_output_r.mFile, "[[transaction]] %d\n", AESL_transaction);

            sc_bv<16> *output_r_tvout_wrapc_buffer = new sc_bv<16>[64];

            AESL_i = 0; //subscript for rtl array

            for (int i_0 = 0; i_0 <= 63 ; i_0+= 1) {

                output_r_tvout_wrapc_buffer[0 + AESL_i].range(15, 0) = output[i_0];

                AESL_i++;

            }

            for (int i = 0; i < 64 ; i++) {

                fprintf(tvout_output_r.mFile, "%s\n", (output_r_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            }

            tcl_file.set_num(64,&tcl_file.output_r_depth);

            fprintf(tvout_output_r.mFile, "[[/transaction]] \n");

            delete [] output_r_tvout_wrapc_buffer;

            AESL_transaction++;

            tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

        }
}


