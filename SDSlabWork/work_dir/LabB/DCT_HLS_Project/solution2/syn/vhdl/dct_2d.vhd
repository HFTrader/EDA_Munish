-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_block_ce0 : OUT STD_LOGIC;
    in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_block_ce0 : OUT STD_LOGIC;
    out_block_we0 : OUT STD_LOGIC;
    out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st7_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st8_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_pp1_stg0_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_ST_st12_fsm_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal indvar_flatten_reg_129 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_140 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_151 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten2_reg_174 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_196 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_fu_229_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_447_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_241_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_mid2_fu_253_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_mid2_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_456_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_267_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_reg_462 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_mid2_reg_462_pp0_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_fu_275_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_fu_337_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_482 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten2_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_487 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten2_reg_487_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_349_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_mid2_fu_361_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_mid2_reg_496 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_i_3_mid2_reg_496_pp1_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_fu_375_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_mid2_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_j_1_mid2_reg_502_pp1_it1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_fu_383_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond7_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_outbuf_ce0 : STD_LOGIC;
    signal row_outbuf_we0 : STD_LOGIC;
    signal row_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_outbuf_ce0 : STD_LOGIC;
    signal col_outbuf_we0 : STD_LOGIC;
    signal col_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce0 : STD_LOGIC;
    signal col_inbuf_we0 : STD_LOGIC;
    signal col_inbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_fu_208_ap_start : STD_LOGIC;
    signal grp_dct_1d_fu_208_ap_done : STD_LOGIC;
    signal grp_dct_1d_fu_208_ap_idle : STD_LOGIC;
    signal grp_dct_1d_fu_208_ap_ready : STD_LOGIC;
    signal grp_dct_1d_fu_208_src_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d_fu_208_src_ce0 : STD_LOGIC;
    signal grp_dct_1d_fu_208_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_fu_208_tmp_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_1d_fu_208_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d_fu_208_dst_ce0 : STD_LOGIC;
    signal grp_dct_1d_fu_208_dst_we0 : STD_LOGIC;
    signal grp_dct_1d_fu_208_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_fu_208_tmp_11 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_117 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_phi_fu_144_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_phi_fu_189_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_1d_fu_208_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_6_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_s_fu_261_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_284_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_291_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_trn_cast_fu_281_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr5_fu_295_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_309_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr6_cast_fu_316_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_trn_cast_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr7_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_369_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_392_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr8_cast_fu_399_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_trn_cast_fu_389_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr9_fu_403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_417_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr3_cast_fu_424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_trn_cast_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr4_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component dct_1d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp_11 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    row_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_outbuf_address0,
        ce0 => row_outbuf_ce0,
        we0 => row_outbuf_we0,
        d0 => row_outbuf_d0,
        q0 => row_outbuf_q0);

    col_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_outbuf_address0,
        ce0 => col_outbuf_ce0,
        we0 => col_outbuf_we0,
        d0 => col_outbuf_d0,
        q0 => col_outbuf_q0);

    col_inbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inbuf_address0,
        ce0 => col_inbuf_ce0,
        we0 => col_inbuf_we0,
        d0 => col_inbuf_d0,
        q0 => col_inbuf_q0);

    grp_dct_1d_fu_208 : component dct_1d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_1d_fu_208_ap_start,
        ap_done => grp_dct_1d_fu_208_ap_done,
        ap_idle => grp_dct_1d_fu_208_ap_idle,
        ap_ready => grp_dct_1d_fu_208_ap_ready,
        src_address0 => grp_dct_1d_fu_208_src_address0,
        src_ce0 => grp_dct_1d_fu_208_src_ce0,
        src_q0 => grp_dct_1d_fu_208_src_q0,
        tmp_1 => grp_dct_1d_fu_208_tmp_1,
        dst_address0 => grp_dct_1d_fu_208_dst_address0,
        dst_ce0 => grp_dct_1d_fu_208_dst_ce0,
        dst_we0 => grp_dct_1d_fu_208_dst_we0,
        dst_d0 => grp_dct_1d_fu_208_dst_d0,
        tmp_11 => grp_dct_1d_fu_208_tmp_11);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and not((exitcond_flatten_fu_235_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_223_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (exitcond_flatten_fu_235_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_223_p2))) or ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and not((exitcond_flatten_fu_235_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_223_p2)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_flatten2_fu_343_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st7_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_331_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_flatten2_fu_343_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st7_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_331_p2))) or ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_flatten2_fu_343_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif (((ap_ST_st7_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_331_p2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_dct_1d_fu_208_ap_start_ap_start_reg assign process. --
    grp_dct_1d_fu_208_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_1d_fu_208_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_223_p2)) or ((ap_ST_st7_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_331_p2)))) then 
                    grp_dct_1d_fu_208_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_1d_fu_208_ap_ready)) then 
                    grp_dct_1d_fu_208_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_151 assign process. --
    i_1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_223_p2)))) then 
                i_1_reg_151 <= ap_const_lv4_0;
            elsif (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_235_p2 = ap_const_lv1_0))) then 
                i_1_reg_151 <= i_6_fu_275_p2;
            end if; 
        end if;
    end process;

    -- i_2_reg_162 assign process. --
    i_2_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_235_p2 = ap_const_lv1_0)))) then 
                i_2_reg_162 <= ap_const_lv4_0;
            elsif ((not((ap_const_logic_0 = grp_dct_1d_fu_208_ap_done)) and (ap_ST_st8_fsm_5 = ap_CS_fsm))) then 
                i_2_reg_162 <= i_5_reg_482;
            end if; 
        end if;
    end process;

    -- i_3_reg_196 assign process. --
    i_3_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_331_p2)))) then 
                i_3_reg_196 <= ap_const_lv4_0;
            elsif (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_flatten2_fu_343_p2))) then 
                i_3_reg_196 <= i_7_fu_383_p2;
            end if; 
        end if;
    end process;

    -- i_reg_117 assign process. --
    i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_logic_0 = grp_dct_1d_fu_208_ap_done)))) then 
                i_reg_117 <= i_4_reg_442;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_117 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten2_reg_174 assign process. --
    indvar_flatten2_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_331_p2)))) then 
                indvar_flatten2_reg_174 <= ap_const_lv7_0;
            elsif (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_flatten2_fu_343_p2))) then 
                indvar_flatten2_reg_174 <= indvar_flatten_next2_fu_349_p2;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_129 assign process. --
    indvar_flatten_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_223_p2)))) then 
                indvar_flatten_reg_129 <= ap_const_lv7_0;
            elsif (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_235_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_129 <= indvar_flatten_next_fu_241_p2;
            end if; 
        end if;
    end process;

    -- j_1_reg_185 assign process. --
    j_1_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_331_p2)))) then 
                j_1_reg_185 <= ap_const_lv4_0;
            elsif (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten2_reg_487))) then 
                j_1_reg_185 <= j_1_mid2_reg_502;
            end if; 
        end if;
    end process;

    -- j_reg_140 assign process. --
    j_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_223_p2)))) then 
                j_reg_140 <= ap_const_lv4_0;
            elsif (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_447 = ap_const_lv1_0))) then 
                j_reg_140 <= j_mid2_reg_462;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond_flatten2_reg_487_pp1_it1 <= exitcond_flatten2_reg_487;
                ap_reg_ppstg_i_3_mid2_reg_496_pp1_it1 <= i_3_mid2_reg_496;
                ap_reg_ppstg_j_1_mid2_reg_502_pp1_it1 <= j_1_mid2_reg_502;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond_flatten_reg_447_pp0_it1 <= exitcond_flatten_reg_447;
                ap_reg_ppstg_i_1_mid2_reg_456_pp0_it1 <= i_1_mid2_reg_456;
                ap_reg_ppstg_j_mid2_reg_462_pp0_it1 <= j_mid2_reg_462;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then
                exitcond_flatten2_reg_487 <= exitcond_flatten2_fu_343_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                exitcond_flatten_reg_447 <= exitcond_flatten_fu_235_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_235_p2 = ap_const_lv1_0))) then
                i_1_mid2_reg_456 <= i_1_mid2_fu_253_p3;
                j_mid2_reg_462 <= j_mid2_fu_267_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_flatten2_fu_343_p2))) then
                i_3_mid2_reg_496 <= i_3_mid2_fu_361_p3;
                j_1_mid2_reg_502 <= j_1_mid2_fu_375_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_4_reg_442 <= i_4_fu_229_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_4 = ap_CS_fsm)) then
                i_5_reg_482 <= i_5_fu_337_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond_flatten_fu_235_p2 , ap_reg_ppiten_pp0_it0 , ap_reg_ppiten_pp0_it1 , ap_reg_ppiten_pp0_it2 , exitcond_flatten2_fu_343_p2 , ap_reg_ppiten_pp1_it0 , ap_reg_ppiten_pp1_it1 , ap_reg_ppiten_pp1_it2 , exitcond7_fu_223_p2 , exitcond4_fu_331_p2 , grp_dct_1d_fu_208_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_223_p2))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_dct_1d_fu_208_ap_done))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_3 => 
                if ((not(((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_235_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_235_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_4;
                end if;
            when ap_ST_st7_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_331_p2))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_5;
                end if;
            when ap_ST_st8_fsm_5 => 
                if (not((ap_const_logic_0 = grp_dct_1d_fu_208_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_5;
                end if;
            when ap_ST_pp1_stg0_fsm_6 => 
                if ((not(((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_flatten2_fu_343_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_6;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_flatten2_fu_343_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_7;
                end if;
            when ap_ST_st12_fsm_7 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st12_fsm_7 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st12_fsm_7 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- col_inbuf_address0 assign process. --
    col_inbuf_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it2, grp_dct_1d_fu_208_src_address0, tmp_8_fu_326_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            col_inbuf_address0 <= tmp_8_fu_326_p1(6 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_5 = ap_CS_fsm)) then 
            col_inbuf_address0 <= grp_dct_1d_fu_208_src_address0;
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- col_inbuf_ce0 assign process. --
    col_inbuf_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_flatten_reg_447_pp0_it1, grp_dct_1d_fu_208_src_ce0)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond_flatten_reg_447_pp0_it1 = ap_const_lv1_0))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st8_fsm_5 = ap_CS_fsm)) then 
            col_inbuf_ce0 <= grp_dct_1d_fu_208_src_ce0;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_d0 <= row_outbuf_q0;

    -- col_inbuf_we0 assign process. --
    col_inbuf_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_flatten_reg_447_pp0_it1)
    begin
        if ((((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_reg_ppstg_exitcond_flatten_reg_447_pp0_it1 = ap_const_lv1_0)))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- col_outbuf_address0 assign process. --
    col_outbuf_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it1, grp_dct_1d_fu_208_dst_address0, tmp_2_fu_409_p1)
    begin
        if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            col_outbuf_address0 <= tmp_2_fu_409_p1(6 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_5 = ap_CS_fsm)) then 
            col_outbuf_address0 <= grp_dct_1d_fu_208_dst_address0;
        else 
            col_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- col_outbuf_ce0 assign process. --
    col_outbuf_ce0_assign_proc : process(ap_CS_fsm, exitcond_flatten2_reg_487, ap_reg_ppiten_pp1_it1, grp_dct_1d_fu_208_dst_ce0)
    begin
        if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten2_reg_487))) then 
            col_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st8_fsm_5 = ap_CS_fsm)) then 
            col_outbuf_ce0 <= grp_dct_1d_fu_208_dst_ce0;
        else 
            col_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_d0 <= grp_dct_1d_fu_208_dst_d0;

    -- col_outbuf_we0 assign process. --
    col_outbuf_we0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_208_dst_we0)
    begin
        if ((ap_ST_st8_fsm_5 = ap_CS_fsm)) then 
            col_outbuf_we0 <= grp_dct_1d_fu_208_dst_we0;
        else 
            col_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_355_p2 <= "1" when (i_3_reg_196 = ap_const_lv4_8) else "0";
    exitcond4_fu_331_p2 <= "1" when (i_2_reg_162 = ap_const_lv4_8) else "0";
    exitcond7_fu_223_p2 <= "1" when (i_reg_117 = ap_const_lv4_8) else "0";
    exitcond_flatten2_fu_343_p2 <= "1" when (indvar_flatten2_reg_174 = ap_const_lv7_40) else "0";
    exitcond_flatten_fu_235_p2 <= "1" when (indvar_flatten_reg_129 = ap_const_lv7_40) else "0";
    exitcond_fu_247_p2 <= "1" when (i_1_reg_151 = ap_const_lv4_8) else "0";
    grp_dct_1d_fu_208_ap_start <= grp_dct_1d_fu_208_ap_start_ap_start_reg;

    -- grp_dct_1d_fu_208_src_q0 assign process. --
    grp_dct_1d_fu_208_src_q0_assign_proc : process(ap_CS_fsm, in_block_q0, col_inbuf_q0)
    begin
        if ((ap_ST_st8_fsm_5 = ap_CS_fsm)) then 
            grp_dct_1d_fu_208_src_q0 <= col_inbuf_q0;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            grp_dct_1d_fu_208_src_q0 <= in_block_q0;
        else 
            grp_dct_1d_fu_208_src_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_dct_1d_fu_208_tmp_1 assign process. --
    grp_dct_1d_fu_208_tmp_1_assign_proc : process(ap_CS_fsm, i_reg_117, i_2_reg_162)
    begin
        if ((ap_ST_st8_fsm_5 = ap_CS_fsm)) then 
            grp_dct_1d_fu_208_tmp_1 <= i_2_reg_162;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            grp_dct_1d_fu_208_tmp_1 <= i_reg_117;
        else 
            grp_dct_1d_fu_208_tmp_1 <= "XXXX";
        end if; 
    end process;


    -- grp_dct_1d_fu_208_tmp_11 assign process. --
    grp_dct_1d_fu_208_tmp_11_assign_proc : process(ap_CS_fsm, i_reg_117, i_2_reg_162)
    begin
        if ((ap_ST_st8_fsm_5 = ap_CS_fsm)) then 
            grp_dct_1d_fu_208_tmp_11 <= i_2_reg_162;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            grp_dct_1d_fu_208_tmp_11 <= i_reg_117;
        else 
            grp_dct_1d_fu_208_tmp_11 <= "XXXX";
        end if; 
    end process;

    i_1_mid2_fu_253_p3 <= 
        ap_const_lv4_0 when (exitcond_fu_247_p2(0) = '1') else 
        i_1_reg_151;
    i_3_mid2_fu_361_p3 <= 
        ap_const_lv4_0 when (exitcond1_fu_355_p2(0) = '1') else 
        i_3_reg_196;
    i_4_fu_229_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv4_1));
    i_5_fu_337_p2 <= std_logic_vector(unsigned(i_2_reg_162) + unsigned(ap_const_lv4_1));
    i_6_fu_275_p2 <= std_logic_vector(unsigned(i_1_mid2_fu_253_p3) + unsigned(ap_const_lv4_1));
    i_7_fu_383_p2 <= std_logic_vector(unsigned(i_3_mid2_fu_361_p3) + unsigned(ap_const_lv4_1));
    in_block_address0 <= grp_dct_1d_fu_208_src_address0;

    -- in_block_ce0 assign process. --
    in_block_ce0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_208_src_ce0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            in_block_ce0 <= grp_dct_1d_fu_208_src_ce0;
        else 
            in_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next2_fu_349_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_174) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_241_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_129) + unsigned(ap_const_lv7_1));
    j_1_mid2_fu_375_p3 <= 
        j_2_fu_369_p2 when (exitcond1_fu_355_p2(0) = '1') else 
        j_1_phi_fu_189_p4;

    -- j_1_phi_fu_189_p4 assign process. --
    j_1_phi_fu_189_p4_assign_proc : process(ap_CS_fsm, j_1_reg_185, exitcond_flatten2_reg_487, ap_reg_ppiten_pp1_it1, j_1_mid2_reg_502)
    begin
        if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_flatten2_reg_487))) then 
            j_1_phi_fu_189_p4 <= j_1_mid2_reg_502;
        else 
            j_1_phi_fu_189_p4 <= j_1_reg_185;
        end if; 
    end process;

    j_2_fu_369_p2 <= std_logic_vector(unsigned(j_1_phi_fu_189_p4) + unsigned(ap_const_lv4_1));
    j_mid2_fu_267_p3 <= 
        j_s_fu_261_p2 when (exitcond_fu_247_p2(0) = '1') else 
        j_phi_fu_144_p4;

    -- j_phi_fu_144_p4 assign process. --
    j_phi_fu_144_p4_assign_proc : process(ap_CS_fsm, j_reg_140, exitcond_flatten_reg_447, ap_reg_ppiten_pp0_it1, j_mid2_reg_462)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_447 = ap_const_lv1_0))) then 
            j_phi_fu_144_p4 <= j_mid2_reg_462;
        else 
            j_phi_fu_144_p4 <= j_reg_140;
        end if; 
    end process;

    j_s_fu_261_p2 <= std_logic_vector(unsigned(j_phi_fu_144_p4) + unsigned(ap_const_lv4_1));
    out_block_address0 <= tmp_4_fu_434_p1(6 - 1 downto 0);

    -- out_block_ce0 assign process. --
    out_block_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond_flatten2_reg_487_pp1_it1)
    begin
        if (((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten2_reg_487_pp1_it1))) then 
            out_block_ce0 <= ap_const_logic_1;
        else 
            out_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_block_d0 <= col_outbuf_q0;

    -- out_block_we0 assign process. --
    out_block_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond_flatten2_reg_487_pp1_it1)
    begin
        if ((((ap_ST_pp1_stg0_fsm_6 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten2_reg_487_pp1_it1)))) then 
            out_block_we0 <= ap_const_logic_1;
        else 
            out_block_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr3_cast_fu_424_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_417_p3),8));
    p_addr4_fu_428_p2 <= std_logic_vector(unsigned(p_addr3_cast_fu_424_p1) + unsigned(tmp_4_trn_cast_fu_414_p1));
    p_addr5_fu_295_p2 <= std_logic_vector(unsigned(p_addr_cast_fu_291_p1) + unsigned(tmp_trn_cast_fu_281_p1));
    p_addr6_cast_fu_316_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_309_p3),8));
    p_addr7_fu_320_p2 <= std_logic_vector(unsigned(p_addr6_cast_fu_316_p1) + unsigned(tmp_2_trn_cast_fu_306_p1));
    p_addr8_cast_fu_399_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_392_p3),8));
    p_addr9_fu_403_p2 <= std_logic_vector(unsigned(p_addr8_cast_fu_399_p1) + unsigned(tmp_3_trn_cast_fu_389_p1));
    p_addr_cast_fu_291_p1 <= std_logic_vector(resize(unsigned(tmp_fu_284_p3),8));

    -- row_outbuf_address0 assign process. --
    row_outbuf_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, grp_dct_1d_fu_208_dst_address0, tmp_6_fu_301_p1)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            row_outbuf_address0 <= tmp_6_fu_301_p1(6 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            row_outbuf_address0 <= grp_dct_1d_fu_208_dst_address0;
        else 
            row_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- row_outbuf_ce0 assign process. --
    row_outbuf_ce0_assign_proc : process(ap_CS_fsm, exitcond_flatten_reg_447, ap_reg_ppiten_pp0_it1, grp_dct_1d_fu_208_dst_ce0)
    begin
        if (((ap_ST_pp0_stg0_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_447 = ap_const_lv1_0))) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            row_outbuf_ce0 <= grp_dct_1d_fu_208_dst_ce0;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_outbuf_d0 <= grp_dct_1d_fu_208_dst_d0;

    -- row_outbuf_we0 assign process. --
    row_outbuf_we0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_208_dst_we0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            row_outbuf_we0 <= grp_dct_1d_fu_208_dst_we0;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_409_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_403_p2),64));
    tmp_2_trn_cast_fu_306_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i_1_mid2_reg_456_pp0_it1),8));
    tmp_3_fu_417_p3 <= (ap_reg_ppstg_j_1_mid2_reg_502_pp1_it1 & ap_const_lv3_0);
    tmp_3_trn_cast_fu_389_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_reg_502),8));
    tmp_4_fu_434_p1 <= std_logic_vector(resize(unsigned(p_addr4_fu_428_p2),64));
    tmp_4_trn_cast_fu_414_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i_3_mid2_reg_496_pp1_it1),8));
    tmp_6_fu_301_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_295_p2),64));
    tmp_7_fu_309_p3 <= (ap_reg_ppstg_j_mid2_reg_462_pp0_it1 & ap_const_lv3_0);
    tmp_8_fu_326_p1 <= std_logic_vector(resize(unsigned(p_addr7_fu_320_p2),64));
    tmp_fu_284_p3 <= (i_1_mid2_reg_456 & ap_const_lv3_0);
    tmp_s_fu_392_p3 <= (i_3_mid2_reg_496 & ap_const_lv3_0);
    tmp_trn_cast_fu_281_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_462),8));
end behav;
