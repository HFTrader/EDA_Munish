-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_block_ce0 : OUT STD_LOGIC;
    in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_block_ce0 : OUT STD_LOGIC;
    out_block_we0 : OUT STD_LOGIC;
    out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_4_fu_197_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_374 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_fu_209_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_382 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_fu_221_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_reg_390 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_287_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_403 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_fu_299_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_411 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_fu_311_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_419 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_outbuf_ce0 : STD_LOGIC;
    signal row_outbuf_we0 : STD_LOGIC;
    signal row_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_outbuf_ce0 : STD_LOGIC;
    signal col_outbuf_we0 : STD_LOGIC;
    signal col_outbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_outbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce0 : STD_LOGIC;
    signal col_inbuf_we0 : STD_LOGIC;
    signal col_inbuf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_fu_176_ap_start : STD_LOGIC;
    signal grp_dct_1d_fu_176_ap_done : STD_LOGIC;
    signal grp_dct_1d_fu_176_ap_idle : STD_LOGIC;
    signal grp_dct_1d_fu_176_ap_ready : STD_LOGIC;
    signal grp_dct_1d_fu_176_src_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d_fu_176_src_ce0 : STD_LOGIC;
    signal grp_dct_1d_fu_176_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_fu_176_tmp_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_1d_fu_176_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d_fu_176_dst_ce0 : STD_LOGIC;
    signal grp_dct_1d_fu_176_dst_we0 : STD_LOGIC;
    signal grp_dct_1d_fu_176_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_fu_176_tmp_11 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_103 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_115 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond7_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_127 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_139 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_151 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_163 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dct_1d_fu_176_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_7_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_231_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr_cast_fu_239_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_trn_cast_fu_227_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr1_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_258_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr6_cast_fu_266_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_trn_cast_fu_254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr7_fu_270_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_321_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr2_cast_fu_329_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_trn_cast_fu_317_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr3_fu_333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_348_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_addr4_cast_fu_356_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_trn_cast_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr5_fu_360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component dct_1d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        tmp_11 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    row_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_outbuf_address0,
        ce0 => row_outbuf_ce0,
        we0 => row_outbuf_we0,
        d0 => row_outbuf_d0,
        q0 => row_outbuf_q0);

    col_outbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_outbuf_address0,
        ce0 => col_outbuf_ce0,
        we0 => col_outbuf_we0,
        d0 => col_outbuf_d0,
        q0 => col_outbuf_q0);

    col_inbuf_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inbuf_address0,
        ce0 => col_inbuf_ce0,
        we0 => col_inbuf_we0,
        d0 => col_inbuf_d0,
        q0 => col_inbuf_q0);

    grp_dct_1d_fu_176 : component dct_1d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_1d_fu_176_ap_start,
        ap_done => grp_dct_1d_fu_176_ap_done,
        ap_idle => grp_dct_1d_fu_176_ap_idle,
        ap_ready => grp_dct_1d_fu_176_ap_ready,
        src_address0 => grp_dct_1d_fu_176_src_address0,
        src_ce0 => grp_dct_1d_fu_176_src_ce0,
        src_q0 => grp_dct_1d_fu_176_src_q0,
        tmp_1 => grp_dct_1d_fu_176_tmp_1,
        dst_address0 => grp_dct_1d_fu_176_dst_address0,
        dst_ce0 => grp_dct_1d_fu_176_dst_ce0,
        dst_we0 => grp_dct_1d_fu_176_dst_we0,
        dst_d0 => grp_dct_1d_fu_176_dst_d0,
        tmp_11 => grp_dct_1d_fu_176_tmp_11);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_dct_1d_fu_176_ap_start_ap_start_reg assign process. --
    grp_dct_1d_fu_176_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_1d_fu_176_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_191_p2)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond4_fu_281_p2)))) then 
                    grp_dct_1d_fu_176_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_1d_fu_176_ap_ready)) then 
                    grp_dct_1d_fu_176_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_127 assign process. --
    i_1_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                i_1_reg_127 <= i_6_reg_390;
            elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond6_fu_203_p2))) then 
                i_1_reg_127 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i_2_reg_139 assign process. --
    i_2_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond6_fu_203_p2)))) then 
                i_2_reg_139 <= ap_const_lv4_0;
            elsif ((not((ap_const_logic_0 = grp_dct_1d_fu_176_ap_done)) and (ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
                i_2_reg_139 <= i_5_reg_403;
            end if; 
        end if;
    end process;

    -- i_3_reg_163 assign process. --
    i_3_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
                i_3_reg_163 <= i_7_reg_419;
            elsif (((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_fu_293_p2))) then 
                i_3_reg_163 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- i_reg_103 assign process. --
    i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_logic_0 = grp_dct_1d_fu_176_ap_done)))) then 
                i_reg_103 <= i_4_reg_374;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_103 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_151 assign process. --
    j_1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond4_fu_281_p2)))) then 
                j_1_reg_151 <= ap_const_lv4_0;
            elsif (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_305_p2)))) then 
                j_1_reg_151 <= j_3_reg_411;
            end if; 
        end if;
    end process;

    -- j_reg_115 assign process. --
    j_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_191_p2)))) then 
                j_reg_115 <= ap_const_lv4_0;
            elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((exitcond5_fu_215_p2 = ap_const_lv1_0)))) then 
                j_reg_115 <= j_2_reg_382;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_4_reg_374 <= i_4_fu_197_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                i_5_reg_403 <= i_5_fu_287_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                i_6_reg_390 <= i_6_fu_221_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then
                i_7_reg_419 <= i_7_fu_311_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                j_2_reg_382 <= j_2_fu_209_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                j_3_reg_411 <= j_3_fu_299_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond5_fu_215_p2 , exitcond_fu_305_p2 , grp_dct_1d_fu_176_ap_done , exitcond7_fu_191_p2 , exitcond6_fu_203_p2 , exitcond4_fu_281_p2 , exitcond3_fu_293_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_191_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_dct_1d_fu_176_ap_done))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond6_fu_203_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((exitcond5_fu_215_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_281_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = grp_dct_1d_fu_176_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_293_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = exitcond_fu_305_p2))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond3_fu_293_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond3_fu_293_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond3_fu_293_p2)
    begin
        if (((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond3_fu_293_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- col_inbuf_address0 assign process. --
    col_inbuf_address0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_176_src_address0, tmp_s_fu_276_p1)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            col_inbuf_address0 <= tmp_s_fu_276_p1(6 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            col_inbuf_address0 <= grp_dct_1d_fu_176_src_address0;
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- col_inbuf_ce0 assign process. --
    col_inbuf_ce0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_176_src_ce0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            col_inbuf_ce0 <= grp_dct_1d_fu_176_src_ce0;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_inbuf_d0 <= row_outbuf_q0;

    -- col_inbuf_we0 assign process. --
    col_inbuf_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- col_outbuf_address0 assign process. --
    col_outbuf_address0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_176_dst_address0, tmp_2_fu_339_p1)
    begin
        if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            col_outbuf_address0 <= tmp_2_fu_339_p1(6 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            col_outbuf_address0 <= grp_dct_1d_fu_176_dst_address0;
        else 
            col_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- col_outbuf_ce0 assign process. --
    col_outbuf_ce0_assign_proc : process(ap_CS_fsm, exitcond_fu_305_p2, grp_dct_1d_fu_176_dst_ce0)
    begin
        if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_305_p2))) then 
            col_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            col_outbuf_ce0 <= grp_dct_1d_fu_176_dst_ce0;
        else 
            col_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_d0 <= grp_dct_1d_fu_176_dst_d0;

    -- col_outbuf_we0 assign process. --
    col_outbuf_we0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_176_dst_we0)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            col_outbuf_we0 <= grp_dct_1d_fu_176_dst_we0;
        else 
            col_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_293_p2 <= "1" when (j_1_reg_151 = ap_const_lv4_8) else "0";
    exitcond4_fu_281_p2 <= "1" when (i_2_reg_139 = ap_const_lv4_8) else "0";
    exitcond5_fu_215_p2 <= "1" when (i_1_reg_127 = ap_const_lv4_8) else "0";
    exitcond6_fu_203_p2 <= "1" when (j_reg_115 = ap_const_lv4_8) else "0";
    exitcond7_fu_191_p2 <= "1" when (i_reg_103 = ap_const_lv4_8) else "0";
    exitcond_fu_305_p2 <= "1" when (i_3_reg_163 = ap_const_lv4_8) else "0";
    grp_dct_1d_fu_176_ap_start <= grp_dct_1d_fu_176_ap_start_ap_start_reg;

    -- grp_dct_1d_fu_176_src_q0 assign process. --
    grp_dct_1d_fu_176_src_q0_assign_proc : process(ap_CS_fsm, in_block_q0, col_inbuf_q0)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            grp_dct_1d_fu_176_src_q0 <= col_inbuf_q0;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            grp_dct_1d_fu_176_src_q0 <= in_block_q0;
        else 
            grp_dct_1d_fu_176_src_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_dct_1d_fu_176_tmp_1 assign process. --
    grp_dct_1d_fu_176_tmp_1_assign_proc : process(ap_CS_fsm, i_reg_103, i_2_reg_139)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            grp_dct_1d_fu_176_tmp_1 <= i_2_reg_139;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            grp_dct_1d_fu_176_tmp_1 <= i_reg_103;
        else 
            grp_dct_1d_fu_176_tmp_1 <= "XXXX";
        end if; 
    end process;


    -- grp_dct_1d_fu_176_tmp_11 assign process. --
    grp_dct_1d_fu_176_tmp_11_assign_proc : process(ap_CS_fsm, i_reg_103, i_2_reg_139)
    begin
        if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            grp_dct_1d_fu_176_tmp_11 <= i_2_reg_139;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            grp_dct_1d_fu_176_tmp_11 <= i_reg_103;
        else 
            grp_dct_1d_fu_176_tmp_11 <= "XXXX";
        end if; 
    end process;

    i_4_fu_197_p2 <= std_logic_vector(unsigned(i_reg_103) + unsigned(ap_const_lv4_1));
    i_5_fu_287_p2 <= std_logic_vector(unsigned(i_2_reg_139) + unsigned(ap_const_lv4_1));
    i_6_fu_221_p2 <= std_logic_vector(unsigned(i_1_reg_127) + unsigned(ap_const_lv4_1));
    i_7_fu_311_p2 <= std_logic_vector(unsigned(i_3_reg_163) + unsigned(ap_const_lv4_1));
    in_block_address0 <= grp_dct_1d_fu_176_src_address0;

    -- in_block_ce0 assign process. --
    in_block_ce0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_176_src_ce0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            in_block_ce0 <= grp_dct_1d_fu_176_src_ce0;
        else 
            in_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_209_p2 <= std_logic_vector(unsigned(j_reg_115) + unsigned(ap_const_lv4_1));
    j_3_fu_299_p2 <= std_logic_vector(unsigned(j_1_reg_151) + unsigned(ap_const_lv4_1));
    out_block_address0 <= tmp_4_fu_366_p1(6 - 1 downto 0);

    -- out_block_ce0 assign process. --
    out_block_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            out_block_ce0 <= ap_const_logic_1;
        else 
            out_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_block_d0 <= col_outbuf_q0;

    -- out_block_we0 assign process. --
    out_block_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st11_fsm_10 = ap_CS_fsm))) then 
            out_block_we0 <= ap_const_logic_1;
        else 
            out_block_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_243_p2 <= std_logic_vector(unsigned(p_addr_cast_fu_239_p1) + unsigned(tmp_trn_cast_fu_227_p1));
    p_addr2_cast_fu_329_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_321_p3),8));
    p_addr3_fu_333_p2 <= std_logic_vector(unsigned(p_addr2_cast_fu_329_p1) + unsigned(tmp_3_trn_cast_fu_317_p1));
    p_addr4_cast_fu_356_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_348_p3),8));
    p_addr5_fu_360_p2 <= std_logic_vector(unsigned(p_addr4_cast_fu_356_p1) + unsigned(tmp_4_trn_cast_fu_344_p1));
    p_addr6_cast_fu_266_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_258_p3),8));
    p_addr7_fu_270_p2 <= std_logic_vector(unsigned(p_addr6_cast_fu_266_p1) + unsigned(tmp_2_trn_cast_fu_254_p1));
    p_addr_cast_fu_239_p1 <= std_logic_vector(resize(unsigned(tmp_fu_231_p3),8));

    -- row_outbuf_address0 assign process. --
    row_outbuf_address0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_176_dst_address0, tmp_7_fu_249_p1)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            row_outbuf_address0 <= tmp_7_fu_249_p1(6 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            row_outbuf_address0 <= grp_dct_1d_fu_176_dst_address0;
        else 
            row_outbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    -- row_outbuf_ce0 assign process. --
    row_outbuf_ce0_assign_proc : process(ap_CS_fsm, exitcond5_fu_215_p2, grp_dct_1d_fu_176_dst_ce0)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (exitcond5_fu_215_p2 = ap_const_lv1_0))) then 
            row_outbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            row_outbuf_ce0 <= grp_dct_1d_fu_176_dst_ce0;
        else 
            row_outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_outbuf_d0 <= grp_dct_1d_fu_176_dst_d0;

    -- row_outbuf_we0 assign process. --
    row_outbuf_we0_assign_proc : process(ap_CS_fsm, grp_dct_1d_fu_176_dst_we0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            row_outbuf_we0 <= grp_dct_1d_fu_176_dst_we0;
        else 
            row_outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_321_p3 <= (i_3_reg_163 & ap_const_lv3_0);
    tmp_2_fu_339_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_333_p2),64));
    tmp_2_trn_cast_fu_254_p1 <= std_logic_vector(resize(unsigned(i_1_reg_127),8));
    tmp_3_fu_348_p3 <= (j_1_reg_151 & ap_const_lv3_0);
    tmp_3_trn_cast_fu_317_p1 <= std_logic_vector(resize(unsigned(j_1_reg_151),8));
    tmp_4_fu_366_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_360_p2),64));
    tmp_4_trn_cast_fu_344_p1 <= std_logic_vector(resize(unsigned(i_3_reg_163),8));
    tmp_7_fu_249_p1 <= std_logic_vector(resize(unsigned(p_addr1_fu_243_p2),64));
    tmp_9_fu_258_p3 <= (j_reg_115 & ap_const_lv3_0);
    tmp_fu_231_p3 <= (i_1_reg_127 & ap_const_lv3_0);
    tmp_s_fu_276_p1 <= std_logic_vector(resize(unsigned(p_addr7_fu_270_p2),64));
    tmp_trn_cast_fu_227_p1 <= std_logic_vector(resize(unsigned(j_reg_115),8));
end behav;
