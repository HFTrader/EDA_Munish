// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.3
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_1d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        tmp_1,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        tmp_11
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;
input  [3:0] tmp_1;
output  [5:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [15:0] dst_d0;
input  [3:0] tmp_11;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_ce0;
reg dst_ce0;
reg dst_we0;
reg   [2:0] ap_CS_fsm = 3'b000;
wire   [5:0] dct_coeff_table_address0;
reg    dct_coeff_table_ce0;
wire   [14:0] dct_coeff_table_q0;
wire   [3:0] k_1_fu_138_p2;
reg   [3:0] k_1_reg_287;
wire   [3:0] n_1_fu_154_p2;
reg   [3:0] n_1_reg_295;
wire   [0:0] exitcond_fu_148_p2;
reg   [14:0] dct_coeff_table_load_reg_310;
reg   [15:0] src_load_reg_315;
wire   [31:0] tmp_5_fu_268_p2;
reg   [3:0] k_reg_96;
reg   [3:0] n_reg_108;
wire   [0:0] exitcond1_fu_132_p2;
reg   [31:0] tmp1_reg_119;
wire   [63:0] tmp_9_fu_182_p1;
wire   [63:0] tmp_12_fu_204_p1;
wire   [63:0] tmp_6_fu_247_p1;
wire   [6:0] tmp_7_fu_164_p3;
wire   [7:0] dct_coeff_table_addr6_cast_fu_172_p1;
wire   [7:0] tmp_6_trn5_cast_fu_160_p1;
wire   [7:0] dct_coeff_table_addr7_fu_176_p2;
wire   [6:0] tmp_10_fu_187_p3;
wire   [7:0] p_addr_cast_fu_194_p1;
wire   [7:0] p_addr1_fu_198_p2;
wire   [28:0] tmp_3_fu_144_p1;
wire   [28:0] tmp_2_fu_209_p2;
wire   [6:0] tmp_fu_230_p3;
wire   [7:0] p_addr2_cast_fu_237_p1;
wire   [7:0] tmp_trn_cast_fu_226_p1;
wire   [7:0] p_addr3_fu_241_p2;
wire   [15:0] tmp_8_fu_258_p0;
wire   [14:0] tmp_8_fu_258_p1;
wire   [30:0] tmp_8_fu_258_p2;
wire   [31:0] tmp_5_fu_268_p0;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv29_1000 = 29'b1000000000000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_true = 1'b1;


dct_1d_dct_coeff_table #(
    .DataWidth( 15 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
dct_coeff_table_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dct_coeff_table_address0 ),
    .ce0( dct_coeff_table_ce0 ),
    .q0( dct_coeff_table_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        k_reg_96 <= k_1_reg_287;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        k_reg_96 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        n_reg_108 <= n_1_reg_295;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_132_p2))) begin
        n_reg_108 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        tmp1_reg_119 <= tmp_5_fu_268_p2;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_132_p2))) begin
        tmp1_reg_119 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        dct_coeff_table_load_reg_310 <= dct_coeff_table_q0;
        src_load_reg_315 <= src_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        k_1_reg_287 <= k_1_fu_138_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        n_1_reg_295 <= n_1_fu_154_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_132_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_132_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_132_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_132_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// dct_coeff_table_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_148_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        dct_coeff_table_ce0 = ap_const_logic_1;
    end else begin
        dct_coeff_table_ce0 = ap_const_logic_0;
    end
end

/// dst_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_148_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        dst_ce0 = ap_const_logic_1;
    end else begin
        dst_ce0 = ap_const_logic_0;
    end
end

/// dst_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_148_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        dst_we0 = ap_const_logic_1;
    end else begin
        dst_we0 = ap_const_logic_0;
    end
end

/// src_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_148_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        src_ce0 = ap_const_logic_1;
    end else begin
        src_ce0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_fu_148_p2 or exitcond1_fu_132_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(ap_const_lv1_0 == exitcond1_fu_132_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            if (~(exitcond_fu_148_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign dct_coeff_table_addr6_cast_fu_172_p1 = $unsigned(tmp_7_fu_164_p3);
assign dct_coeff_table_addr7_fu_176_p2 = (dct_coeff_table_addr6_cast_fu_172_p1 + tmp_6_trn5_cast_fu_160_p1);
assign dct_coeff_table_address0 = tmp_9_fu_182_p1;
assign dst_address0 = tmp_6_fu_247_p1;
assign dst_d0 = {{tmp_2_fu_209_p2[ap_const_lv32_1C : ap_const_lv32_D]}};
assign exitcond1_fu_132_p2 = (k_reg_96 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_fu_148_p2 = (n_reg_108 == ap_const_lv4_8? 1'b1: 1'b0);
assign k_1_fu_138_p2 = (k_reg_96 + ap_const_lv4_1);
assign n_1_fu_154_p2 = (n_reg_108 + ap_const_lv4_1);
assign p_addr1_fu_198_p2 = (p_addr_cast_fu_194_p1 + tmp_6_trn5_cast_fu_160_p1);
assign p_addr2_cast_fu_237_p1 = $unsigned(tmp_fu_230_p3);
assign p_addr3_fu_241_p2 = (p_addr2_cast_fu_237_p1 + tmp_trn_cast_fu_226_p1);
assign p_addr_cast_fu_194_p1 = $unsigned(tmp_10_fu_187_p3);
assign src_address0 = tmp_12_fu_204_p1;
assign tmp_10_fu_187_p3 = {{tmp_1}, {ap_const_lv3_0}};
assign tmp_12_fu_204_p1 = $unsigned(p_addr1_fu_198_p2);
assign tmp_2_fu_209_p2 = (tmp_3_fu_144_p1 + ap_const_lv29_1000);
assign tmp_3_fu_144_p1 = tmp1_reg_119[28:0];
assign tmp_5_fu_268_p0 = $signed(tmp_8_fu_258_p2);
assign tmp_5_fu_268_p2 = (tmp_5_fu_268_p0 + tmp1_reg_119);
assign tmp_6_fu_247_p1 = $unsigned(p_addr3_fu_241_p2);
assign tmp_6_trn5_cast_fu_160_p1 = $unsigned(n_reg_108);
assign tmp_7_fu_164_p3 = {{k_reg_96}, {ap_const_lv3_0}};
assign tmp_8_fu_258_p0 = src_load_reg_315;
assign tmp_8_fu_258_p1 = dct_coeff_table_load_reg_310;
assign tmp_8_fu_258_p2 = ($signed(tmp_8_fu_258_p0) * $signed(tmp_8_fu_258_p1));
assign tmp_9_fu_182_p1 = $unsigned(dct_coeff_table_addr7_fu_176_p2);
assign tmp_fu_230_p3 = {{tmp_11}, {ap_const_lv3_0}};
assign tmp_trn_cast_fu_226_p1 = $unsigned(k_reg_96);


endmodule //dct_1d

